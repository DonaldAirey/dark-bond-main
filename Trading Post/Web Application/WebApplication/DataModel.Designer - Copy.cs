// <auto-generated />
#pragma warning disable SA1402
#pragma warning disable SA1649
#pragma warning disable CS1591
namespace DarkBond.OrderManagementSystem
{
    using System;
    using System.Collections.Generic;
    using System.Transactions;
    using DarkBond.ServiceModel;
    using DarkBond.TradingPost;
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Mvc;

    /// <summary>
    /// The product.
    /// </summary>
    public class Product
    {
        /// <summary>
        /// The productId.
        /// </summary>
        public Guid ProductId { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        public string Description { get; set; }
    }

    [Route("api/[controller]")]
    public class ProductsController : Controller
    {
        private DataModel dataModel;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsController"/> class.
        /// </summary>
        public ProductsController(DataModel dataModel)
        {
            this.dataModel = dataModel;
        }

        [Authorize]
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<Product>), 200)]
        public IActionResult Get()
        {
            List<Product> products = new List<Product>();
            try
            {
                foreach (ProductRow productRow in this.dataModel.Product)
                {
                    Product product = new Product();
                    product.Description = productRow.Description;
                    product.Name = productRow.Name;
                    product.ProductId = productRow.ProductId;
                }
            }
            catch
            {

            }
            finally
            {

            }

            return Ok(products);
        }

        [Authorize]
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(IEnumerable<string>), 200)]
        [ProducesResponseType(typeof(void), 404)]
        public IActionResult Get(Guid id)
        {
            // Product product = null;
            //if (!this.productRepository.TryGet(id, out product))
            //{
            //    return NotFound();
            //}

            return NotFound();
        }

        [Authorize]
        [HttpPut]
        [ProducesResponseType(typeof(void), 200)]
        [ProducesResponseType(typeof(void), 409)]
        public IActionResult Put([FromBody]IEnumerable<Product> products)
        {
            try
            {
                using (TransactionScope transactionScope = new TransactionScope(new CommittableTransaction()))
                {
                    foreach (Product product in products)
                    {
                        this.dataModel.CreateProduct(DateTime.Now, DateTime.Now, product.Description, null, product.Name, product.ProductId);
                    }

                    transactionScope.Complete();
                }
            }
            catch
            {
                return StatusCode(409);
            }

            return Ok();
        }

        [Authorize(Policy = "CanDelete")]
        [HttpDelete("{id}")]
        public void Delete(Guid id, long rowVersion)
        {
            // this.productRepository.Delete(id, rowVersion);
        }
    }

    public interface IProductRepository
    {
        IEnumerable<Product> Get();

        bool TryGet(Guid key, out Product value);

        void Add(Product value);

        bool Delete(Guid key, long rowVersion);
    }

    public class ProductRepository : IProductRepository
    {
        private DataModel dataModel;

        public ProductRepository(DataModel dataModel)
        {
            this.dataModel = dataModel;

            //this.Add(new Product { ProductId = Guid.NewGuid(), Description = "A Fruit", Name = "Orange" });
            //this.Add(new Product { ProductId = Guid.NewGuid(), Description = "A Dairy Product", Name = "Cheese" });
            //this.Add(new Product { ProductId = Guid.NewGuid(), Description = "Breakfast Cereal", Name = "Frosted Flakes" });
        }

        public IEnumerable<Product> Get()
        {
            List<Product> products = new List<Product>();
            //foreach (ProductRow productRow in this.dataModel.Product)
            //{
            //    Product product = new Product();
            //    product.Description = productRow.Description;
            //    product.Name = productRow.Name;
            //    product.ProductId = productRow.ProductId;
            //}

            return products;
        }

        public bool TryGet(Guid key, out Product value)
        {
            ProductRow productRow = this.dataModel.ProductKey.Find(key);
            if (productRow == null)
            {
                value = null;
                return false;
            }

            value = new Product();
            value.ProductId = productRow.ProductId;
            value.Description = productRow.Description;
            value.Name = productRow.Description;
            return true;
        }

        public void Add(Product value)
        {
            this.dataModel.CreateProduct(DateTime.Now, DateTime.Now, value.Description, null, value.Name, Guid.NewGuid());
        }

        public bool Delete(Guid key, long rowVersion)
        {
            //this.dataModel.DeleteProduct(key, rowVersion);
            return true;
        }
    }
}
#pragma warning restore CS1591
#pragma warning restore SA1402
#pragma warning restore SA1649
