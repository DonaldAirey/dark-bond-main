// <auto-generated />
#pragma warning disable SA1402
#pragma warning disable SA1649
namespace DarkBond.TradingPost
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Threading;
    using System.Transactions;
    using DarkBond.ServiceModel;

    /// <summary>
    /// Interface for a strongly typed persistent store.
    /// </summary>
    public interface IPersistentStore
    {
        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        void CreateConfiguration(string configurationId, long rowVersion, string source, string targetKey);

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void CreateCountry(string abbreviation, Guid countryId, string externalId0, string name, long rowVersion);

        /// <summary>
        /// Creates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void CreateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion);

        /// <summary>
        /// Creates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        void CreateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode);

        /// <summary>
        /// Creates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void CreateLicenseType(string description, LicenseTypeCode licenseTypeCode, long rowVersion);

        /// <summary>
        /// Creates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void CreateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, long rowVersion);

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void CreateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, long rowVersion);

        /// <summary>
        /// Deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        void DeleteConfiguration(string configurationId, string source);

        /// <summary>
        /// Deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        void DeleteCountry(Guid countryId);

        /// <summary>
        /// Deletes a Customer record.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        void DeleteCustomer(Guid customerId);

        /// <summary>
        /// Deletes a License record.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        void DeleteLicense(Guid licenseId);

        /// <summary>
        /// Deletes a LicenseType record.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        void DeleteLicenseType(LicenseTypeCode licenseTypeCode);

        /// <summary>
        /// Deletes a Product record.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        void DeleteProduct(Guid productId);

        /// <summary>
        /// Deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        void DeleteProvince(Guid provinceId);

        /// <summary>
        /// Reads the data model from the persistent store.
        /// </summary>
        /// <returns>A transaction log that can be used to build the volatile data model.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        List<object[]> Read();

        /// <summary>
        /// Updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        void UpdateConfiguration(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey);

        /// <summary>
        /// Updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void UpdateCountry(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion);

        /// <summary>
        /// Updates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="customerIdKey">The CustomerId key element.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void UpdateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, Guid customerIdKey, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion);

        /// <summary>
        /// Updates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="licenseIdKey">The LicenseId key element.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        void UpdateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid licenseIdKey, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode);

        /// <summary>
        /// Updates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        /// <param name="licenseTypeCodeKey">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void UpdateLicenseType(string description, LicenseTypeCode licenseTypeCode, LicenseTypeCode licenseTypeCodeKey, long rowVersion);

        /// <summary>
        /// Updates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="productIdKey">The ProductId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void UpdateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, Guid productIdKey, long rowVersion);

        /// <summary>
        /// Updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        void UpdateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion);
    }

    /// <summary>
    /// The fields of a ConfigurationRow.
    /// </summary>
    public sealed class ConfigurationData
    {
        /// <summary>
        /// Gets or sets the ConfigurationId.
        /// </summary>
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the Source.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the TargetKey.
        /// </summary>
        public string TargetKey { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ConfigurationData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ConfigurationData"/>.</returns>
        internal ConfigurationData Clone()
        {
            return (ConfigurationData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a CountryRow.
    /// </summary>
    public sealed class CountryData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="CountryData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="CountryData"/>.</returns>
        internal CountryData Clone()
        {
            return (CountryData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a CustomerRow.
    /// </summary>
    public sealed class CustomerData
    {
        /// <summary>
        /// Gets or sets the Address1.
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets the Address2.
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the Company.
        /// </summary>
        public string Company { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the CustomerId.
        /// </summary>
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the DateOfBirth.
        /// </summary>
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the Phone.
        /// </summary>
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets the PostalCode.
        /// </summary>
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid? ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="CustomerData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="CustomerData"/>.</returns>
        internal CustomerData Clone()
        {
            return (CustomerData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a LicenseRow.
    /// </summary>
    public sealed class LicenseData
    {
        /// <summary>
        /// Gets or sets the CustomerId.
        /// </summary>
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the DeveloperLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode DeveloperLicenseTypeCode { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the LicenseId.
        /// </summary>
        public Guid LicenseId { get; set; }

        /// <summary>
        /// Gets or sets the ProductId.
        /// </summary>
        public Guid ProductId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the RuntimeLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode RuntimeLicenseTypeCode { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="LicenseData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="LicenseData"/>.</returns>
        internal LicenseData Clone()
        {
            return (LicenseData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a LicenseTypeRow.
    /// </summary>
    public sealed class LicenseTypeData
    {
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the LicenseTypeCode.
        /// </summary>
        public LicenseTypeCode LicenseTypeCode { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="LicenseTypeData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="LicenseTypeData"/>.</returns>
        internal LicenseTypeData Clone()
        {
            return (LicenseTypeData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a ProductRow.
    /// </summary>
    public sealed class ProductData
    {
        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProductId.
        /// </summary>
        public Guid ProductId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ProductData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ProductData"/>.</returns>
        internal ProductData Clone()
        {
            return (ProductData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a ProvinceRow.
    /// </summary>
    public sealed class ProvinceData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ProvinceData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ProvinceData"/>.</returns>
        internal ProvinceData Clone()
        {
            return (ProvinceData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// A row of data in the Configuration table.
    /// </summary>
    public class ConfigurationRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ConfigurationData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<ConfigurationData> data = new List<ConfigurationData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRow"/> class.
        /// </summary>
        /// <param name="configurationTable">The parent table.</param>
        /// <param name="configurationData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal ConfigurationRow(ConfigurationTable configurationTable, ConfigurationData configurationData, bool isCommittable)
        {
            this.Table = configurationTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = configurationData);
        }

        /// <summary>
        /// Gets the ConfigurationId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public string ConfigurationId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                return this.currentData.ConfigurationId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                this.currentData.ConfigurationId = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the Source.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public string Source
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                return this.currentData.Source;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                this.currentData.Source = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ConfigurationTable Table { get; private set; }

        /// <summary>
        /// Gets the TargetKey.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public string TargetKey
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                return this.currentData.TargetKey;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                this.currentData.TargetKey = value;
            }
        }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public ConfigurationData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.ConfigurationKey.Add(this.currentData.ConfigurationId, this.currentData.Source, this);
            this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a ConfigurationRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[6];
            transactionItem[0] = 0;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.ConfigurationId;
            transactionItem[3] = this.currentData.RowVersion;
            transactionItem[4] = this.currentData.Source;
            transactionItem[5] = this.currentData.TargetKey;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[4];
            transactionItem[0] = 0;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.ConfigurationId;
            transactionItem[3] = this.currentData.Source;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            ConfigurationData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(0);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.ConfigurationId);
            transactionItem.Add(previousData.Source);
            if (this.currentData.ConfigurationId != previousData.ConfigurationId)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.ConfigurationId);
            }

            transactionItem.Add(1);
            transactionItem.Add(this.currentData.RowVersion);
            if (this.currentData.Source != previousData.Source)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.Source);
            }

            if (this.currentData.TargetKey != previousData.TargetKey)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.TargetKey);
            }

            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            this.Table.DataModel.ConfigurationKey.Remove(this.currentData.ConfigurationId, this.currentData.Source);
            this.Table.RemoveRow(this.currentData.ConfigurationId, this.currentData.Source);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                ConfigurationData previousData = this.data[this.data.Count - 2];
                if (previousData.Source != this.currentData.Source || previousData.ConfigurationId != this.currentData.ConfigurationId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.ConfigurationId, previousData.Source);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
                    this.Table.DataModel.ConfigurationKey.Update(previousData.ConfigurationId, previousData.Source, this.currentData.ConfigurationId, this.currentData.Source);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            ConfigurationData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.ConfigurationKey.Remove(this.currentData.ConfigurationId, this.currentData.Source);
            this.Table.RemoveRow(this.currentData.ConfigurationId, this.currentData.Source);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            ConfigurationData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.ConfigurationKey.Add(previousData.ConfigurationId, previousData.Source, this);
            this.Table.AddRow(previousData.ConfigurationId, previousData.Source, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            ConfigurationData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.Source != this.currentData.Source || previousData.ConfigurationId != this.currentData.ConfigurationId)
            {
                this.Table.RemoveRow(this.currentData.ConfigurationId, this.currentData.Source);
                this.Table.AddRow(previousData.ConfigurationId, previousData.Source, this);
                this.Table.DataModel.ConfigurationKey.Update(this.currentData.ConfigurationId, this.currentData.Source, previousData.ConfigurationId, previousData.Source);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the Country table.
    /// </summary>
    public class CountryRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private CountryData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<CountryData> data = new List<CountryData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRow"/> class.
        /// </summary>
        /// <param name="countryTable">The parent table.</param>
        /// <param name="countryData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal CountryRow(CountryTable countryTable, CountryData countryData, bool isCommittable)
        {
            this.Table = countryTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = countryData);
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public string Abbreviation
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                return this.currentData.Abbreviation;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                this.currentData.Abbreviation = value;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public Guid CountryId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                return this.currentData.CountryId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                this.currentData.CountryId = value;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public string ExternalId0
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                return this.currentData.ExternalId0;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                this.currentData.ExternalId0 = value;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public string Name
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                return this.currentData.Name;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                this.currentData.Name = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public CountryTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public CountryData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.CountryKey.Add(this.currentData.CountryId, this);
            this.Table.AddRow(this.currentData.CountryId, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a CountryRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[7];
            transactionItem[0] = 1;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.Abbreviation;
            transactionItem[3] = this.currentData.CountryId;
            transactionItem[4] = this.currentData.ExternalId0;
            transactionItem[5] = this.currentData.Name;
            transactionItem[6] = this.currentData.RowVersion;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 1;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.CountryId;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            CountryData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(1);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.CountryId);
            if (this.currentData.Abbreviation != previousData.Abbreviation)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.Abbreviation);
            }

            if (this.currentData.CountryId != previousData.CountryId)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.CountryId);
            }

            if (this.currentData.ExternalId0 != previousData.ExternalId0)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.ExternalId0);
            }

            if (this.currentData.Name != previousData.Name)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.Name);
            }

            transactionItem.Add(4);
            transactionItem.Add(this.currentData.RowVersion);
            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CountryKey.Remove(this.currentData.CountryId);
            this.Table.RemoveRow(this.currentData.CountryId);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                CountryData previousData = this.data[this.data.Count - 2];
                if (previousData.ExternalId0 != this.currentData.ExternalId0)
                {
                    if (previousData.ExternalId0 != null)
                    {
                        this.Table.DataModel.CountryExternalId0Key.Remove(previousData.ExternalId0);
                    }

                    if (this.currentData.ExternalId0 != null)
                    {
                        this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
                    }
                }

                if (previousData.CountryId != this.currentData.CountryId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.CountryId);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.CountryId, this);
                    this.Table.DataModel.CountryKey.Update(previousData.CountryId, this.currentData.CountryId);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            CountryData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CountryKey.Remove(this.currentData.CountryId);
            this.Table.RemoveRow(this.currentData.CountryId);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            CountryData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Add(previousData.ExternalId0, this);
            }

            this.Table.DataModel.CountryKey.Add(previousData.CountryId, this);
            this.Table.AddRow(previousData.CountryId, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            CountryData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Remove(this.currentData.ExternalId0);
                }

                if (previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Add(previousData.ExternalId0, this);
                }
            }

            if (previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.RemoveRow(this.currentData.CountryId);
                this.Table.AddRow(previousData.CountryId, this);
                this.Table.DataModel.CountryKey.Update(this.currentData.CountryId, previousData.CountryId);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the Customer table.
    /// </summary>
    public class CustomerRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private CustomerData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<CustomerData> data = new List<CustomerData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRow"/> class.
        /// </summary>
        /// <param name="customerTable">The parent table.</param>
        /// <param name="customerData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal CustomerRow(CustomerTable customerTable, CustomerData customerData, bool isCommittable)
        {
            this.Table = customerTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = customerData);
        }

        /// <summary>
        /// Gets the Address1.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string Address1
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.Address1;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.Address1 = value;
            }
        }

        /// <summary>
        /// Gets the Address2.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string Address2
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.Address2;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.Address2 = value;
            }
        }

        /// <summary>
        /// Gets the City.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string City
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.City;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.City = value;
            }
        }

        /// <summary>
        /// Gets the Company.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string Company
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.Company;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.Company = value;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public Guid CountryId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.CountryId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.CountryId = value;
            }
        }

        /// <summary>
        /// Gets the CustomerId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public Guid CustomerId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.CustomerId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.CustomerId = value;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public DateTime DateCreated
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.DateCreated;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.DateCreated = value;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public DateTime DateModified
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.DateModified;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.DateModified = value;
            }
        }

        /// <summary>
        /// Gets the DateOfBirth.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public DateTime DateOfBirth
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.DateOfBirth;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.DateOfBirth = value;
            }
        }

        /// <summary>
        /// Gets the Email.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string Email
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.Email;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.Email = value;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string ExternalId0
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.ExternalId0;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.ExternalId0 = value;
            }
        }

        /// <summary>
        /// Gets the FirstName.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string FirstName
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.FirstName;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.FirstName = value;
            }
        }

        /// <summary>
        /// Gets the LastName.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string LastName
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.LastName;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.LastName = value;
            }
        }

        /// <summary>
        /// Gets the MiddleName.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string MiddleName
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.MiddleName;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.MiddleName = value;
            }
        }

        /// <summary>
        /// Gets the Phone.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string Phone
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.Phone;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.Phone = value;
            }
        }

        /// <summary>
        /// Gets the PostalCode.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public string PostalCode
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.PostalCode;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.PostalCode = value;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public Guid? ProvinceId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.ProvinceId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.ProvinceId = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public CustomerTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public CustomerData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryCustomerCountryIdKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
            }

            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.CustomerKey.Add(this.currentData.CustomerId, this);
            this.Table.AddRow(this.currentData.CustomerId, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a CustomerRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[20];
            transactionItem[0] = 2;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.Address1;
            transactionItem[3] = this.currentData.Address2;
            transactionItem[4] = this.currentData.City;
            transactionItem[5] = this.currentData.Company;
            transactionItem[6] = this.currentData.CountryId;
            transactionItem[7] = this.currentData.CustomerId;
            transactionItem[8] = this.currentData.DateCreated;
            transactionItem[9] = this.currentData.DateModified;
            transactionItem[10] = this.currentData.DateOfBirth;
            transactionItem[11] = this.currentData.Email;
            transactionItem[12] = this.currentData.ExternalId0;
            transactionItem[13] = this.currentData.FirstName;
            transactionItem[14] = this.currentData.LastName;
            transactionItem[15] = this.currentData.MiddleName;
            transactionItem[16] = this.currentData.Phone;
            transactionItem[17] = this.currentData.PostalCode;
            transactionItem[18] = this.currentData.ProvinceId;
            transactionItem[19] = this.currentData.RowVersion;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 2;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.CustomerId;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            CustomerData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(2);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.CustomerId);
            if (this.currentData.Address1 != previousData.Address1)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.Address1);
            }

            if (this.currentData.Address2 != previousData.Address2)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.Address2);
            }

            if (this.currentData.City != previousData.City)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.City);
            }

            if (this.currentData.Company != previousData.Company)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.Company);
            }

            if (this.currentData.CountryId != previousData.CountryId)
            {
                transactionItem.Add(4);
                transactionItem.Add(this.currentData.CountryId);
            }

            if (this.currentData.CustomerId != previousData.CustomerId)
            {
                transactionItem.Add(5);
                transactionItem.Add(this.currentData.CustomerId);
            }

            if (this.currentData.DateCreated != previousData.DateCreated)
            {
                transactionItem.Add(6);
                transactionItem.Add(this.currentData.DateCreated);
            }

            if (this.currentData.DateModified != previousData.DateModified)
            {
                transactionItem.Add(7);
                transactionItem.Add(this.currentData.DateModified);
            }

            if (this.currentData.DateOfBirth != previousData.DateOfBirth)
            {
                transactionItem.Add(8);
                transactionItem.Add(this.currentData.DateOfBirth);
            }

            if (this.currentData.Email != previousData.Email)
            {
                transactionItem.Add(9);
                transactionItem.Add(this.currentData.Email);
            }

            if (this.currentData.ExternalId0 != previousData.ExternalId0)
            {
                transactionItem.Add(10);
                transactionItem.Add(this.currentData.ExternalId0);
            }

            if (this.currentData.FirstName != previousData.FirstName)
            {
                transactionItem.Add(11);
                transactionItem.Add(this.currentData.FirstName);
            }

            if (this.currentData.LastName != previousData.LastName)
            {
                transactionItem.Add(12);
                transactionItem.Add(this.currentData.LastName);
            }

            if (this.currentData.MiddleName != previousData.MiddleName)
            {
                transactionItem.Add(13);
                transactionItem.Add(this.currentData.MiddleName);
            }

            if (this.currentData.Phone != previousData.Phone)
            {
                transactionItem.Add(14);
                transactionItem.Add(this.currentData.Phone);
            }

            if (this.currentData.PostalCode != previousData.PostalCode)
            {
                transactionItem.Add(15);
                transactionItem.Add(this.currentData.PostalCode);
            }

            if (this.currentData.ProvinceId != previousData.ProvinceId)
            {
                transactionItem.Add(16);
                transactionItem.Add(this.currentData.ProvinceId);
            }

            transactionItem.Add(17);
            transactionItem.Add(this.currentData.RowVersion);
            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CustomerKey.Remove(this.currentData.CustomerId);
            this.Table.DataModel.CountryCustomerCountryIdKey.RemoveChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(this.currentData.ProvinceId.Value, this);
            }

            this.Table.RemoveRow(this.currentData.CustomerId);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                CustomerData previousData = this.data[this.data.Count - 2];
                if (previousData.CountryId != this.currentData.CountryId)
                {
                    this.Table.DataModel.CountryCustomerCountryIdKey.UpdateChild(previousData.CountryId, this.currentData.CountryId, this);
                }

                if (previousData.ProvinceId != this.currentData.ProvinceId)
                {
                    if (previousData.ProvinceId.HasValue)
                    {
                        this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(previousData.ProvinceId.Value, this);
                    }

                    if (this.currentData.ProvinceId.HasValue)
                    {
                        this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
                    }
                }

                if (previousData.ExternalId0 != this.currentData.ExternalId0)
                {
                    if (previousData.ExternalId0 != null)
                    {
                        this.Table.DataModel.CustomerExternalId0Key.Remove(previousData.ExternalId0);
                    }

                    if (this.currentData.ExternalId0 != null)
                    {
                        this.Table.DataModel.CustomerExternalId0Key.Add(this.currentData.ExternalId0, this);
                    }
                }

                if (previousData.CustomerId != this.currentData.CustomerId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.CustomerId);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.CustomerId, this);
                    this.Table.DataModel.CustomerKey.Update(previousData.CustomerId, this.currentData.CustomerId);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            CustomerData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.CountryCustomerCountryIdKey.RemoveChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(this.currentData.ProvinceId.Value, this);
            }

            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CustomerKey.Remove(this.currentData.CustomerId);
            this.Table.RemoveRow(this.currentData.CustomerId);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            CustomerData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Add(previousData.ExternalId0, this);
            }

            this.Table.DataModel.CustomerKey.Add(previousData.CustomerId, this);
            this.Table.DataModel.CountryCustomerCountryIdKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
            }

            this.Table.AddRow(previousData.CustomerId, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            CustomerData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryCustomerCountryIdKey.UpdateChild(this.currentData.CountryId, previousData.CountryId, this);
            }

            if (previousData.ProvinceId != this.currentData.ProvinceId)
            {
                if (this.currentData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(this.currentData.ProvinceId.Value, this);
                }

                if (previousData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(previousData.ProvinceId.Value, this);
                }
            }

            if (previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.CustomerExternalId0Key.Remove(this.currentData.ExternalId0);
                }

                if (previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.CustomerExternalId0Key.Add(previousData.ExternalId0, this);
                }
            }

            if (previousData.CustomerId != this.currentData.CustomerId)
            {
                this.Table.RemoveRow(this.currentData.CustomerId);
                this.Table.AddRow(previousData.CustomerId, this);
                this.Table.DataModel.CustomerKey.Update(this.currentData.CustomerId, previousData.CustomerId);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the License table.
    /// </summary>
    public class LicenseRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private LicenseData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<LicenseData> data = new List<LicenseData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseRow"/> class.
        /// </summary>
        /// <param name="licenseTable">The parent table.</param>
        /// <param name="licenseData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal LicenseRow(LicenseTable licenseTable, LicenseData licenseData, bool isCommittable)
        {
            this.Table = licenseTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = licenseData);
        }

        /// <summary>
        /// Gets the CustomerId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public Guid CustomerId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.CustomerId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.CustomerId = value;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public DateTime DateCreated
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.DateCreated;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.DateCreated = value;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public DateTime DateModified
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.DateModified;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.DateModified = value;
            }
        }

        /// <summary>
        /// Gets the DeveloperLicenseTypeCode.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public LicenseTypeCode DeveloperLicenseTypeCode
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.DeveloperLicenseTypeCode;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.DeveloperLicenseTypeCode = value;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public string ExternalId0
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.ExternalId0;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.ExternalId0 = value;
            }
        }

        /// <summary>
        /// Gets the LicenseId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public Guid LicenseId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.LicenseId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.LicenseId = value;
            }
        }

        /// <summary>
        /// Gets the ProductId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public Guid ProductId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.ProductId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.ProductId = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the RuntimeLicenseTypeCode.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public LicenseTypeCode RuntimeLicenseTypeCode
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                return this.currentData.RuntimeLicenseTypeCode;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                this.currentData.RuntimeLicenseTypeCode = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public LicenseTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public LicenseData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CustomerLicenseCustomerIdKey.AddChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.AddChild(this.currentData.ProductId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.LicenseKey.Add(this.currentData.LicenseId, this);
            this.Table.AddRow(this.currentData.LicenseId, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a LicenseRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[11];
            transactionItem[0] = 3;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.CustomerId;
            transactionItem[3] = this.currentData.DateCreated;
            transactionItem[4] = this.currentData.DateModified;
            transactionItem[5] = this.currentData.DeveloperLicenseTypeCode;
            transactionItem[6] = this.currentData.ExternalId0;
            transactionItem[7] = this.currentData.LicenseId;
            transactionItem[8] = this.currentData.ProductId;
            transactionItem[9] = this.currentData.RowVersion;
            transactionItem[10] = this.currentData.RuntimeLicenseTypeCode;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 3;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.LicenseId;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            LicenseData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(3);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.LicenseId);
            if (this.currentData.CustomerId != previousData.CustomerId)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.CustomerId);
            }

            if (this.currentData.DateCreated != previousData.DateCreated)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.DateCreated);
            }

            if (this.currentData.DateModified != previousData.DateModified)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.DateModified);
            }

            if (this.currentData.DeveloperLicenseTypeCode != previousData.DeveloperLicenseTypeCode)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.DeveloperLicenseTypeCode);
            }

            if (this.currentData.ExternalId0 != previousData.ExternalId0)
            {
                transactionItem.Add(4);
                transactionItem.Add(this.currentData.ExternalId0);
            }

            if (this.currentData.LicenseId != previousData.LicenseId)
            {
                transactionItem.Add(5);
                transactionItem.Add(this.currentData.LicenseId);
            }

            if (this.currentData.ProductId != previousData.ProductId)
            {
                transactionItem.Add(6);
                transactionItem.Add(this.currentData.ProductId);
            }

            transactionItem.Add(7);
            transactionItem.Add(this.currentData.RowVersion);
            if (this.currentData.RuntimeLicenseTypeCode != previousData.RuntimeLicenseTypeCode)
            {
                transactionItem.Add(8);
                transactionItem.Add(this.currentData.RuntimeLicenseTypeCode);
            }

            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.LicenseKey.Remove(this.currentData.LicenseId);
            this.Table.DataModel.CustomerLicenseCustomerIdKey.RemoveChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.RemoveChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.RemoveChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.RemoveChild(this.currentData.ProductId, this);
            this.Table.RemoveRow(this.currentData.LicenseId);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                LicenseData previousData = this.data[this.data.Count - 2];
                if (previousData.CustomerId != this.currentData.CustomerId)
                {
                    this.Table.DataModel.CustomerLicenseCustomerIdKey.UpdateChild(previousData.CustomerId, this.currentData.CustomerId, this);
                }

                if (previousData.DeveloperLicenseTypeCode != this.currentData.DeveloperLicenseTypeCode)
                {
                    this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.UpdateChild(previousData.DeveloperLicenseTypeCode, this.currentData.DeveloperLicenseTypeCode, this);
                }

                if (previousData.RuntimeLicenseTypeCode != this.currentData.RuntimeLicenseTypeCode)
                {
                    this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.UpdateChild(previousData.RuntimeLicenseTypeCode, this.currentData.RuntimeLicenseTypeCode, this);
                }

                if (previousData.ProductId != this.currentData.ProductId)
                {
                    this.Table.DataModel.ProductLicenseProductIdKey.UpdateChild(previousData.ProductId, this.currentData.ProductId, this);
                }

                if (previousData.ExternalId0 != this.currentData.ExternalId0)
                {
                    if (previousData.ExternalId0 != null)
                    {
                        this.Table.DataModel.LicenseExternalId0Key.Remove(previousData.ExternalId0);
                    }

                    if (this.currentData.ExternalId0 != null)
                    {
                        this.Table.DataModel.LicenseExternalId0Key.Add(this.currentData.ExternalId0, this);
                    }
                }

                if (previousData.LicenseId != this.currentData.LicenseId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.LicenseId);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.LicenseId, this);
                    this.Table.DataModel.LicenseKey.Update(previousData.LicenseId, this.currentData.LicenseId);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            LicenseData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.CustomerLicenseCustomerIdKey.RemoveChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.RemoveChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.RemoveChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.RemoveChild(this.currentData.ProductId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.LicenseKey.Remove(this.currentData.LicenseId);
            this.Table.RemoveRow(this.currentData.LicenseId);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            LicenseData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Add(previousData.ExternalId0, this);
            }

            this.Table.DataModel.LicenseKey.Add(previousData.LicenseId, this);
            this.Table.DataModel.CustomerLicenseCustomerIdKey.AddChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.AddChild(this.currentData.ProductId, this);
            this.Table.AddRow(previousData.LicenseId, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            LicenseData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.CustomerId != this.currentData.CustomerId)
            {
                this.Table.DataModel.CustomerLicenseCustomerIdKey.UpdateChild(this.currentData.CustomerId, previousData.CustomerId, this);
            }

            if (previousData.DeveloperLicenseTypeCode != this.currentData.DeveloperLicenseTypeCode)
            {
                this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.UpdateChild(this.currentData.DeveloperLicenseTypeCode, previousData.DeveloperLicenseTypeCode, this);
            }

            if (previousData.RuntimeLicenseTypeCode != this.currentData.RuntimeLicenseTypeCode)
            {
                this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.UpdateChild(this.currentData.RuntimeLicenseTypeCode, previousData.RuntimeLicenseTypeCode, this);
            }

            if (previousData.ProductId != this.currentData.ProductId)
            {
                this.Table.DataModel.ProductLicenseProductIdKey.UpdateChild(this.currentData.ProductId, previousData.ProductId, this);
            }

            if (previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.LicenseExternalId0Key.Remove(this.currentData.ExternalId0);
                }

                if (previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.LicenseExternalId0Key.Add(previousData.ExternalId0, this);
                }
            }

            if (previousData.LicenseId != this.currentData.LicenseId)
            {
                this.Table.RemoveRow(this.currentData.LicenseId);
                this.Table.AddRow(previousData.LicenseId, this);
                this.Table.DataModel.LicenseKey.Update(this.currentData.LicenseId, previousData.LicenseId);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the LicenseType table.
    /// </summary>
    public class LicenseTypeRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private LicenseTypeData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<LicenseTypeData> data = new List<LicenseTypeData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeRow"/> class.
        /// </summary>
        /// <param name="licenseTypeTable">The parent table.</param>
        /// <param name="licenseTypeData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal LicenseTypeRow(LicenseTypeTable licenseTypeTable, LicenseTypeData licenseTypeData, bool isCommittable)
        {
            this.Table = licenseTypeTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = licenseTypeData);
        }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public string Description
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                return this.currentData.Description;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                this.currentData.Description = value;
            }
        }

        /// <summary>
        /// Gets the LicenseTypeCode.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public LicenseTypeCode LicenseTypeCode
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                return this.currentData.LicenseTypeCode;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                this.currentData.LicenseTypeCode = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public LicenseTypeTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public LicenseTypeData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.LicenseTypeKey.Add(this.currentData.LicenseTypeCode, this);
            this.Table.AddRow(this.currentData.LicenseTypeCode, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a LicenseTypeRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[5];
            transactionItem[0] = 4;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.Description;
            transactionItem[3] = this.currentData.LicenseTypeCode;
            transactionItem[4] = this.currentData.RowVersion;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 4;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.LicenseTypeCode;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            LicenseTypeData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(4);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.LicenseTypeCode);
            if (this.currentData.Description != previousData.Description)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.Description);
            }

            if (this.currentData.LicenseTypeCode != previousData.LicenseTypeCode)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.LicenseTypeCode);
            }

            transactionItem.Add(2);
            transactionItem.Add(this.currentData.RowVersion);
            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            this.Table.DataModel.LicenseTypeKey.Remove(this.currentData.LicenseTypeCode);
            this.Table.RemoveRow(this.currentData.LicenseTypeCode);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                LicenseTypeData previousData = this.data[this.data.Count - 2];
                if (previousData.LicenseTypeCode != this.currentData.LicenseTypeCode)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.LicenseTypeCode);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.LicenseTypeCode, this);
                    this.Table.DataModel.LicenseTypeKey.Update(previousData.LicenseTypeCode, this.currentData.LicenseTypeCode);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            LicenseTypeData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.LicenseTypeKey.Remove(this.currentData.LicenseTypeCode);
            this.Table.RemoveRow(this.currentData.LicenseTypeCode);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            LicenseTypeData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.LicenseTypeKey.Add(previousData.LicenseTypeCode, this);
            this.Table.AddRow(previousData.LicenseTypeCode, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            LicenseTypeData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.LicenseTypeCode != this.currentData.LicenseTypeCode)
            {
                this.Table.RemoveRow(this.currentData.LicenseTypeCode);
                this.Table.AddRow(previousData.LicenseTypeCode, this);
                this.Table.DataModel.LicenseTypeKey.Update(this.currentData.LicenseTypeCode, previousData.LicenseTypeCode);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the Product table.
    /// </summary>
    public class ProductRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ProductData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<ProductData> data = new List<ProductData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRow"/> class.
        /// </summary>
        /// <param name="productTable">The parent table.</param>
        /// <param name="productData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal ProductRow(ProductTable productTable, ProductData productData, bool isCommittable)
        {
            this.Table = productTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = productData);
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public DateTime DateCreated
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.DateCreated;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.DateCreated = value;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public DateTime DateModified
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.DateModified;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.DateModified = value;
            }
        }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public string Description
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.Description;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.Description = value;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public string ExternalId0
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.ExternalId0;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.ExternalId0 = value;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public string Name
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.Name;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.Name = value;
            }
        }

        /// <summary>
        /// Gets the ProductId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public Guid ProductId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.ProductId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.ProductId = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ProductTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public ProductData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.ProductKey.Add(this.currentData.ProductId, this);
            this.Table.AddRow(this.currentData.ProductId, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a ProductRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[9];
            transactionItem[0] = 5;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.DateCreated;
            transactionItem[3] = this.currentData.DateModified;
            transactionItem[4] = this.currentData.Description;
            transactionItem[5] = this.currentData.ExternalId0;
            transactionItem[6] = this.currentData.Name;
            transactionItem[7] = this.currentData.ProductId;
            transactionItem[8] = this.currentData.RowVersion;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 5;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.ProductId;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            ProductData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(5);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.ProductId);
            if (this.currentData.DateCreated != previousData.DateCreated)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.DateCreated);
            }

            if (this.currentData.DateModified != previousData.DateModified)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.DateModified);
            }

            if (this.currentData.Description != previousData.Description)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.Description);
            }

            if (this.currentData.ExternalId0 != previousData.ExternalId0)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.ExternalId0);
            }

            if (this.currentData.Name != previousData.Name)
            {
                transactionItem.Add(4);
                transactionItem.Add(this.currentData.Name);
            }

            if (this.currentData.ProductId != previousData.ProductId)
            {
                transactionItem.Add(5);
                transactionItem.Add(this.currentData.ProductId);
            }

            transactionItem.Add(6);
            transactionItem.Add(this.currentData.RowVersion);
            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProductKey.Remove(this.currentData.ProductId);
            this.Table.RemoveRow(this.currentData.ProductId);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                ProductData previousData = this.data[this.data.Count - 2];
                if (previousData.ExternalId0 != this.currentData.ExternalId0)
                {
                    if (previousData.ExternalId0 != null)
                    {
                        this.Table.DataModel.ProductExternalId0Key.Remove(previousData.ExternalId0);
                    }

                    if (this.currentData.ExternalId0 != null)
                    {
                        this.Table.DataModel.ProductExternalId0Key.Add(this.currentData.ExternalId0, this);
                    }
                }

                if (previousData.ProductId != this.currentData.ProductId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.ProductId);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.ProductId, this);
                    this.Table.DataModel.ProductKey.Update(previousData.ProductId, this.currentData.ProductId);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            ProductData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProductKey.Remove(this.currentData.ProductId);
            this.Table.RemoveRow(this.currentData.ProductId);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            ProductData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Add(previousData.ExternalId0, this);
            }

            this.Table.DataModel.ProductKey.Add(previousData.ProductId, this);
            this.Table.AddRow(previousData.ProductId, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            ProductData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProductExternalId0Key.Remove(this.currentData.ExternalId0);
                }

                if (previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProductExternalId0Key.Add(previousData.ExternalId0, this);
                }
            }

            if (previousData.ProductId != this.currentData.ProductId)
            {
                this.Table.RemoveRow(this.currentData.ProductId);
                this.Table.AddRow(previousData.ProductId, this);
                this.Table.DataModel.ProductKey.Update(this.currentData.ProductId, previousData.ProductId);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// A row of data in the Province table.
    /// </summary>
    public class ProvinceRow : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The index of the data during the execution of a transaction.
        /// </summary>
        private int actionIndex = 1;

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ProvinceData currentData;

        /// <summary>
        /// The states of the data.
        /// </summary>
        private List<ProvinceData> data = new List<ProvinceData>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceRow"/> class.
        /// </summary>
        /// <param name="provinceTable">The parent table.</param>
        /// <param name="provinceData">The initial data.</param>
        /// <param name="isCommittable">Indicates the record is part of a transaction.</param>
        internal ProvinceRow(ProvinceTable provinceTable, ProvinceData provinceData, bool isCommittable)
        {
            this.Table = provinceTable;
            this.RowState = RowState.Detached;
            if (isCommittable)
            {
                this.data.Add(null);
            }

            this.data.Add(this.currentData = provinceData);
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public string Abbreviation
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.Abbreviation;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.Abbreviation = value;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public Guid CountryId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.CountryId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.CountryId = value;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public string ExternalId0
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.ExternalId0;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.ExternalId0 = value;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public string Name
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.Name;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.Name = value;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public Guid ProvinceId
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.ProvinceId;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.ProvinceId = value;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; internal set; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public long RowVersion
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                return this.currentData.RowVersion;
            }

            internal set
            {
                if (!this.IsWriterLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                this.currentData.RowVersion = value;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ProvinceTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public ProvinceData this[DataRowVersion dataRowVersion]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province row is not locked.");
                }

                switch (dataRowVersion)
                {
                    case DataRowVersion.Current:
                        return this.data[this.data.Count - 1];
                    case DataRowVersion.Original:
                        return this.data[0];
                    default:
                        return this.data[this.data.Count - 2];
                }
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Adds a row to the table.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryProvinceKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.ProvinceKey.Add(this.currentData.ProvinceId, this);
            this.Table.AddRow(this.currentData.ProvinceId, this);
            this.Table.OnRowChanging(DataAction.Add, this);
        }

        /// <summary>
        /// Starts an edit operation on a ProvinceRow object.
        /// </summary>
        internal void BeginUpdate()
        {
            this.RowState = RowState.Modified;
            this.data.Add(this.currentData = this.currentData.Clone());
        }

        /// <summary>
        /// Commit a new row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Generated by a tool.")]
        internal void CommitAdd()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[8];
            transactionItem[0] = 6;
            transactionItem[1] = RecordState.Added;
            transactionItem[2] = this.currentData.Abbreviation;
            transactionItem[3] = this.currentData.CountryId;
            transactionItem[4] = this.currentData.ExternalId0;
            transactionItem[5] = this.currentData.Name;
            transactionItem[6] = this.currentData.ProvinceId;
            transactionItem[7] = this.currentData.RowVersion;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Add, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit a deleted row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitDelete()
        {
            this.currentData = this.data[this.actionIndex];
            object[] transactionItem = new object[3];
            transactionItem[0] = 6;
            transactionItem[1] = RecordState.Deleted;
            transactionItem[2] = this.currentData.ProvinceId;
            this.Table.DataModel.AddTransaction(transactionItem);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Delete, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Commit an updated row.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "By design.")]
        internal void CommitUpdate()
        {
            ProvinceData previousData = this.data[this.actionIndex - 1];
            this.currentData = this.data[this.actionIndex];
            List<object> transactionItem = new List<object>();
            transactionItem.Add(6);
            transactionItem.Add(RecordState.Modified);
            transactionItem.Add(previousData.ProvinceId);
            if (this.currentData.Abbreviation != previousData.Abbreviation)
            {
                transactionItem.Add(0);
                transactionItem.Add(this.currentData.Abbreviation);
            }

            if (this.currentData.CountryId != previousData.CountryId)
            {
                transactionItem.Add(1);
                transactionItem.Add(this.currentData.CountryId);
            }

            if (this.currentData.ExternalId0 != previousData.ExternalId0)
            {
                transactionItem.Add(2);
                transactionItem.Add(this.currentData.ExternalId0);
            }

            if (this.currentData.Name != previousData.Name)
            {
                transactionItem.Add(3);
                transactionItem.Add(this.currentData.Name);
            }

            if (this.currentData.ProvinceId != previousData.ProvinceId)
            {
                transactionItem.Add(4);
                transactionItem.Add(this.currentData.ProvinceId);
            }

            transactionItem.Add(5);
            transactionItem.Add(this.currentData.RowVersion);
            this.Table.DataModel.AddTransaction(transactionItem.ToArray());
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData);
                this.actionIndex = 1;
                try
                {
                    this.Table.OnRowChanged(DataAction.Update, this);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.RowState = RowState.Deleted;
            this.data.Add(this.currentData.Clone());
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProvinceKey.Remove(this.currentData.ProvinceId);
            this.Table.DataModel.CountryProvinceKey.RemoveChild(this.currentData.CountryId, this);
            this.Table.RemoveRow(this.currentData.ProvinceId);
            this.Table.OnRowChanging(DataAction.Delete, this);
        }

        /// <summary>
        /// Raises an event that indicates the row has been modified.
        /// </summary>
        internal void EndUpdate()
        {
            if (this.RowState == RowState.Modified)
            {
                ProvinceData previousData = this.data[this.data.Count - 2];
                if (previousData.CountryId != this.currentData.CountryId)
                {
                    this.Table.DataModel.CountryProvinceKey.UpdateChild(previousData.CountryId, this.currentData.CountryId, this);
                }

                if (previousData.ExternalId0 != this.currentData.ExternalId0)
                {
                    if (previousData.ExternalId0 != null)
                    {
                        this.Table.DataModel.ProvinceExternalId0Key.Remove(previousData.ExternalId0);
                    }

                    if (this.currentData.ExternalId0 != null)
                    {
                        this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
                    }
                }

                if (previousData.ProvinceId != this.currentData.ProvinceId)
                {
                    this.currentData = this.data[this.data.Count - 2];
                    this.Table.RemoveRow(previousData.ProvinceId);
                    this.currentData = this.data[this.data.Count - 1];
                    this.Table.AddRow(this.currentData.ProvinceId, this);
                    this.Table.DataModel.ProvinceKey.Update(previousData.ProvinceId, this.currentData.ProvinceId);
                }

                this.Table.OnRowChanging(DataAction.Update, this);
            }
        }

        /// <summary>
        /// Rollback a new row.
        /// </summary>
        internal void RollbackAdd()
        {
            ProvinceData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            this.Table.DataModel.CountryProvinceKey.RemoveChild(this.currentData.CountryId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProvinceKey.Remove(this.currentData.ProvinceId);
            this.Table.RemoveRow(this.currentData.ProvinceId);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Detached;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback a deleted row.
        /// </summary>
        internal void RollbackDelete()
        {
            ProvinceData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Add(previousData.ExternalId0, this);
            }

            this.Table.DataModel.ProvinceKey.Add(previousData.ProvinceId, this);
            this.Table.DataModel.CountryProvinceKey.AddChild(this.currentData.CountryId, this);
            this.Table.AddRow(previousData.ProvinceId, this);
            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }

        /// <summary>
        /// Rollback an updated row.
        /// </summary>
        internal void RollbackUpdate()
        {
            ProvinceData previousData = this.data[this.data.Count - this.actionIndex - 1];
            this.currentData = this.data[this.data.Count - this.actionIndex];
            if (previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryProvinceKey.UpdateChild(this.currentData.CountryId, previousData.CountryId, this);
            }

            if (previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Remove(this.currentData.ExternalId0);
                }

                if (previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Add(previousData.ExternalId0, this);
                }
            }

            if (previousData.ProvinceId != this.currentData.ProvinceId)
            {
                this.Table.RemoveRow(this.currentData.ProvinceId);
                this.Table.AddRow(previousData.ProvinceId, this);
                this.Table.DataModel.ProvinceKey.Update(this.currentData.ProvinceId, previousData.ProvinceId);
            }

            if (this.actionIndex++ == this.data.Count - 1)
            {
                this.RowState = RowState.Unchanged;
                this.data.Clear();
                this.data.Add(this.currentData = previousData);
                this.actionIndex = 1;
            }
        }
    }

    /// <summary>
    /// Arguments that describe a change in a Configuration table row.
    /// </summary>
    public class ConfigurationRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="configurationRow">The Configuration row that has changed.</param>
        public ConfigurationRowChangeEventArgs(DataAction dataAction, ConfigurationRow configurationRow)
        {
            this.DataAction = dataAction;
            this.Row = configurationRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public ConfigurationRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a Country table row.
    /// </summary>
    public class CountryRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="countryRow">The Country row that has changed.</param>
        public CountryRowChangeEventArgs(DataAction dataAction, CountryRow countryRow)
        {
            this.DataAction = dataAction;
            this.Row = countryRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public CountryRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a Customer table row.
    /// </summary>
    public class CustomerRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="customerRow">The Customer row that has changed.</param>
        public CustomerRowChangeEventArgs(DataAction dataAction, CustomerRow customerRow)
        {
            this.DataAction = dataAction;
            this.Row = customerRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public CustomerRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a License table row.
    /// </summary>
    public class LicenseRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="licenseRow">The License row that has changed.</param>
        public LicenseRowChangeEventArgs(DataAction dataAction, LicenseRow licenseRow)
        {
            this.DataAction = dataAction;
            this.Row = licenseRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public LicenseRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a LicenseType table row.
    /// </summary>
    public class LicenseTypeRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="licenseTypeRow">The LicenseType row that has changed.</param>
        public LicenseTypeRowChangeEventArgs(DataAction dataAction, LicenseTypeRow licenseTypeRow)
        {
            this.DataAction = dataAction;
            this.Row = licenseTypeRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public LicenseTypeRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a Product table row.
    /// </summary>
    public class ProductRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="productRow">The Product row that has changed.</param>
        public ProductRowChangeEventArgs(DataAction dataAction, ProductRow productRow)
        {
            this.DataAction = dataAction;
            this.Row = productRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public ProductRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// Arguments that describe a change in a Province table row.
    /// </summary>
    public class ProvinceRowChangeEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceRowChangeEventArgs"/> class.
        /// </summary>
        /// <param name="dataAction">The action that caused the change.</param>
        /// <param name="provinceRow">The Province row that has changed.</param>
        public ProvinceRowChangeEventArgs(DataAction dataAction, ProvinceRow provinceRow)
        {
            this.DataAction = dataAction;
            this.Row = provinceRow;
        }

        /// <summary>
        /// Gets the changed row.
        /// </summary>
        public ProvinceRow Row { get; private set; }

        /// <summary>
        /// Gets the action that caused the change to the row.
        /// </summary>
        public DataAction DataAction { get; private set; }
    }

    /// <summary>
    /// The Configuration table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ConfigurationTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<ConfigurationRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the Configuration table.
        /// </summary>
        private ObservableCollection<ConfigurationRow> rows = new ObservableCollection<ConfigurationRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ConfigurationTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ConfigurationRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ConfigurationRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the Configuration table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the Configuration table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The Configuration row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public ConfigurationRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Configuration table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        public IEnumerator<ConfigurationRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Configuration table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Configuration table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        internal void AddRow(string configurationId, string source, ConfigurationRow configurationRow)
        {
            if (configurationRow == null)
            {
                throw new ArgumentNullException("configurationRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Configuration table is not locked.");
            }

            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.rows.Insert(~index, configurationRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the Configuration row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="configurationRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, ConfigurationRow configurationRow)
        {
            this.RowChanged?.Invoke(this, new ConfigurationRowChangeEventArgs(dataAction, configurationRow));
        }

        /// <summary>
        /// Handles a proposed change to the Configuration row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="configurationRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, ConfigurationRow configurationRow)
        {
            this.RowChanging?.Invoke(this, new ConfigurationRowChangeEventArgs(dataAction, configurationRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        internal void RemoveRow(string configurationId, string source)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Configuration table is not locked.");
            }

            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(string configurationId, string source)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ConfigurationRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = string.CompareOrdinal(midRow.ConfigurationId, configurationId);
                    if (compare == 0)
                    {
                        compare = string.CompareOrdinal(midRow.Source, source);
                    }
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            ConfigurationData configurationData = new ConfigurationData();
            configurationData.ConfigurationId = (string)transactionItem[2];
            configurationData.RowVersion = (long)transactionItem[3];
            configurationData.Source = (string)transactionItem[4];
            configurationData.TargetKey = (string)transactionItem[5];
            ConfigurationRow configurationRow = new ConfigurationRow(this, configurationData, false);
            configurationRow.Add();
            configurationRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The Country table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class CountryTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<CountryRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the Country table.
        /// </summary>
        private ObservableCollection<CountryRow> rows = new ObservableCollection<CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<CountryRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<CountryRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the Country table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the Country table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The Country row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public CountryRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Country table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        public IEnumerator<CountryRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Country table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Country table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        internal void AddRow(Guid countryId, CountryRow countryRow)
        {
            if (countryRow == null)
            {
                throw new ArgumentNullException("countryRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Country table is not locked.");
            }

            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.rows.Insert(~index, countryRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the Country row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="countryRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, CountryRow countryRow)
        {
            this.RowChanged?.Invoke(this, new CountryRowChangeEventArgs(dataAction, countryRow));
        }

        /// <summary>
        /// Handles a proposed change to the Country row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="countryRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, CountryRow countryRow)
        {
            this.RowChanging?.Invoke(this, new CountryRowChangeEventArgs(dataAction, countryRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        internal void RemoveRow(Guid countryId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Country table is not locked.");
            }

            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(Guid countryId)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                CountryRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.CountryId.CompareTo(countryId);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            CountryData countryData = new CountryData();
            countryData.Abbreviation = (string)transactionItem[2];
            countryData.CountryId = (Guid)transactionItem[3];
            countryData.ExternalId0 = (string)transactionItem[4];
            countryData.Name = (string)transactionItem[5];
            countryData.RowVersion = (long)transactionItem[6];
            CountryRow countryRow = new CountryRow(this, countryData, false);
            countryRow.Add();
            countryRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The Customer table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class CustomerTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<CustomerRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the Customer table.
        /// </summary>
        private ObservableCollection<CustomerRow> rows = new ObservableCollection<CustomerRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<CustomerRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<CustomerRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the Customer table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the Customer table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The Customer row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public CustomerRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Customer table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        public IEnumerator<CustomerRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Customer table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Customer table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="customerRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        internal void AddRow(Guid customerId, CustomerRow customerRow)
        {
            if (customerRow == null)
            {
                throw new ArgumentNullException("customerRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Customer table is not locked.");
            }

            int index = this.BinarySearch(customerId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("CustomerKey", new object[] { customerId });
            }

            this.rows.Insert(~index, customerRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the Customer row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="customerRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, CustomerRow customerRow)
        {
            this.RowChanged?.Invoke(this, new CustomerRowChangeEventArgs(dataAction, customerRow));
        }

        /// <summary>
        /// Handles a proposed change to the Customer row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="customerRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, CustomerRow customerRow)
        {
            this.RowChanging?.Invoke(this, new CustomerRowChangeEventArgs(dataAction, customerRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        internal void RemoveRow(Guid customerId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Customer table is not locked.");
            }

            int index = this.BinarySearch(customerId);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(Guid customerId)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                CustomerRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.CustomerId.CompareTo(customerId);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            CustomerData customerData = new CustomerData();
            customerData.Address1 = (string)transactionItem[2];
            customerData.Address2 = (string)transactionItem[3];
            customerData.City = (string)transactionItem[4];
            customerData.Company = (string)transactionItem[5];
            customerData.CountryId = (Guid)transactionItem[6];
            customerData.CustomerId = (Guid)transactionItem[7];
            customerData.DateCreated = (DateTime)transactionItem[8];
            customerData.DateModified = (DateTime)transactionItem[9];
            customerData.DateOfBirth = (DateTime)transactionItem[10];
            customerData.Email = (string)transactionItem[11];
            customerData.ExternalId0 = (string)transactionItem[12];
            customerData.FirstName = (string)transactionItem[13];
            customerData.LastName = (string)transactionItem[14];
            customerData.MiddleName = (string)transactionItem[15];
            customerData.Phone = (string)transactionItem[16];
            customerData.PostalCode = (string)transactionItem[17];
            customerData.ProvinceId = (Guid?)transactionItem[18];
            customerData.RowVersion = (long)transactionItem[19];
            CustomerRow customerRow = new CustomerRow(this, customerData, false);
            if (!this.DataModel.CountryKey.ContainsKey(customerData.CountryId))
            {
                return false;
            }

            if (customerData.ProvinceId.HasValue)
            {
                if (!this.DataModel.ProvinceKey.ContainsKey(customerData.ProvinceId.Value))
                {
                    return false;
                }
            }

            customerRow.Add();
            customerRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The License table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class LicenseTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<LicenseRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the License table.
        /// </summary>
        private ObservableCollection<LicenseRow> rows = new ObservableCollection<LicenseRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<LicenseRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<LicenseRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the License table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the License table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The License row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public LicenseRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("License table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        public IEnumerator<LicenseRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("License table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("License table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="licenseRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        internal void AddRow(Guid licenseId, LicenseRow licenseRow)
        {
            if (licenseRow == null)
            {
                throw new ArgumentNullException("licenseRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("License table is not locked.");
            }

            int index = this.BinarySearch(licenseId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("LicenseKey", new object[] { licenseId });
            }

            this.rows.Insert(~index, licenseRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the License row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="licenseRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, LicenseRow licenseRow)
        {
            this.RowChanged?.Invoke(this, new LicenseRowChangeEventArgs(dataAction, licenseRow));
        }

        /// <summary>
        /// Handles a proposed change to the License row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="licenseRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, LicenseRow licenseRow)
        {
            this.RowChanging?.Invoke(this, new LicenseRowChangeEventArgs(dataAction, licenseRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        internal void RemoveRow(Guid licenseId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("License table is not locked.");
            }

            int index = this.BinarySearch(licenseId);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(Guid licenseId)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                LicenseRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.LicenseId.CompareTo(licenseId);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            LicenseData licenseData = new LicenseData();
            licenseData.CustomerId = (Guid)transactionItem[2];
            licenseData.DateCreated = (DateTime)transactionItem[3];
            licenseData.DateModified = (DateTime)transactionItem[4];
            licenseData.DeveloperLicenseTypeCode = (LicenseTypeCode)transactionItem[5];
            licenseData.ExternalId0 = (string)transactionItem[6];
            licenseData.LicenseId = (Guid)transactionItem[7];
            licenseData.ProductId = (Guid)transactionItem[8];
            licenseData.RowVersion = (long)transactionItem[9];
            licenseData.RuntimeLicenseTypeCode = (LicenseTypeCode)transactionItem[10];
            LicenseRow licenseRow = new LicenseRow(this, licenseData, false);
            if (!this.DataModel.CustomerKey.ContainsKey(licenseData.CustomerId))
            {
                return false;
            }

            if (!this.DataModel.LicenseTypeKey.ContainsKey(licenseData.DeveloperLicenseTypeCode))
            {
                return false;
            }

            if (!this.DataModel.LicenseTypeKey.ContainsKey(licenseData.RuntimeLicenseTypeCode))
            {
                return false;
            }

            if (!this.DataModel.ProductKey.ContainsKey(licenseData.ProductId))
            {
                return false;
            }

            licenseRow.Add();
            licenseRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The LicenseType table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class LicenseTypeTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<LicenseTypeRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the LicenseType table.
        /// </summary>
        private ObservableCollection<LicenseTypeRow> rows = new ObservableCollection<LicenseTypeRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<LicenseTypeRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<LicenseTypeRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the LicenseType table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the LicenseType table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The LicenseType row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public LicenseTypeRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("LicenseType table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        public IEnumerator<LicenseTypeRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseType table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseType table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseTypeRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        internal void AddRow(LicenseTypeCode licenseTypeCode, LicenseTypeRow licenseTypeRow)
        {
            if (licenseTypeRow == null)
            {
                throw new ArgumentNullException("licenseTypeRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseType table is not locked.");
            }

            int index = this.BinarySearch(licenseTypeCode);
            if (index >= 0)
            {
                throw new DuplicateKeyException("LicenseTypeKey", new object[] { licenseTypeCode });
            }

            this.rows.Insert(~index, licenseTypeRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the LicenseType row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="licenseTypeRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, LicenseTypeRow licenseTypeRow)
        {
            this.RowChanged?.Invoke(this, new LicenseTypeRowChangeEventArgs(dataAction, licenseTypeRow));
        }

        /// <summary>
        /// Handles a proposed change to the LicenseType row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="licenseTypeRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, LicenseTypeRow licenseTypeRow)
        {
            this.RowChanging?.Invoke(this, new LicenseTypeRowChangeEventArgs(dataAction, licenseTypeRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        internal void RemoveRow(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseType table is not locked.");
            }

            int index = this.BinarySearch(licenseTypeCode);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(LicenseTypeCode licenseTypeCode)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                LicenseTypeRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.LicenseTypeCode.CompareTo(licenseTypeCode);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            LicenseTypeData licenseTypeData = new LicenseTypeData();
            licenseTypeData.Description = (string)transactionItem[2];
            licenseTypeData.LicenseTypeCode = (LicenseTypeCode)transactionItem[3];
            licenseTypeData.RowVersion = (long)transactionItem[4];
            LicenseTypeRow licenseTypeRow = new LicenseTypeRow(this, licenseTypeData, false);
            licenseTypeRow.Add();
            licenseTypeRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The Product table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ProductTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<ProductRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the Product table.
        /// </summary>
        private ObservableCollection<ProductRow> rows = new ObservableCollection<ProductRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ProductRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ProductRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the Product table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the Product table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The Product row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public ProductRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Product table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        public IEnumerator<ProductRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Product table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Product table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="productRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        internal void AddRow(Guid productId, ProductRow productRow)
        {
            if (productRow == null)
            {
                throw new ArgumentNullException("productRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Product table is not locked.");
            }

            int index = this.BinarySearch(productId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ProductKey", new object[] { productId });
            }

            this.rows.Insert(~index, productRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the Product row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="productRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, ProductRow productRow)
        {
            this.RowChanged?.Invoke(this, new ProductRowChangeEventArgs(dataAction, productRow));
        }

        /// <summary>
        /// Handles a proposed change to the Product row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="productRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, ProductRow productRow)
        {
            this.RowChanging?.Invoke(this, new ProductRowChangeEventArgs(dataAction, productRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        internal void RemoveRow(Guid productId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Product table is not locked.");
            }

            int index = this.BinarySearch(productId);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(Guid productId)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ProductRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.ProductId.CompareTo(productId);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            ProductData productData = new ProductData();
            productData.DateCreated = (DateTime)transactionItem[2];
            productData.DateModified = (DateTime)transactionItem[3];
            productData.Description = (string)transactionItem[4];
            productData.ExternalId0 = (string)transactionItem[5];
            productData.Name = (string)transactionItem[6];
            productData.ProductId = (Guid)transactionItem[7];
            productData.RowVersion = (long)transactionItem[8];
            ProductRow productRow = new ProductRow(this, productData, false);
            productRow.Add();
            productRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// The Province table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ProvinceTable : DarkBond.ServiceModel.ReaderWriterLock, IEnumerable<ProvinceRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Func<object[], bool>[] mergeFunctions = new Func<object[], bool>[3];

        /// <summary>
        /// The rows of the Province table.
        /// </summary>
        private ObservableCollection<ProvinceRow> rows = new ObservableCollection<ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeFunctions[RecordState.Added] = this.MergeAdd;
        }

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ProvinceRowChangeEventArgs> RowChanged;

        /// <summary>
        /// Occurs when a row has changed.
        /// </summary>
        public event EventHandler<ProvinceRowChangeEventArgs> RowChanging;

        /// <summary>
        /// Gets the number of rows in the Province table.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public int Count
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province table is not locked.");
                }

                return this.rows.Count;
            }
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Indexer to a row in the Province table.
        /// </summary>
        /// <param name="index">The index of the row.</param>
        /// <returns>The Province row found at the given index.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public ProvinceRow this[int index]
        {
            get
            {
                if (!this.IsLockHeld)
                {
                    throw new LockException("Province table is not locked.");
                }

                return this.rows[index];
            }
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        public IEnumerator<ProvinceRow> GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Province table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("Province table is not locked.");
            }

            return this.rows.GetEnumerator();
        }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        internal void AddRow(Guid provinceId, ProvinceRow provinceRow)
        {
            if (provinceRow == null)
            {
                throw new ArgumentNullException("provinceRow");
            }

            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Province table is not locked.");
            }

            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.rows.Insert(~index, provinceRow);
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal bool MergeRecord(object[] transactionItem)
        {
            return this.mergeFunctions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Handles a change to the Province row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="provinceRow">The row on which the action was taken.</param>
        internal void OnRowChanged(DataAction dataAction, ProvinceRow provinceRow)
        {
            this.RowChanged?.Invoke(this, new ProvinceRowChangeEventArgs(dataAction, provinceRow));
        }

        /// <summary>
        /// Handles a proposed change to the Province row.
        /// </summary>
        /// <param name="dataAction">The action taken.</param>
        /// <param name="provinceRow">The row on which the action was taken.</param>
        internal void OnRowChanging(DataAction dataAction, ProvinceRow provinceRow)
        {
            this.RowChanging?.Invoke(this, new ProvinceRowChangeEventArgs(dataAction, provinceRow));
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        internal void RemoveRow(Guid provinceId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("Province table is not locked.");
            }

            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                this.rows.RemoveAt(index);
            }
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        private int BinarySearch(Guid provinceId)
        {
            int low = 0;
            int high = this.rows.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ProvinceRow midRow = this[mid];
                int compare;
                try
                {
                    midRow.AcquireReaderLock();
                    compare = midRow.ProvinceId.CompareTo(provinceId);
                }
                finally
                {
                    midRow.ReleaseReaderLock();
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private bool MergeAdd(object[] transactionItem)
        {
            ProvinceData provinceData = new ProvinceData();
            provinceData.Abbreviation = (string)transactionItem[2];
            provinceData.CountryId = (Guid)transactionItem[3];
            provinceData.ExternalId0 = (string)transactionItem[4];
            provinceData.Name = (string)transactionItem[5];
            provinceData.ProvinceId = (Guid)transactionItem[6];
            provinceData.RowVersion = (long)transactionItem[7];
            ProvinceRow provinceRow = new ProvinceRow(this, provinceData, false);
            if (!this.DataModel.CountryKey.ContainsKey(provinceData.CountryId))
            {
                return false;
            }

            provinceRow.Add();
            provinceRow.RowState = RowState.Unchanged;
            return true;
        }
    }

    /// <summary>
    /// A thread-safe DataSet able to handle transactions.
    /// </summary>
    public class DataModel : DarkBond.ServiceModel.ReaderWriterLock, IDisposable
    {
        /// <summary>
        /// Index of the row version column.
        /// </summary>
        private static int[] rowVersionIndex = new int[] { 3, 6, 19, 9, 4, 8, 7 };

        /// <summary>
        /// The unique identifier of this instance.
        /// </summary>
        private Guid identifierField;

        /// <summary>
        /// The persistent store.
        /// </summary>
        private IPersistentStore persistentStore;

        /// <summary>
        /// The most recent row version for the data set.
        /// </summary>
        private long rowVersionField = -1;

        /// <summary>
        /// The sequence number of each transaction.
        /// </summary>
        private long sequenceField;

        /// <summary>
        /// Used to synchronize access to the housekeeping fields.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// The vector to the transaction handlers for each of the tables.
        /// </summary>
        private Func<object[], bool>[] transactionHandlers = new Func<object[], bool>[7];

        /// <summary>
        /// The transaction log.
        /// </summary>
        private LinkedList<TransactionLogItem> transactionLog;

        /// <summary>
        /// A collection of pending transactions.
        /// </summary>
        private Dictionary<Transaction, VolatileTransaction> transactionTable = new Dictionary<Transaction, VolatileTransaction>();

        /// <summary>
        /// Initializes a new instance of the <see cref="DataModel"/> class.
        /// </summary>
        /// <param name="persistentStore">The persistent store.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated by a tool.")]
        public DataModel(IPersistentStore persistentStore)
        {
            if (persistentStore == null)
            {
                throw new ArgumentNullException("persistentStore");
            }

            this.persistentStore = persistentStore;
            this.transactionHandlers[0] = (d) => this.Configuration.MergeRecord(d);
            this.transactionHandlers[1] = (d) => this.Country.MergeRecord(d);
            this.transactionHandlers[2] = (d) => this.Customer.MergeRecord(d);
            this.transactionHandlers[3] = (d) => this.License.MergeRecord(d);
            this.transactionHandlers[4] = (d) => this.LicenseType.MergeRecord(d);
            this.transactionHandlers[5] = (d) => this.Product.MergeRecord(d);
            this.transactionHandlers[6] = (d) => this.Province.MergeRecord(d);
            this.Configuration = new ConfigurationTable(this);
            this.Country = new CountryTable(this);
            this.Customer = new CustomerTable(this);
            this.License = new LicenseTable(this);
            this.LicenseType = new LicenseTypeTable(this);
            this.Product = new ProductTable(this);
            this.Province = new ProvinceTable(this);
            this.ConfigurationKey = new ConfigurationKey(this);
            this.CountryExternalId0Key = new CountryExternalId0Key(this);
            this.CountryKey = new CountryKey(this);
            this.CustomerExternalId0Key = new CustomerExternalId0Key(this);
            this.CustomerKey = new CustomerKey(this);
            this.LicenseExternalId0Key = new LicenseExternalId0Key(this);
            this.LicenseKey = new LicenseKey(this);
            this.LicenseTypeKey = new LicenseTypeKey(this);
            this.ProductExternalId0Key = new ProductExternalId0Key(this);
            this.ProductKey = new ProductKey(this);
            this.ProvinceExternalId0Key = new ProvinceExternalId0Key(this);
            this.ProvinceKey = new ProvinceKey(this);
            this.CountryCustomerCountryIdKey = new CountryCustomerCountryIdKey(this);
            this.CountryProvinceKey = new CountryProvinceKey(this);
            this.CustomerLicenseCustomerIdKey = new CustomerLicenseCustomerIdKey(this);
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey = new LicenseTypeLicenseDeveloperLicenseTypeCodeKey(this);
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey = new LicenseTypeLicenseRuntimeLicenseTypeCodeKey(this);
            this.ProductLicenseProductIdKey = new ProductLicenseProductIdKey(this);
            this.ProvinceCustomerProvinceIdKey = new ProvinceCustomerProvinceIdKey(this);
            this.identifierField = Guid.NewGuid();
            this.transactionLog = new LinkedList<TransactionLogItem>();
            this.ReadStarting();
            List<object[]> transactionLog = this.persistentStore.Read();
            int mergedItems = 0;
            while (mergedItems < transactionLog.Count)
            {
                for (int index = 0; index < transactionLog.Count; index++)
                {
                    object[] transactionItem = transactionLog[index];
                    if (transactionItem != null)
                    {
                        if (this.transactionHandlers[(int)transactionItem[0]](transactionItem))
                        {
                            this.AddTransaction(transactionItem);
                            transactionLog[index] = null;
                            long rowVersion = (long)transactionItem[DataModel.rowVersionIndex[(int)transactionItem[0]]];
                            this.rowVersionField = rowVersion > this.rowVersionField ? rowVersion : this.rowVersionField;
                            mergedItems++;
                        }
                    }
                }
            }

            this.ReadCompleted();
        }

        /// <summary>
        /// Gets the Configuration table.
        /// </summary>
        public ConfigurationTable Configuration { get; private set; }

        /// <summary>
        /// Gets a unique index for the Configuration table.
        /// </summary>
        public ConfigurationKey ConfigurationKey { get; private set; }

        /// <summary>
        /// Gets the Country table.
        /// </summary>
        public CountryTable Country { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryCustomerCountryIdKey CountryCustomerCountryIdKey { get; private set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryExternalId0Key CountryExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryKey CountryKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryProvinceKey CountryProvinceKey { get; private set; }

        /// <summary>
        /// Gets the Customer table.
        /// </summary>
        public CustomerTable Customer { get; private set; }

        /// <summary>
        /// Gets a unique index for the Customer table.
        /// </summary>
        public CustomerExternalId0Key CustomerExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Customer table.
        /// </summary>
        public CustomerKey CustomerKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Customer table.
        /// </summary>
        public CustomerLicenseCustomerIdKey CustomerLicenseCustomerIdKey { get; private set; }

        /// <summary>
        /// Gets the License table.
        /// </summary>
        public LicenseTable License { get; private set; }

        /// <summary>
        /// Gets a unique index for the License table.
        /// </summary>
        public LicenseExternalId0Key LicenseExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the License table.
        /// </summary>
        public LicenseKey LicenseKey { get; private set; }

        /// <summary>
        /// Gets the LicenseType table.
        /// </summary>
        public LicenseTypeTable LicenseType { get; private set; }

        /// <summary>
        /// Gets a unique index for the LicenseType table.
        /// </summary>
        public LicenseTypeKey LicenseTypeKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent LicenseType table.
        /// </summary>
        public LicenseTypeLicenseDeveloperLicenseTypeCodeKey LicenseTypeLicenseDeveloperLicenseTypeCodeKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent LicenseType table.
        /// </summary>
        public LicenseTypeLicenseRuntimeLicenseTypeCodeKey LicenseTypeLicenseRuntimeLicenseTypeCodeKey { get; private set; }

        /// <summary>
        /// Gets the Product table.
        /// </summary>
        public ProductTable Product { get; private set; }

        /// <summary>
        /// Gets a unique index for the Product table.
        /// </summary>
        public ProductExternalId0Key ProductExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Product table.
        /// </summary>
        public ProductKey ProductKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Product table.
        /// </summary>
        public ProductLicenseProductIdKey ProductLicenseProductIdKey { get; private set; }

        /// <summary>
        /// Gets the Province table.
        /// </summary>
        public ProvinceTable Province { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Province table.
        /// </summary>
        public ProvinceCustomerProvinceIdKey ProvinceCustomerProvinceIdKey { get; private set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceExternalId0Key ProvinceExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceKey ProvinceKey { get; private set; }

        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        /// <returns>The created row.</returns>
        public ConfigurationRow CreateConfiguration(string configurationId, string source, string targetKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            if (targetKey == null)
            {
                throw new ArgumentNullException("targetKey");
            }

            this.ConfigurationKey.AddWriterLock();
            this.Configuration.AddWriterLock();
            ConfigurationData configurationData = new ConfigurationData();
            configurationData.ConfigurationId = configurationId;
            configurationData.RowVersion = this.IncrementRowVersion();
            configurationData.Source = source;
            configurationData.TargetKey = targetKey;
            ConfigurationRow configurationRow = new ConfigurationRow(this.Configuration, configurationData, true);
            configurationRow.AddWriterLock();
            configurationRow.Add();
            configurationRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(configurationRow.CommitAdd, configurationRow.RollbackAdd);
            this.persistentStore.CreateConfiguration(configurationData.ConfigurationId, configurationData.RowVersion, configurationData.Source, configurationData.TargetKey);
            return configurationRow;
        }

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <returns>The created row.</returns>
        public CountryRow CreateCountry(string abbreviation, Guid countryId, string externalId0, string name)
        {
            if (abbreviation == null)
            {
                throw new ArgumentNullException("abbreviation");
            }

            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            if (externalId0 != null)
            {
                this.CountryExternalId0Key.AddWriterLock();
            }

            this.CountryKey.AddWriterLock();
            this.Country.AddWriterLock();
            CountryData countryData = new CountryData();
            countryData.Abbreviation = abbreviation;
            countryData.CountryId = countryId;
            countryData.ExternalId0 = externalId0;
            countryData.Name = name;
            countryData.RowVersion = this.IncrementRowVersion();
            CountryRow countryRow = new CountryRow(this.Country, countryData, true);
            countryRow.AddWriterLock();
            countryRow.Add();
            countryRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(countryRow.CommitAdd, countryRow.RollbackAdd);
            this.persistentStore.CreateCountry(countryData.Abbreviation, countryData.CountryId, countryData.ExternalId0, countryData.Name, countryData.RowVersion);
            return countryRow;
        }

        /// <summary>
        /// Creates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <returns>The created row.</returns>
        public CustomerRow CreateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId)
        {
            if (address1 == null)
            {
                throw new ArgumentNullException("address1");
            }

            if (city == null)
            {
                throw new ArgumentNullException("city");
            }

            if (email == null)
            {
                throw new ArgumentNullException("email");
            }

            if (lastName == null)
            {
                throw new ArgumentNullException("lastName");
            }

            if (phone == null)
            {
                throw new ArgumentNullException("phone");
            }

            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode");
            }

            this.CountryKey.AddReaderLock();
            if (provinceId != null)
            {
                this.ProvinceKey.AddReaderLock();
            }

            if (externalId0 != null)
            {
                this.CustomerExternalId0Key.AddWriterLock();
            }

            this.CustomerKey.AddWriterLock();
            this.CountryKey.AddReaderLock();
            this.CountryCustomerCountryIdKey.AddWriterLock();
            if (!this.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryCustomerCountryIdKey");
            }

            if (provinceId.HasValue)
            {
                this.ProvinceKey.AddReaderLock();
                this.ProvinceCustomerProvinceIdKey.AddWriterLock();
                if (!this.ProvinceKey.ContainsKey(provinceId.Value))
                {
                    throw new ConstraintException("insert", "ProvinceCustomerProvinceIdKey");
                }
            }

            this.Customer.AddWriterLock();
            CustomerData customerData = new CustomerData();
            customerData.Address1 = address1;
            customerData.Address2 = address2;
            customerData.City = city;
            customerData.Company = company;
            customerData.CountryId = countryId;
            customerData.CustomerId = customerId;
            customerData.DateCreated = dateCreated;
            customerData.DateModified = dateModified;
            customerData.DateOfBirth = dateOfBirth;
            customerData.Email = email;
            customerData.ExternalId0 = externalId0;
            customerData.FirstName = firstName;
            customerData.LastName = lastName;
            customerData.MiddleName = middleName;
            customerData.Phone = phone;
            customerData.PostalCode = postalCode;
            customerData.ProvinceId = provinceId;
            customerData.RowVersion = this.IncrementRowVersion();
            CustomerRow customerRow = new CustomerRow(this.Customer, customerData, true);
            customerRow.AddWriterLock();
            customerRow.Add();
            customerRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(customerRow.CommitAdd, customerRow.RollbackAdd);
            this.persistentStore.CreateCustomer(customerData.Address1, customerData.Address2, customerData.City, customerData.Company, customerData.CountryId, customerData.CustomerId, customerData.DateCreated, customerData.DateModified, customerData.DateOfBirth, customerData.Email, customerData.ExternalId0, customerData.FirstName, customerData.LastName, customerData.MiddleName, customerData.Phone, customerData.PostalCode, customerData.ProvinceId, customerData.RowVersion);
            return customerRow;
        }

        /// <summary>
        /// Creates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        /// <returns>The created row.</returns>
        public LicenseRow CreateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid productId, LicenseTypeCode runtimeLicenseTypeCode)
        {
            this.CustomerKey.AddReaderLock();
            this.LicenseTypeKey.AddReaderLock();
            this.LicenseTypeKey.AddReaderLock();
            this.ProductKey.AddReaderLock();
            if (externalId0 != null)
            {
                this.LicenseExternalId0Key.AddWriterLock();
            }

            this.LicenseKey.AddWriterLock();
            this.CustomerKey.AddReaderLock();
            this.CustomerLicenseCustomerIdKey.AddWriterLock();
            if (!this.CustomerKey.ContainsKey(customerId))
            {
                throw new ConstraintException("insert", "CustomerLicenseCustomerIdKey");
            }

            this.LicenseTypeKey.AddReaderLock();
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddWriterLock();
            if (!this.LicenseTypeKey.ContainsKey(developerLicenseTypeCode))
            {
                throw new ConstraintException("insert", "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
            }

            this.LicenseTypeKey.AddReaderLock();
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddWriterLock();
            if (!this.LicenseTypeKey.ContainsKey(runtimeLicenseTypeCode))
            {
                throw new ConstraintException("insert", "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
            }

            this.ProductKey.AddReaderLock();
            this.ProductLicenseProductIdKey.AddWriterLock();
            if (!this.ProductKey.ContainsKey(productId))
            {
                throw new ConstraintException("insert", "ProductLicenseProductIdKey");
            }

            this.License.AddWriterLock();
            LicenseData licenseData = new LicenseData();
            licenseData.CustomerId = customerId;
            licenseData.DateCreated = dateCreated;
            licenseData.DateModified = dateModified;
            licenseData.DeveloperLicenseTypeCode = developerLicenseTypeCode;
            licenseData.ExternalId0 = externalId0;
            licenseData.LicenseId = licenseId;
            licenseData.ProductId = productId;
            licenseData.RowVersion = this.IncrementRowVersion();
            licenseData.RuntimeLicenseTypeCode = runtimeLicenseTypeCode;
            LicenseRow licenseRow = new LicenseRow(this.License, licenseData, true);
            licenseRow.AddWriterLock();
            licenseRow.Add();
            licenseRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(licenseRow.CommitAdd, licenseRow.RollbackAdd);
            this.persistentStore.CreateLicense(licenseData.CustomerId, licenseData.DateCreated, licenseData.DateModified, licenseData.DeveloperLicenseTypeCode, licenseData.ExternalId0, licenseData.LicenseId, licenseData.ProductId, licenseData.RowVersion, licenseData.RuntimeLicenseTypeCode);
            return licenseRow;
        }

        /// <summary>
        /// Creates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        /// <returns>The created row.</returns>
        public LicenseTypeRow CreateLicenseType(string description, LicenseTypeCode licenseTypeCode)
        {
            if (description == null)
            {
                throw new ArgumentNullException("description");
            }

            this.LicenseTypeKey.AddWriterLock();
            this.LicenseType.AddWriterLock();
            LicenseTypeData licenseTypeData = new LicenseTypeData();
            licenseTypeData.Description = description;
            licenseTypeData.LicenseTypeCode = licenseTypeCode;
            licenseTypeData.RowVersion = this.IncrementRowVersion();
            LicenseTypeRow licenseTypeRow = new LicenseTypeRow(this.LicenseType, licenseTypeData, true);
            licenseTypeRow.AddWriterLock();
            licenseTypeRow.Add();
            licenseTypeRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(licenseTypeRow.CommitAdd, licenseTypeRow.RollbackAdd);
            this.persistentStore.CreateLicenseType(licenseTypeData.Description, licenseTypeData.LicenseTypeCode, licenseTypeData.RowVersion);
            return licenseTypeRow;
        }

        /// <summary>
        /// Generates a report of the locks currently held by the data model.
        /// </summary>
        /// <returns>True if there are no locks held, false otherwise.</returns>
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = "Generated by a tool.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = "Generated by a tool.")]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        public bool CreateLockReport()
        {
            bool hasWarnings = false;
            using (CommittableTransaction committableTransaction = new CommittableTransaction())
            {
                try
                {
                    System.Transactions.Transaction.Current = committableTransaction;
                    if (this.Configuration.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Configuration table still has a reader lock.");
                    }

                    if (this.Configuration.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Configuration table still has a writer lock.");
                    }

                    if (this.ConfigurationKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ConfigurationKey index still has a reader lock.");
                    }

                    if (this.ConfigurationKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ConfigurationKey index still has a writer lock.");
                    }

                    try
                    {
                        this.Configuration.AcquireReaderLock();
                        foreach (ConfigurationRow configurationRow in this.Configuration)
                        {
                            if (configurationRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Configuration row still has a reader lock.");
                            }

                            if (configurationRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Configuration row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.Configuration.ReleaseReaderLock();
                    }

                    if (this.Country.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Country table still has a reader lock.");
                    }

                    if (this.Country.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Country table still has a writer lock.");
                    }

                    if (this.CountryExternalId0Key.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CountryExternalId0Key index still has a reader lock.");
                    }

                    if (this.CountryExternalId0Key.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CountryExternalId0Key index still has a writer lock.");
                    }

                    if (this.CountryKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CountryKey index still has a reader lock.");
                    }

                    if (this.CountryKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CountryKey index still has a writer lock.");
                    }

                    try
                    {
                        this.Country.AcquireReaderLock();
                        foreach (CountryRow countryRow in this.Country)
                        {
                            if (countryRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Country row still has a reader lock.");
                            }

                            if (countryRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Country row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.Country.ReleaseReaderLock();
                    }

                    if (this.Customer.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Customer table still has a reader lock.");
                    }

                    if (this.Customer.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Customer table still has a writer lock.");
                    }

                    if (this.CustomerExternalId0Key.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CustomerExternalId0Key index still has a reader lock.");
                    }

                    if (this.CustomerExternalId0Key.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CustomerExternalId0Key index still has a writer lock.");
                    }

                    if (this.CustomerKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CustomerKey index still has a reader lock.");
                    }

                    if (this.CustomerKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("CustomerKey index still has a writer lock.");
                    }

                    try
                    {
                        this.Customer.AcquireReaderLock();
                        foreach (CustomerRow customerRow in this.Customer)
                        {
                            if (customerRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Customer row still has a reader lock.");
                            }

                            if (customerRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Customer row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.Customer.ReleaseReaderLock();
                    }

                    if (this.License.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("License table still has a reader lock.");
                    }

                    if (this.License.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("License table still has a writer lock.");
                    }

                    if (this.LicenseExternalId0Key.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseExternalId0Key index still has a reader lock.");
                    }

                    if (this.LicenseExternalId0Key.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseExternalId0Key index still has a writer lock.");
                    }

                    if (this.LicenseKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseKey index still has a reader lock.");
                    }

                    if (this.LicenseKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseKey index still has a writer lock.");
                    }

                    try
                    {
                        this.License.AcquireReaderLock();
                        foreach (LicenseRow licenseRow in this.License)
                        {
                            if (licenseRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("License row still has a reader lock.");
                            }

                            if (licenseRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("License row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.License.ReleaseReaderLock();
                    }

                    if (this.LicenseType.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseType table still has a reader lock.");
                    }

                    if (this.LicenseType.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseType table still has a writer lock.");
                    }

                    if (this.LicenseTypeKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseTypeKey index still has a reader lock.");
                    }

                    if (this.LicenseTypeKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("LicenseTypeKey index still has a writer lock.");
                    }

                    try
                    {
                        this.LicenseType.AcquireReaderLock();
                        foreach (LicenseTypeRow licenseTypeRow in this.LicenseType)
                        {
                            if (licenseTypeRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("LicenseType row still has a reader lock.");
                            }

                            if (licenseTypeRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("LicenseType row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.LicenseType.ReleaseReaderLock();
                    }

                    if (this.Product.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Product table still has a reader lock.");
                    }

                    if (this.Product.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Product table still has a writer lock.");
                    }

                    if (this.ProductExternalId0Key.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProductExternalId0Key index still has a reader lock.");
                    }

                    if (this.ProductExternalId0Key.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProductExternalId0Key index still has a writer lock.");
                    }

                    if (this.ProductKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProductKey index still has a reader lock.");
                    }

                    if (this.ProductKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProductKey index still has a writer lock.");
                    }

                    try
                    {
                        this.Product.AcquireReaderLock();
                        foreach (ProductRow productRow in this.Product)
                        {
                            if (productRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Product row still has a reader lock.");
                            }

                            if (productRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Product row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.Product.ReleaseReaderLock();
                    }

                    if (this.Province.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Province table still has a reader lock.");
                    }

                    if (this.Province.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("Province table still has a writer lock.");
                    }

                    if (this.ProvinceExternalId0Key.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProvinceExternalId0Key index still has a reader lock.");
                    }

                    if (this.ProvinceExternalId0Key.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProvinceExternalId0Key index still has a writer lock.");
                    }

                    if (this.ProvinceKey.Readers.Count != 0)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProvinceKey index still has a reader lock.");
                    }

                    if (this.ProvinceKey.Writer != null)
                    {
                        hasWarnings = true;
                        Trace.TraceWarning("ProvinceKey index still has a writer lock.");
                    }

                    try
                    {
                        this.Province.AcquireReaderLock();
                        foreach (ProvinceRow provinceRow in this.Province)
                        {
                            if (provinceRow.Readers.Count != 0)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Province row still has a reader lock.");
                            }

                            if (provinceRow.Writer != null)
                            {
                                hasWarnings = true;
                                Trace.TraceWarning("Province row still has a writer lock.");
                            }
                        }
                    }
                    finally
                    {
                        this.Province.ReleaseReaderLock();
                    }

                    committableTransaction.Commit();
                }
                finally
                {
                    System.Transactions.Transaction.Current = null;
                }
            }

            return hasWarnings;
        }

        /// <summary>
        /// Creates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <returns>The created row.</returns>
        public ProductRow CreateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId)
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            if (externalId0 != null)
            {
                this.ProductExternalId0Key.AddWriterLock();
            }

            this.ProductKey.AddWriterLock();
            this.Product.AddWriterLock();
            ProductData productData = new ProductData();
            productData.DateCreated = dateCreated;
            productData.DateModified = dateModified;
            productData.Description = description;
            productData.ExternalId0 = externalId0;
            productData.Name = name;
            productData.ProductId = productId;
            productData.RowVersion = this.IncrementRowVersion();
            ProductRow productRow = new ProductRow(this.Product, productData, true);
            productRow.AddWriterLock();
            productRow.Add();
            productRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(productRow.CommitAdd, productRow.RollbackAdd);
            this.persistentStore.CreateProduct(productData.DateCreated, productData.DateModified, productData.Description, productData.ExternalId0, productData.Name, productData.ProductId, productData.RowVersion);
            return productRow;
        }

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        /// <returns>The created row.</returns>
        public ProvinceRow CreateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId)
        {
            if (abbreviation == null)
            {
                throw new ArgumentNullException("abbreviation");
            }

            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            this.CountryKey.AddReaderLock();
            if (externalId0 != null)
            {
                this.ProvinceExternalId0Key.AddWriterLock();
            }

            this.ProvinceKey.AddWriterLock();
            this.CountryKey.AddReaderLock();
            this.CountryProvinceKey.AddWriterLock();
            if (!this.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryProvinceKey");
            }

            this.Province.AddWriterLock();
            ProvinceData provinceData = new ProvinceData();
            provinceData.Abbreviation = abbreviation;
            provinceData.CountryId = countryId;
            provinceData.ExternalId0 = externalId0;
            provinceData.Name = name;
            provinceData.ProvinceId = provinceId;
            provinceData.RowVersion = this.IncrementRowVersion();
            ProvinceRow provinceRow = new ProvinceRow(this.Province, provinceData, true);
            provinceRow.AddWriterLock();
            provinceRow.Add();
            provinceRow.RowState = RowState.Added;
            VolatileTransaction.Current.AddActions(provinceRow.CommitAdd, provinceRow.RollbackAdd);
            this.persistentStore.CreateProvince(provinceData.Abbreviation, provinceData.CountryId, provinceData.ExternalId0, provinceData.Name, provinceData.ProvinceId, provinceData.RowVersion);
            return provinceRow;
        }

        /// <summary>
        /// Deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="source">The Source key element.</param>
        public void DeleteConfiguration(string configurationId, long rowVersion, string source)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            ConfigurationRow configurationRow;
            try
            {
                this.ConfigurationKey.AcquireReaderLock();
                configurationRow = this.ConfigurationKey.Find(configurationId, source);
                if (configurationRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.ConfigurationKey.ReleaseReaderLock();
            }

            configurationRow.AddWriterLock();
            if (configurationRow.RowState == RowState.Detached)
            {
                return;
            }

            if (configurationRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Configuration", new object[] { configurationId, source });
            }

            this.Configuration.AddWriterLock();
            this.ConfigurationKey.AddWriterLock();
            configurationRow.Delete();
            VolatileTransaction.Current.AddActions(configurationRow.CommitDelete, configurationRow.RollbackDelete);
            this.persistentStore.DeleteConfiguration(configurationId, source);
        }

        /// <summary>
        /// Deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        public void DeleteCountry(Guid countryId, long rowVersion)
        {
            CountryRow countryRow;
            try
            {
                this.CountryKey.AcquireReaderLock();
                countryRow = this.CountryKey.Find(countryId);
                if (countryRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.CountryKey.ReleaseReaderLock();
            }

            countryRow.AddWriterLock();
            if (countryRow.RowState == RowState.Detached)
            {
                return;
            }

            if (countryRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Country", new object[] { countryId });
            }

            try
            {
                this.CountryCustomerCountryIdKey.AcquireReaderLock();
                if (this.CountryCustomerCountryIdKey.ContainsKey(countryRow.CountryId))
                {
                    throw new ConstraintException("delete", "CountryCustomerCountryIdKey");
                }
            }
            finally
            {
                this.CountryCustomerCountryIdKey.ReleaseReaderLock();
            }

            try
            {
                this.CountryProvinceKey.AcquireReaderLock();
                if (this.CountryProvinceKey.ContainsKey(countryRow.CountryId))
                {
                    throw new ConstraintException("delete", "CountryProvinceKey");
                }
            }
            finally
            {
                this.CountryProvinceKey.ReleaseReaderLock();
            }

            this.Country.AddWriterLock();
            if (countryRow.ExternalId0 != null)
            {
                this.CountryExternalId0Key.AddWriterLock();
            }

            this.CountryKey.AddWriterLock();
            countryRow.Delete();
            VolatileTransaction.Current.AddActions(countryRow.CommitDelete, countryRow.RollbackDelete);
            this.persistentStore.DeleteCountry(countryId);
        }

        /// <summary>
        /// Deletes a Customer record.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        public void DeleteCustomer(Guid customerId, long rowVersion)
        {
            CustomerRow customerRow;
            try
            {
                this.CustomerKey.AcquireReaderLock();
                customerRow = this.CustomerKey.Find(customerId);
                if (customerRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.CustomerKey.ReleaseReaderLock();
            }

            customerRow.AddWriterLock();
            if (customerRow.RowState == RowState.Detached)
            {
                return;
            }

            if (customerRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Customer", new object[] { customerId });
            }

            try
            {
                this.CustomerLicenseCustomerIdKey.AcquireReaderLock();
                if (this.CustomerLicenseCustomerIdKey.ContainsKey(customerRow.CustomerId))
                {
                    throw new ConstraintException("delete", "CustomerLicenseCustomerIdKey");
                }
            }
            finally
            {
                this.CustomerLicenseCustomerIdKey.ReleaseReaderLock();
            }

            this.Customer.AddWriterLock();
            if (customerRow.ExternalId0 != null)
            {
                this.CustomerExternalId0Key.AddWriterLock();
            }

            this.CustomerKey.AddWriterLock();
            this.CountryCustomerCountryIdKey.AddWriterLock();
            if (customerRow.ProvinceId != null)
            {
                this.ProvinceCustomerProvinceIdKey.AddWriterLock();
            }

            customerRow.Delete();
            VolatileTransaction.Current.AddActions(customerRow.CommitDelete, customerRow.RollbackDelete);
            this.persistentStore.DeleteCustomer(customerId);
        }

        /// <summary>
        /// Deletes a License record.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public void DeleteLicense(Guid licenseId, long rowVersion)
        {
            LicenseRow licenseRow;
            try
            {
                this.LicenseKey.AcquireReaderLock();
                licenseRow = this.LicenseKey.Find(licenseId);
                if (licenseRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.LicenseKey.ReleaseReaderLock();
            }

            licenseRow.AddWriterLock();
            if (licenseRow.RowState == RowState.Detached)
            {
                return;
            }

            if (licenseRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("License", new object[] { licenseId });
            }

            this.License.AddWriterLock();
            if (licenseRow.ExternalId0 != null)
            {
                this.LicenseExternalId0Key.AddWriterLock();
            }

            this.LicenseKey.AddWriterLock();
            this.CustomerLicenseCustomerIdKey.AddWriterLock();
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddWriterLock();
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddWriterLock();
            this.ProductLicenseProductIdKey.AddWriterLock();
            licenseRow.Delete();
            VolatileTransaction.Current.AddActions(licenseRow.CommitDelete, licenseRow.RollbackDelete);
            this.persistentStore.DeleteLicense(licenseId);
        }

        /// <summary>
        /// Deletes a LicenseType record.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        public void DeleteLicenseType(LicenseTypeCode licenseTypeCode, long rowVersion)
        {
            LicenseTypeRow licenseTypeRow;
            try
            {
                this.LicenseTypeKey.AcquireReaderLock();
                licenseTypeRow = this.LicenseTypeKey.Find(licenseTypeCode);
                if (licenseTypeRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.LicenseTypeKey.ReleaseReaderLock();
            }

            licenseTypeRow.AddWriterLock();
            if (licenseTypeRow.RowState == RowState.Detached)
            {
                return;
            }

            if (licenseTypeRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("LicenseType", new object[] { licenseTypeCode });
            }

            try
            {
                this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AcquireReaderLock();
                if (this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.ContainsKey(licenseTypeRow.LicenseTypeCode))
                {
                    throw new ConstraintException("delete", "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
                }
            }
            finally
            {
                this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.ReleaseReaderLock();
            }

            try
            {
                this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AcquireReaderLock();
                if (this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.ContainsKey(licenseTypeRow.LicenseTypeCode))
                {
                    throw new ConstraintException("delete", "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
                }
            }
            finally
            {
                this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.ReleaseReaderLock();
            }

            this.LicenseType.AddWriterLock();
            this.LicenseTypeKey.AddWriterLock();
            licenseTypeRow.Delete();
            VolatileTransaction.Current.AddActions(licenseTypeRow.CommitDelete, licenseTypeRow.RollbackDelete);
            this.persistentStore.DeleteLicenseType(licenseTypeCode);
        }

        /// <summary>
        /// Deletes a Product record.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        public void DeleteProduct(Guid productId, long rowVersion)
        {
            ProductRow productRow;
            try
            {
                this.ProductKey.AcquireReaderLock();
                productRow = this.ProductKey.Find(productId);
                if (productRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.ProductKey.ReleaseReaderLock();
            }

            productRow.AddWriterLock();
            if (productRow.RowState == RowState.Detached)
            {
                return;
            }

            if (productRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Product", new object[] { productId });
            }

            try
            {
                this.ProductLicenseProductIdKey.AcquireReaderLock();
                if (this.ProductLicenseProductIdKey.ContainsKey(productRow.ProductId))
                {
                    throw new ConstraintException("delete", "ProductLicenseProductIdKey");
                }
            }
            finally
            {
                this.ProductLicenseProductIdKey.ReleaseReaderLock();
            }

            this.Product.AddWriterLock();
            if (productRow.ExternalId0 != null)
            {
                this.ProductExternalId0Key.AddWriterLock();
            }

            this.ProductKey.AddWriterLock();
            productRow.Delete();
            VolatileTransaction.Current.AddActions(productRow.CommitDelete, productRow.RollbackDelete);
            this.persistentStore.DeleteProduct(productId);
        }

        /// <summary>
        /// Deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        public void DeleteProvince(Guid provinceId, long rowVersion)
        {
            ProvinceRow provinceRow;
            try
            {
                this.ProvinceKey.AcquireReaderLock();
                provinceRow = this.ProvinceKey.Find(provinceId);
                if (provinceRow == null)
                {
                    return;
                }
            }
            finally
            {
                this.ProvinceKey.ReleaseReaderLock();
            }

            provinceRow.AddWriterLock();
            if (provinceRow.RowState == RowState.Detached)
            {
                return;
            }

            if (provinceRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Province", new object[] { provinceId });
            }

            try
            {
                this.ProvinceCustomerProvinceIdKey.AcquireReaderLock();
                if (this.ProvinceCustomerProvinceIdKey.ContainsKey(provinceRow.ProvinceId))
                {
                    throw new ConstraintException("delete", "ProvinceCustomerProvinceIdKey");
                }
            }
            finally
            {
                this.ProvinceCustomerProvinceIdKey.ReleaseReaderLock();
            }

            this.Province.AddWriterLock();
            if (provinceRow.ExternalId0 != null)
            {
                this.ProvinceExternalId0Key.AddWriterLock();
            }

            this.ProvinceKey.AddWriterLock();
            this.CountryProvinceKey.AddWriterLock();
            provinceRow.Delete();
            VolatileTransaction.Current.AddActions(provinceRow.CommitDelete, provinceRow.RollbackDelete);
            this.persistentStore.DeleteProvince(provinceId);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Provides a default handler for to get a Reader Context.
        /// </summary>
        /// <returns>The current data model row version.</returns>
        public long IncrementRowVersion()
        {
            return Interlocked.Increment(ref this.rowVersionField);
        }

        /// <summary>
        /// Collects the set of modified records that will reconcile the client data model to the master data model.
        /// </summary>
        /// <param name="identifier">A unique identifier of an instance of the data.</param>
        /// <param name="sequence">The sequence of the client data model.</param>
        /// <returns>An array of records that will reconcile the client data model to the server.</returns>
        public DataHeader Read(Guid identifier, long sequence)
        {
            try
            {
                this.AcquireReaderLock();
                DataHeader dataHeader = default(DataHeader);
                dataHeader.Identifier = this.identifierField;
                dataHeader.Sequence = (long)this.transactionLog.Last.Value.Sequence;
                if (identifier != this.identifierField)
                {
                    sequence = -1;
                }

                List<object[]> data = new List<object[]>();
                LinkedListNode<TransactionLogItem> transactionNode = this.transactionLog.Last;
                while (transactionNode != null && transactionNode.Value.Sequence > sequence)
                {
                    object[] transactionItem = (object[])transactionNode.Value.Data;
                    data.Add(transactionItem);
                    transactionNode = transactionNode.Previous;
                }

                dataHeader.Data = data;
                return dataHeader;
            }
            finally
            {
                this.ReleaseReaderLock();
            }
        }

        /// <summary>
        /// Updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        public void UpdateConfiguration(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey)
        {
            if (configurationIdKey == null)
            {
                throw new ArgumentNullException("configurationIdKey");
            }

            if (sourceKey == null)
            {
                throw new ArgumentNullException("sourceKey");
            }

            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            if (targetKey == null)
            {
                throw new ArgumentNullException("targetKey");
            }

            ConfigurationRow configurationRow;
            try
            {
                this.ConfigurationKey.AcquireReaderLock();
                configurationRow = this.ConfigurationKey.Find(configurationIdKey, sourceKey);
                if (configurationRow == null)
                {
                    throw new RecordNotFoundException("ConfigurationKey", new object[] { configurationIdKey, sourceKey });
                }
            }
            finally
            {
                this.ConfigurationKey.ReleaseReaderLock();
            }

            configurationRow.AddWriterLock();
            if (configurationRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("ConfigurationKey", new object[] { configurationIdKey, sourceKey });
            }

            if (configurationRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Configuration", new object[] { configurationId, source });
            }

            if (configurationRow.ConfigurationId != configurationId || configurationRow.Source != source)
            {
                this.Configuration.AddWriterLock();
                this.ConfigurationKey.AddWriterLock();
            }

            configurationRow.BeginUpdate();
            configurationRow.ConfigurationId = configurationId;
            configurationRow.RowVersion = this.IncrementRowVersion();
            configurationRow.Source = source;
            configurationRow.TargetKey = targetKey;
            configurationRow.EndUpdate();
            VolatileTransaction.Current.AddActions(configurationRow.CommitUpdate, configurationRow.RollbackUpdate);
            this.persistentStore.UpdateConfiguration(configurationRow.ConfigurationId, configurationIdKey, configurationRow.RowVersion, configurationRow.Source, sourceKey, configurationRow.TargetKey);
        }

        /// <summary>
        /// Updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        public void UpdateCountry(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion)
        {
            if (abbreviation == null)
            {
                throw new ArgumentNullException("abbreviation");
            }

            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            CountryRow countryRow;
            try
            {
                this.CountryKey.AcquireReaderLock();
                countryRow = this.CountryKey.Find(countryIdKey);
                if (countryRow == null)
                {
                    throw new RecordNotFoundException("CountryKey", new object[] { countryIdKey });
                }
            }
            finally
            {
                this.CountryKey.ReleaseReaderLock();
            }

            countryRow.AddWriterLock();
            if (countryRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("CountryKey", new object[] { countryIdKey });
            }

            if (countryRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Country", new object[] { countryId });
            }

            if (countryRow.CountryId != countryId)
            {
                try
                {
                    this.CountryCustomerCountryIdKey.AcquireReaderLock();
                    if (this.CountryCustomerCountryIdKey.ContainsKey(countryRow.CountryId))
                    {
                        throw new ConstraintException("update", "CountryCustomerCountryIdKey");
                    }
                }
                finally
                {
                    this.CountryCustomerCountryIdKey.ReleaseReaderLock();
                }
            }

            if (countryRow.CountryId != countryId)
            {
                try
                {
                    this.CountryProvinceKey.AcquireReaderLock();
                    if (this.CountryProvinceKey.ContainsKey(countryRow.CountryId))
                    {
                        throw new ConstraintException("update", "CountryProvinceKey");
                    }
                }
                finally
                {
                    this.CountryProvinceKey.ReleaseReaderLock();
                }
            }

            if (countryRow.ExternalId0 != externalId0)
            {
                this.CountryExternalId0Key.AddWriterLock();
            }

            if (countryRow.CountryId != countryId)
            {
                this.Country.AddWriterLock();
                this.CountryKey.AddWriterLock();
            }

            countryRow.BeginUpdate();
            countryRow.Abbreviation = abbreviation;
            countryRow.CountryId = countryId;
            countryRow.ExternalId0 = externalId0;
            countryRow.Name = name;
            countryRow.RowVersion = this.IncrementRowVersion();
            countryRow.EndUpdate();
            VolatileTransaction.Current.AddActions(countryRow.CommitUpdate, countryRow.RollbackUpdate);
            this.persistentStore.UpdateCountry(countryRow.Abbreviation, countryRow.CountryId, countryIdKey, countryRow.ExternalId0, countryRow.Name, countryRow.RowVersion);
        }

        /// <summary>
        /// Updates a Customer record.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="company">The required value for the company column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="customerIdKey">The CustomerId key element.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="firstName">The required value for the firstName column.</param>
        /// <param name="lastName">The optional value for the lastName column.</param>
        /// <param name="middleName">The required value for the middleName column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="provinceId">The required value for the provinceId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        public void UpdateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, Guid customerIdKey, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion)
        {
            if (address1 == null)
            {
                throw new ArgumentNullException("address1");
            }

            if (city == null)
            {
                throw new ArgumentNullException("city");
            }

            if (email == null)
            {
                throw new ArgumentNullException("email");
            }

            if (lastName == null)
            {
                throw new ArgumentNullException("lastName");
            }

            if (phone == null)
            {
                throw new ArgumentNullException("phone");
            }

            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode");
            }

            CustomerRow customerRow;
            try
            {
                this.CustomerKey.AcquireReaderLock();
                customerRow = this.CustomerKey.Find(customerIdKey);
                if (customerRow == null)
                {
                    throw new RecordNotFoundException("CustomerKey", new object[] { customerIdKey });
                }
            }
            finally
            {
                this.CustomerKey.ReleaseReaderLock();
            }

            customerRow.AddWriterLock();
            if (customerRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("CustomerKey", new object[] { customerIdKey });
            }

            if (customerRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Customer", new object[] { customerId });
            }

            if (customerRow.CustomerId != customerId)
            {
                try
                {
                    this.CustomerLicenseCustomerIdKey.AcquireReaderLock();
                    if (this.CustomerLicenseCustomerIdKey.ContainsKey(customerRow.CustomerId))
                    {
                        throw new ConstraintException("update", "CustomerLicenseCustomerIdKey");
                    }
                }
                finally
                {
                    this.CustomerLicenseCustomerIdKey.ReleaseReaderLock();
                }
            }

            if (customerRow.ExternalId0 != externalId0)
            {
                this.CustomerExternalId0Key.AddWriterLock();
            }

            if (customerRow.CustomerId != customerId)
            {
                this.Customer.AddWriterLock();
                this.CustomerKey.AddWriterLock();
            }

            if (customerRow.CountryId != countryId)
            {
                this.CountryKey.AddReaderLock();
                this.CountryCustomerCountryIdKey.AddWriterLock();
                if (!this.CountryKey.ContainsKey(countryId))
                {
                    throw new ConstraintException("update", "CountryCustomerCountryIdKey");
                }
            }

            if (customerRow.ProvinceId != provinceId)
            {
                this.ProvinceKey.AddReaderLock();
                this.ProvinceCustomerProvinceIdKey.AddWriterLock();
                if (provinceId.HasValue)
                {
                    if (!this.ProvinceKey.ContainsKey(provinceId.Value))
                    {
                        throw new ConstraintException("update", "ProvinceCustomerProvinceIdKey");
                    }
                }
            }

            customerRow.BeginUpdate();
            customerRow.Address1 = address1;
            customerRow.Address2 = address2;
            customerRow.City = city;
            customerRow.Company = company;
            customerRow.CountryId = countryId;
            customerRow.CustomerId = customerId;
            customerRow.DateCreated = dateCreated;
            customerRow.DateModified = dateModified;
            customerRow.DateOfBirth = dateOfBirth;
            customerRow.Email = email;
            customerRow.ExternalId0 = externalId0;
            customerRow.FirstName = firstName;
            customerRow.LastName = lastName;
            customerRow.MiddleName = middleName;
            customerRow.Phone = phone;
            customerRow.PostalCode = postalCode;
            customerRow.ProvinceId = provinceId;
            customerRow.RowVersion = this.IncrementRowVersion();
            customerRow.EndUpdate();
            VolatileTransaction.Current.AddActions(customerRow.CommitUpdate, customerRow.RollbackUpdate);
            this.persistentStore.UpdateCustomer(customerRow.Address1, customerRow.Address2, customerRow.City, customerRow.Company, customerRow.CountryId, customerRow.CustomerId, customerIdKey, customerRow.DateCreated, customerRow.DateModified, customerRow.DateOfBirth, customerRow.Email, customerRow.ExternalId0, customerRow.FirstName, customerRow.LastName, customerRow.MiddleName, customerRow.Phone, customerRow.PostalCode, customerRow.ProvinceId, customerRow.RowVersion);
        }

        /// <summary>
        /// Updates a License record.
        /// </summary>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="developerLicenseTypeCode">The optional value for the developerLicenseTypeCode column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="licenseId">The optional value for the licenseId column.</param>
        /// <param name="licenseIdKey">The LicenseId key element.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The optional value for the runtimeLicenseTypeCode column.</param>
        public void UpdateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid licenseIdKey, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode)
        {
            LicenseRow licenseRow;
            try
            {
                this.LicenseKey.AcquireReaderLock();
                licenseRow = this.LicenseKey.Find(licenseIdKey);
                if (licenseRow == null)
                {
                    throw new RecordNotFoundException("LicenseKey", new object[] { licenseIdKey });
                }
            }
            finally
            {
                this.LicenseKey.ReleaseReaderLock();
            }

            licenseRow.AddWriterLock();
            if (licenseRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("LicenseKey", new object[] { licenseIdKey });
            }

            if (licenseRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("License", new object[] { licenseId });
            }

            if (licenseRow.ExternalId0 != externalId0)
            {
                this.LicenseExternalId0Key.AddWriterLock();
            }

            if (licenseRow.LicenseId != licenseId)
            {
                this.License.AddWriterLock();
                this.LicenseKey.AddWriterLock();
            }

            if (licenseRow.CustomerId != customerId)
            {
                this.CustomerKey.AddReaderLock();
                this.CustomerLicenseCustomerIdKey.AddWriterLock();
                if (!this.CustomerKey.ContainsKey(customerId))
                {
                    throw new ConstraintException("update", "CustomerLicenseCustomerIdKey");
                }
            }

            if (licenseRow.DeveloperLicenseTypeCode != developerLicenseTypeCode)
            {
                this.LicenseTypeKey.AddReaderLock();
                this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddWriterLock();
                if (!this.LicenseTypeKey.ContainsKey(developerLicenseTypeCode))
                {
                    throw new ConstraintException("update", "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
                }
            }

            if (licenseRow.RuntimeLicenseTypeCode != runtimeLicenseTypeCode)
            {
                this.LicenseTypeKey.AddReaderLock();
                this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddWriterLock();
                if (!this.LicenseTypeKey.ContainsKey(runtimeLicenseTypeCode))
                {
                    throw new ConstraintException("update", "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
                }
            }

            if (licenseRow.ProductId != productId)
            {
                this.ProductKey.AddReaderLock();
                this.ProductLicenseProductIdKey.AddWriterLock();
                if (!this.ProductKey.ContainsKey(productId))
                {
                    throw new ConstraintException("update", "ProductLicenseProductIdKey");
                }
            }

            licenseRow.BeginUpdate();
            licenseRow.CustomerId = customerId;
            licenseRow.DateCreated = dateCreated;
            licenseRow.DateModified = dateModified;
            licenseRow.DeveloperLicenseTypeCode = developerLicenseTypeCode;
            licenseRow.ExternalId0 = externalId0;
            licenseRow.LicenseId = licenseId;
            licenseRow.ProductId = productId;
            licenseRow.RowVersion = this.IncrementRowVersion();
            licenseRow.RuntimeLicenseTypeCode = runtimeLicenseTypeCode;
            licenseRow.EndUpdate();
            VolatileTransaction.Current.AddActions(licenseRow.CommitUpdate, licenseRow.RollbackUpdate);
            this.persistentStore.UpdateLicense(licenseRow.CustomerId, licenseRow.DateCreated, licenseRow.DateModified, licenseRow.DeveloperLicenseTypeCode, licenseRow.ExternalId0, licenseRow.LicenseId, licenseIdKey, licenseRow.ProductId, licenseRow.RowVersion, licenseRow.RuntimeLicenseTypeCode);
        }

        /// <summary>
        /// Updates a LicenseType record.
        /// </summary>
        /// <param name="description">The optional value for the description column.</param>
        /// <param name="licenseTypeCode">The optional value for the licenseTypeCode column.</param>
        /// <param name="licenseTypeCodeKey">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        public void UpdateLicenseType(string description, LicenseTypeCode licenseTypeCode, LicenseTypeCode licenseTypeCodeKey, long rowVersion)
        {
            if (description == null)
            {
                throw new ArgumentNullException("description");
            }

            LicenseTypeRow licenseTypeRow;
            try
            {
                this.LicenseTypeKey.AcquireReaderLock();
                licenseTypeRow = this.LicenseTypeKey.Find(licenseTypeCodeKey);
                if (licenseTypeRow == null)
                {
                    throw new RecordNotFoundException("LicenseTypeKey", new object[] { licenseTypeCodeKey });
                }
            }
            finally
            {
                this.LicenseTypeKey.ReleaseReaderLock();
            }

            licenseTypeRow.AddWriterLock();
            if (licenseTypeRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("LicenseTypeKey", new object[] { licenseTypeCodeKey });
            }

            if (licenseTypeRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("LicenseType", new object[] { licenseTypeCode });
            }

            if (licenseTypeRow.LicenseTypeCode != licenseTypeCode)
            {
                try
                {
                    this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AcquireReaderLock();
                    if (this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.ContainsKey(licenseTypeRow.LicenseTypeCode))
                    {
                        throw new ConstraintException("update", "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
                    }
                }
                finally
                {
                    this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.ReleaseReaderLock();
                }
            }

            if (licenseTypeRow.LicenseTypeCode != licenseTypeCode)
            {
                try
                {
                    this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AcquireReaderLock();
                    if (this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.ContainsKey(licenseTypeRow.LicenseTypeCode))
                    {
                        throw new ConstraintException("update", "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
                    }
                }
                finally
                {
                    this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.ReleaseReaderLock();
                }
            }

            if (licenseTypeRow.LicenseTypeCode != licenseTypeCode)
            {
                this.LicenseType.AddWriterLock();
                this.LicenseTypeKey.AddWriterLock();
            }

            licenseTypeRow.BeginUpdate();
            licenseTypeRow.Description = description;
            licenseTypeRow.LicenseTypeCode = licenseTypeCode;
            licenseTypeRow.RowVersion = this.IncrementRowVersion();
            licenseTypeRow.EndUpdate();
            VolatileTransaction.Current.AddActions(licenseTypeRow.CommitUpdate, licenseTypeRow.RollbackUpdate);
            this.persistentStore.UpdateLicenseType(licenseTypeRow.Description, licenseTypeRow.LicenseTypeCode, licenseTypeCodeKey, licenseTypeRow.RowVersion);
        }

        /// <summary>
        /// Updates a Product record.
        /// </summary>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="productIdKey">The ProductId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        public void UpdateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, Guid productIdKey, long rowVersion)
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            ProductRow productRow;
            try
            {
                this.ProductKey.AcquireReaderLock();
                productRow = this.ProductKey.Find(productIdKey);
                if (productRow == null)
                {
                    throw new RecordNotFoundException("ProductKey", new object[] { productIdKey });
                }
            }
            finally
            {
                this.ProductKey.ReleaseReaderLock();
            }

            productRow.AddWriterLock();
            if (productRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("ProductKey", new object[] { productIdKey });
            }

            if (productRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Product", new object[] { productId });
            }

            if (productRow.ProductId != productId)
            {
                try
                {
                    this.ProductLicenseProductIdKey.AcquireReaderLock();
                    if (this.ProductLicenseProductIdKey.ContainsKey(productRow.ProductId))
                    {
                        throw new ConstraintException("update", "ProductLicenseProductIdKey");
                    }
                }
                finally
                {
                    this.ProductLicenseProductIdKey.ReleaseReaderLock();
                }
            }

            if (productRow.ExternalId0 != externalId0)
            {
                this.ProductExternalId0Key.AddWriterLock();
            }

            if (productRow.ProductId != productId)
            {
                this.Product.AddWriterLock();
                this.ProductKey.AddWriterLock();
            }

            productRow.BeginUpdate();
            productRow.DateCreated = dateCreated;
            productRow.DateModified = dateModified;
            productRow.Description = description;
            productRow.ExternalId0 = externalId0;
            productRow.Name = name;
            productRow.ProductId = productId;
            productRow.RowVersion = this.IncrementRowVersion();
            productRow.EndUpdate();
            VolatileTransaction.Current.AddActions(productRow.CommitUpdate, productRow.RollbackUpdate);
            this.persistentStore.UpdateProduct(productRow.DateCreated, productRow.DateModified, productRow.Description, productRow.ExternalId0, productRow.Name, productRow.ProductId, productIdKey, productRow.RowVersion);
        }

        /// <summary>
        /// Updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        public void UpdateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion)
        {
            if (abbreviation == null)
            {
                throw new ArgumentNullException("abbreviation");
            }

            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            ProvinceRow provinceRow;
            try
            {
                this.ProvinceKey.AcquireReaderLock();
                provinceRow = this.ProvinceKey.Find(provinceIdKey);
                if (provinceRow == null)
                {
                    throw new RecordNotFoundException("ProvinceKey", new object[] { provinceIdKey });
                }
            }
            finally
            {
                this.ProvinceKey.ReleaseReaderLock();
            }

            provinceRow.AddWriterLock();
            if (provinceRow.RowState == RowState.Detached)
            {
                throw new RecordNotFoundException("ProvinceKey", new object[] { provinceIdKey });
            }

            if (provinceRow.RowVersion != rowVersion)
            {
                throw new OptimisticConcurrencyException("Province", new object[] { provinceId });
            }

            if (provinceRow.ProvinceId != provinceId)
            {
                try
                {
                    this.ProvinceCustomerProvinceIdKey.AcquireReaderLock();
                    if (this.ProvinceCustomerProvinceIdKey.ContainsKey(provinceRow.ProvinceId))
                    {
                        throw new ConstraintException("update", "ProvinceCustomerProvinceIdKey");
                    }
                }
                finally
                {
                    this.ProvinceCustomerProvinceIdKey.ReleaseReaderLock();
                }
            }

            if (provinceRow.ExternalId0 != externalId0)
            {
                this.ProvinceExternalId0Key.AddWriterLock();
            }

            if (provinceRow.ProvinceId != provinceId)
            {
                this.Province.AddWriterLock();
                this.ProvinceKey.AddWriterLock();
            }

            if (provinceRow.CountryId != countryId)
            {
                this.CountryKey.AddReaderLock();
                this.CountryProvinceKey.AddWriterLock();
                if (!this.CountryKey.ContainsKey(countryId))
                {
                    throw new ConstraintException("update", "CountryProvinceKey");
                }
            }

            provinceRow.BeginUpdate();
            provinceRow.Abbreviation = abbreviation;
            provinceRow.CountryId = countryId;
            provinceRow.ExternalId0 = externalId0;
            provinceRow.Name = name;
            provinceRow.ProvinceId = provinceId;
            provinceRow.RowVersion = this.IncrementRowVersion();
            provinceRow.EndUpdate();
            VolatileTransaction.Current.AddActions(provinceRow.CommitUpdate, provinceRow.RollbackUpdate);
            this.persistentStore.UpdateProvince(provinceRow.Abbreviation, provinceRow.CountryId, provinceRow.ExternalId0, provinceRow.Name, provinceRow.ProvinceId, provinceIdKey, provinceRow.RowVersion);
        }

        /// <summary>
        /// Adds a transaction item to the log.
        /// </summary>
        /// <param name="data">An array of updated fields.</param>
        internal void AddTransaction(object[] data)
        {
            this.transactionLog.AddLast(new TransactionLogItem(data, this.sequenceField++, DateTime.Now));
        }

        /// <summary>
        /// Releases the resources used by the MarshalByValueComponent.
        /// </summary>
        /// <param name="isDisposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        protected virtual void Dispose(bool isDisposing)
        {
            if (isDisposing)
            {
            }
        }

        /// <summary>
        /// Handles the completion of the database load.
        /// </summary>
        private void ReadCompleted()
        {
            CommittableTransaction committableTransaction = System.Transactions.Transaction.Current as CommittableTransaction;
            committableTransaction.Commit();
            this.Configuration.ReleaseWriterLock();
            this.Country.ReleaseWriterLock();
            this.Customer.ReleaseWriterLock();
            this.License.ReleaseWriterLock();
            this.LicenseType.ReleaseWriterLock();
            this.Product.ReleaseWriterLock();
            this.Province.ReleaseWriterLock();
            this.ConfigurationKey.ReleaseWriterLock();
            this.CountryExternalId0Key.ReleaseWriterLock();
            this.CountryKey.ReleaseWriterLock();
            this.CustomerExternalId0Key.ReleaseWriterLock();
            this.CustomerKey.ReleaseWriterLock();
            this.LicenseExternalId0Key.ReleaseWriterLock();
            this.LicenseKey.ReleaseWriterLock();
            this.LicenseTypeKey.ReleaseWriterLock();
            this.ProductExternalId0Key.ReleaseWriterLock();
            this.ProductKey.ReleaseWriterLock();
            this.ProvinceExternalId0Key.ReleaseWriterLock();
            this.ProvinceKey.ReleaseWriterLock();
            this.CountryCustomerCountryIdKey.ReleaseWriterLock();
            this.CountryProvinceKey.ReleaseWriterLock();
            this.CustomerLicenseCustomerIdKey.ReleaseWriterLock();
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.ReleaseWriterLock();
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.ReleaseWriterLock();
            this.ProductLicenseProductIdKey.ReleaseWriterLock();
            this.ProvinceCustomerProvinceIdKey.ReleaseWriterLock();
            System.Transactions.Transaction.Current = null;
        }

        /// <summary>
        /// Handles the start of the database load.
        /// </summary>
        private void ReadStarting()
        {
            CommittableTransaction committableTransaction = new CommittableTransaction();
            System.Transactions.Transaction.Current = committableTransaction;
            this.Configuration.AcquireWriterLock();
            this.Country.AcquireWriterLock();
            this.Customer.AcquireWriterLock();
            this.License.AcquireWriterLock();
            this.LicenseType.AcquireWriterLock();
            this.Product.AcquireWriterLock();
            this.Province.AcquireWriterLock();
            this.ConfigurationKey.AcquireWriterLock();
            this.CountryExternalId0Key.AcquireWriterLock();
            this.CountryKey.AcquireWriterLock();
            this.CustomerExternalId0Key.AcquireWriterLock();
            this.CustomerKey.AcquireWriterLock();
            this.LicenseExternalId0Key.AcquireWriterLock();
            this.LicenseKey.AcquireWriterLock();
            this.LicenseTypeKey.AcquireWriterLock();
            this.ProductExternalId0Key.AcquireWriterLock();
            this.ProductKey.AcquireWriterLock();
            this.ProvinceExternalId0Key.AcquireWriterLock();
            this.ProvinceKey.AcquireWriterLock();
            this.CountryCustomerCountryIdKey.AcquireWriterLock();
            this.CountryProvinceKey.AcquireWriterLock();
            this.CustomerLicenseCustomerIdKey.AcquireWriterLock();
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AcquireWriterLock();
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AcquireWriterLock();
            this.ProductLicenseProductIdKey.AcquireWriterLock();
            this.ProvinceCustomerProvinceIdKey.AcquireWriterLock();
        }
    }

    /// <summary>
    /// An item in the transaction log.
    /// </summary>
    public class TransactionLogItem
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLogItem"/> class.
        /// </summary>
        /// <param name="data">The data for the transaction log item.</param>
        /// <param name="sequence">The sequence of the item in the log.</param>
        /// <param name="timeStamp">The time the item was entered into the log.</param>
        internal TransactionLogItem(object[] data, long sequence, DateTime timeStamp)
        {
            this.Data = data;
            this.Sequence = sequence;
            this.TimeStamp = timeStamp;
        }

        /// <summary>
        /// Gets or sets the transaction data.
        /// </summary>
        internal object[] Data { get; set; }

        /// <summary>
        /// Gets or sets the sequence number.
        /// </summary>
        internal long Sequence { get; set; }

        /// <summary>
        /// Gets or sets the time the item was created.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "This will be used in the near future.")]
        internal DateTime TimeStamp { get; set; }
    }

    /// <summary>
    /// Unique key index for the Configuration table.
    /// </summary>
    public class ConfigurationKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<ConfigurationKeySet, ConfigurationRow> dictionary = new Dictionary<ConfigurationKeySet, ConfigurationRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ConfigurationKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ConfigurationKey", Justification = "Diagnostic message.")]
        public ConfigurationRow Find(string configurationId, string source)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ConfigurationKey index is not locked.");
            }

            ConfigurationRow configurationRow;
            this.dictionary.TryGetValue(new ConfigurationKeySet(configurationId, source), out configurationRow);
            return configurationRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The <see cref="ConfigurationRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ConfigurationKey", Justification = "Diagnostic message.")]
        internal void Add(string configurationId, string source, ConfigurationRow configurationRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ConfigurationKey index is not locked.");
            }

            ConfigurationKeySet configurationKeySet = new ConfigurationKeySet(configurationId, source);
            if (this.dictionary.ContainsKey(configurationKeySet))
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.dictionary.Add(configurationKeySet, configurationRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ConfigurationKey", Justification = "Diagnostic message.")]
        internal void Remove(string configurationId, string source)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ConfigurationKey index is not locked.");
            }

            this.dictionary.Remove(new ConfigurationKeySet(configurationId, source));
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldConfigurationId">The old ConfigurationId key element.</param>
        /// <param name="oldSource">The old Source key element.</param>
        /// <param name="newConfigurationId">The new ConfigurationId key element.</param>
        /// <param name="newSource">The new Source key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ConfigurationKey", Justification = "Diagnostic message.")]
        internal void Update(string oldConfigurationId, string oldSource, string newConfigurationId, string newSource)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ConfigurationKey index is not locked.");
            }

            ConfigurationKeySet oldConfigurationKeySet = new ConfigurationKeySet(oldConfigurationId, oldSource);
            ConfigurationRow configurationRow = this.dictionary[oldConfigurationKeySet];
            this.dictionary.Remove(oldConfigurationKeySet);
            this.dictionary.Add(new ConfigurationKeySet(newConfigurationId, newSource), configurationRow);
        }

        /// <summary>
        /// A compound key for finding objects in the ConfigurationKey index.
        /// </summary>
        internal struct ConfigurationKeySet : IComparable<ConfigurationKeySet>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ConfigurationKeySet"/> struct.
            /// </summary>
            /// <param name="configurationId">A ConfigurationId component of the key.</param>
            /// <param name="source">A Source component of the key.</param>
            public ConfigurationKeySet(string configurationId, string source)
            {
                if (configurationId == null)
                {
                    throw new ArgumentNullException("configurationId");
                }

                if (source == null)
                {
                    throw new ArgumentNullException("source");
                }

                this.ConfigurationId = configurationId;
                this.Source = source;
            }

            /// <summary>
            /// Gets the ConfigurationId.
            /// </summary>
            public string ConfigurationId { get; private set; }

            /// <summary>
            /// Gets the Source.
            /// </summary>
            public string Source { get; private set; }

            /// <summary>
            /// Equality Operator.
            /// </summary>
            /// <param name="key1">The first key.</param>
            /// <param name="key2">The second key.</param>
            /// <returns>True if the two keys are equal, false otherwise.</returns>
            public static bool operator ==(ConfigurationKeySet key1, ConfigurationKeySet key2)
            {
                return key1.Source == key2.Source && key1.ConfigurationId == key2.ConfigurationId;
            }

            /// <summary>
            /// Inequality Operator.
            /// </summary>
            /// <param name="key1">The first key.</param>
            /// <param name="key2">The second key.</param>
            /// <returns>True if the two keys are not equal, false otherwise.</returns>
            public static bool operator !=(ConfigurationKeySet key1, ConfigurationKeySet key2)
            {
                return key1.Source != key2.Source || key1.ConfigurationId != key2.ConfigurationId;
            }

            /// <summary>
            /// Less than Operator.
            /// </summary>
            /// <param name="key1">The first key.</param>
            /// <param name="key2">The second key.</param>
            /// <returns>True if the key1 is less than key2, false otherwise.</returns>
            public static bool operator <(ConfigurationKeySet key1, ConfigurationKeySet key2)
            {
                return key1.CompareTo(key2) == -1;
            }

            /// <summary>
            /// Greater than Operator.
            /// </summary>
            /// <param name="key1">The first key.</param>
            /// <param name="key2">The second key.</param>
            /// <returns>True if the key1 is greater than key2, false otherwise.</returns>
            public static bool operator >(ConfigurationKeySet key1, ConfigurationKeySet key2)
            {
                return key1.CompareTo(key2) == 1;
            }

            /// <summary>
            /// Compares the current object with another object of the same type.
            /// </summary>
            /// <param name="other">An object to compare with this object.</param>
            /// <returns>
            /// Less than zero, this object is less than the other parameter.  Zero, this object is equal to other.  Greater than zero, this object is
            /// greater than other.
            /// </returns>
            public int CompareTo(ConfigurationKeySet other)
            {
                int compare0 = string.CompareOrdinal(other.ConfigurationId, this.ConfigurationId);
                if (compare0 != 0)
                {
                    return compare0;
                }

                return string.CompareOrdinal(other.Source, this.Source);
            }

            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="obj">The object to compare with the current object.</param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object obj)
            {
                return this.Source == ((ConfigurationKeySet)obj).Source && this.ConfigurationId == ((ConfigurationKeySet)obj).ConfigurationId;
            }

            /// <summary>
            /// Serves as the hash function.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                int configurationIdHashCode = 0;
                if (this.ConfigurationId != null)
                {
                    configurationIdHashCode = this.ConfigurationId.GetHashCode();
                }

                int sourceHashCode = 0;
                if (this.Source != null)
                {
                    sourceHashCode = this.Source.GetHashCode();
                }

                return configurationIdHashCode + sourceHashCode;
            }
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryExternalId0Key : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, CountryRow> dictionary = new Dictionary<string, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryExternalId0Key", Justification = "Diagnostic message.")]
        public CountryRow Find(string externalId0)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryExternalId0Key index is not locked.");
            }

            CountryRow countryRow;
            this.dictionary.TryGetValue(externalId0, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryExternalId0Key", Justification = "Diagnostic message.")]
        internal void Add(string externalId0, CountryRow countryRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryExternalId0Key index is not locked.");
            }

            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("CountryExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, countryRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryExternalId0Key", Justification = "Diagnostic message.")]
        internal void Remove(string externalId0)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryExternalId0Key index is not locked.");
            }

            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, CountryRow> dictionary = new Dictionary<Guid, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryKey", Justification = "Diagnostic message.")]
        public CountryRow Find(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryKey index is not locked.");
            }

            CountryRow countryRow;
            this.dictionary.TryGetValue(countryId, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryKey", Justification = "Diagnostic message.")]
        internal void Add(Guid countryId, CountryRow countryRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(countryId))
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.dictionary.Add(countryId, countryRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryKey index is not locked.");
            }

            return this.dictionary.ContainsKey(countryId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryKey", Justification = "Diagnostic message.")]
        internal void Remove(Guid countryId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryKey index is not locked.");
            }

            this.dictionary.Remove(countryId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryKey", Justification = "Diagnostic message.")]
        internal void Update(Guid oldCountryId, Guid newCountryId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryKey index is not locked.");
            }

            CountryRow countryRow = this.dictionary[oldCountryId];
            this.dictionary.Remove(oldCountryId);
            this.dictionary.Add(newCountryId, countryRow);
        }
    }

    /// <summary>
    /// Unique key index for the Customer table.
    /// </summary>
    public class CustomerExternalId0Key : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, CustomerRow> dictionary = new Dictionary<string, CustomerRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerExternalId0Key", Justification = "Diagnostic message.")]
        public CustomerRow Find(string externalId0)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CustomerExternalId0Key index is not locked.");
            }

            CustomerRow customerRow;
            this.dictionary.TryGetValue(externalId0, out customerRow);
            return customerRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="customerRow">The <see cref="CustomerRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerExternalId0Key", Justification = "Diagnostic message.")]
        internal void Add(string externalId0, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerExternalId0Key index is not locked.");
            }

            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("CustomerExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, customerRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerExternalId0Key", Justification = "Diagnostic message.")]
        internal void Remove(string externalId0)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerExternalId0Key index is not locked.");
            }

            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Customer table.
    /// </summary>
    public class CustomerKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, CustomerRow> dictionary = new Dictionary<Guid, CustomerRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerKey", Justification = "Diagnostic message.")]
        public CustomerRow Find(Guid customerId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CustomerKey index is not locked.");
            }

            CustomerRow customerRow;
            this.dictionary.TryGetValue(customerId, out customerRow);
            return customerRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="customerRow">The <see cref="CustomerRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerKey", Justification = "Diagnostic message.")]
        internal void Add(Guid customerId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(customerId))
            {
                throw new DuplicateKeyException("CustomerKey", new object[] { customerId });
            }

            this.dictionary.Add(customerId, customerRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid customerId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CustomerKey index is not locked.");
            }

            return this.dictionary.ContainsKey(customerId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerKey", Justification = "Diagnostic message.")]
        internal void Remove(Guid customerId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerKey index is not locked.");
            }

            this.dictionary.Remove(customerId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldCustomerId">The old CustomerId key element.</param>
        /// <param name="newCustomerId">The new CustomerId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerKey", Justification = "Diagnostic message.")]
        internal void Update(Guid oldCustomerId, Guid newCustomerId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerKey index is not locked.");
            }

            CustomerRow customerRow = this.dictionary[oldCustomerId];
            this.dictionary.Remove(oldCustomerId);
            this.dictionary.Add(newCustomerId, customerRow);
        }
    }

    /// <summary>
    /// Unique key index for the License table.
    /// </summary>
    public class LicenseExternalId0Key : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, LicenseRow> dictionary = new Dictionary<string, LicenseRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseExternalId0Key", Justification = "Diagnostic message.")]
        public LicenseRow Find(string externalId0)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseExternalId0Key index is not locked.");
            }

            LicenseRow licenseRow;
            this.dictionary.TryGetValue(externalId0, out licenseRow);
            return licenseRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="licenseRow">The <see cref="LicenseRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseExternalId0Key", Justification = "Diagnostic message.")]
        internal void Add(string externalId0, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseExternalId0Key index is not locked.");
            }

            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("LicenseExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, licenseRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseExternalId0Key", Justification = "Diagnostic message.")]
        internal void Remove(string externalId0)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseExternalId0Key index is not locked.");
            }

            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the License table.
    /// </summary>
    public class LicenseKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, LicenseRow> dictionary = new Dictionary<Guid, LicenseRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseKey", Justification = "Diagnostic message.")]
        public LicenseRow Find(Guid licenseId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseKey index is not locked.");
            }

            LicenseRow licenseRow;
            this.dictionary.TryGetValue(licenseId, out licenseRow);
            return licenseRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="licenseRow">The <see cref="LicenseRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseKey", Justification = "Diagnostic message.")]
        internal void Add(Guid licenseId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(licenseId))
            {
                throw new DuplicateKeyException("LicenseKey", new object[] { licenseId });
            }

            this.dictionary.Add(licenseId, licenseRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseKey", Justification = "Diagnostic message.")]
        internal void Remove(Guid licenseId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseKey index is not locked.");
            }

            this.dictionary.Remove(licenseId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldLicenseId">The old LicenseId key element.</param>
        /// <param name="newLicenseId">The new LicenseId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseKey", Justification = "Diagnostic message.")]
        internal void Update(Guid oldLicenseId, Guid newLicenseId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseKey index is not locked.");
            }

            LicenseRow licenseRow = this.dictionary[oldLicenseId];
            this.dictionary.Remove(oldLicenseId);
            this.dictionary.Add(newLicenseId, licenseRow);
        }
    }

    /// <summary>
    /// Unique key index for the LicenseType table.
    /// </summary>
    public class LicenseTypeKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, LicenseTypeRow> dictionary = new Dictionary<LicenseTypeCode, LicenseTypeRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeKey", Justification = "Diagnostic message.")]
        public LicenseTypeRow Find(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeKey index is not locked.");
            }

            LicenseTypeRow licenseTypeRow;
            this.dictionary.TryGetValue(licenseTypeCode, out licenseTypeRow);
            return licenseTypeRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseTypeRow">The <see cref="LicenseTypeRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeKey", Justification = "Diagnostic message.")]
        internal void Add(LicenseTypeCode licenseTypeCode, LicenseTypeRow licenseTypeRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(licenseTypeCode))
            {
                throw new DuplicateKeyException("LicenseTypeKey", new object[] { licenseTypeCode });
            }

            this.dictionary.Add(licenseTypeCode, licenseTypeRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeKey index is not locked.");
            }

            return this.dictionary.ContainsKey(licenseTypeCode);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeKey", Justification = "Diagnostic message.")]
        internal void Remove(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeKey index is not locked.");
            }

            this.dictionary.Remove(licenseTypeCode);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeKey", Justification = "Diagnostic message.")]
        internal void Update(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeKey index is not locked.");
            }

            LicenseTypeRow licenseTypeRow = this.dictionary[oldLicenseTypeCode];
            this.dictionary.Remove(oldLicenseTypeCode);
            this.dictionary.Add(newLicenseTypeCode, licenseTypeRow);
        }
    }

    /// <summary>
    /// Unique key index for the Product table.
    /// </summary>
    public class ProductExternalId0Key : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, ProductRow> dictionary = new Dictionary<string, ProductRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductExternalId0Key", Justification = "Diagnostic message.")]
        public ProductRow Find(string externalId0)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProductExternalId0Key index is not locked.");
            }

            ProductRow productRow;
            this.dictionary.TryGetValue(externalId0, out productRow);
            return productRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="productRow">The <see cref="ProductRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductExternalId0Key", Justification = "Diagnostic message.")]
        internal void Add(string externalId0, ProductRow productRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductExternalId0Key index is not locked.");
            }

            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("ProductExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, productRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductExternalId0Key", Justification = "Diagnostic message.")]
        internal void Remove(string externalId0)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductExternalId0Key index is not locked.");
            }

            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Product table.
    /// </summary>
    public class ProductKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, ProductRow> dictionary = new Dictionary<Guid, ProductRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductKey", Justification = "Diagnostic message.")]
        public ProductRow Find(Guid productId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProductKey index is not locked.");
            }

            ProductRow productRow;
            this.dictionary.TryGetValue(productId, out productRow);
            return productRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="productRow">The <see cref="ProductRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductKey", Justification = "Diagnostic message.")]
        internal void Add(Guid productId, ProductRow productRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(productId))
            {
                throw new DuplicateKeyException("ProductKey", new object[] { productId });
            }

            this.dictionary.Add(productId, productRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid productId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProductKey index is not locked.");
            }

            return this.dictionary.ContainsKey(productId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductKey", Justification = "Diagnostic message.")]
        internal void Remove(Guid productId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductKey index is not locked.");
            }

            this.dictionary.Remove(productId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldProductId">The old ProductId key element.</param>
        /// <param name="newProductId">The new ProductId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductKey", Justification = "Diagnostic message.")]
        internal void Update(Guid oldProductId, Guid newProductId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductKey index is not locked.");
            }

            ProductRow productRow = this.dictionary[oldProductId];
            this.dictionary.Remove(oldProductId);
            this.dictionary.Add(newProductId, productRow);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceExternalId0Key : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, ProvinceRow> dictionary = new Dictionary<string, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceExternalId0Key", Justification = "Diagnostic message.")]
        public ProvinceRow Find(string externalId0)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProvinceExternalId0Key index is not locked.");
            }

            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(externalId0, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceExternalId0Key", Justification = "Diagnostic message.")]
        internal void Add(string externalId0, ProvinceRow provinceRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceExternalId0Key index is not locked.");
            }

            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("ProvinceExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, provinceRow);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceExternalId0Key", Justification = "Diagnostic message.")]
        internal void Remove(string externalId0)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceExternalId0Key index is not locked.");
            }

            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, ProvinceRow> dictionary = new Dictionary<Guid, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceKey", Justification = "Diagnostic message.")]
        public ProvinceRow Find(Guid provinceId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProvinceKey index is not locked.");
            }

            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(provinceId, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceKey", Justification = "Diagnostic message.")]
        internal void Add(Guid provinceId, ProvinceRow provinceRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceKey index is not locked.");
            }

            if (this.dictionary.ContainsKey(provinceId))
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.dictionary.Add(provinceId, provinceRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid provinceId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProvinceKey index is not locked.");
            }

            return this.dictionary.ContainsKey(provinceId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceKey", Justification = "Diagnostic message.")]
        internal void Remove(Guid provinceId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceKey index is not locked.");
            }

            this.dictionary.Remove(provinceId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldProvinceId">The old ProvinceId key element.</param>
        /// <param name="newProvinceId">The new ProvinceId key element.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceKey", Justification = "Diagnostic message.")]
        internal void Update(Guid oldProvinceId, Guid newProvinceId)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceKey index is not locked.");
            }

            ProvinceRow provinceRow = this.dictionary[oldProvinceId];
            this.dictionary.Remove(oldProvinceId);
            this.dictionary.Add(newProvinceId, provinceRow);
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Customer table.
    /// </summary>
    public class CountryCustomerCountryIdKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<CustomerRow>> dictionary = new Dictionary<Guid, HashSet<CustomerRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryCustomerCountryIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryCustomerCountryIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="CustomerRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="CustomerRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        public List<CustomerRow> GetCustomerRows(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryCustomerCountryIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="customerRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        internal void AddChild(Guid countryId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryCustomerCountryIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(customerRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryCustomerCountryIdKey index is not locked.");
            }

            return this.dictionary.ContainsKey(countryId);
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="customerRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(Guid countryId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryCustomerCountryIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="customerRow">The child <see cref="CustomerRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryCustomerCountryIdKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryCustomerCountryIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(customerRow);
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Province table.
    /// </summary>
    public class CountryProvinceKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<ProvinceRow>> dictionary = new Dictionary<Guid, HashSet<ProvinceRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="ProvinceRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="ProvinceRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        public List<ProvinceRow> GetProvinceRows(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryProvinceKey index is not locked.");
            }

            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        internal void AddChild(Guid countryId, ProvinceRow provinceRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryProvinceKey index is not locked.");
            }

            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(provinceRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid countryId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CountryProvinceKey index is not locked.");
            }

            return this.dictionary.ContainsKey(countryId);
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(Guid countryId, ProvinceRow provinceRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryProvinceKey index is not locked.");
            }

            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="provinceRow">The child <see cref="ProvinceRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CountryProvinceKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, ProvinceRow provinceRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CountryProvinceKey index is not locked.");
            }

            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(provinceRow);
        }
    }

    /// <summary>
    /// Relates rows in the Customer table to the License table.
    /// </summary>
    public class CustomerLicenseCustomerIdKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<LicenseRow>> dictionary = new Dictionary<Guid, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLicenseCustomerIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerLicenseCustomerIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        public List<LicenseRow> GetLicenseRows(Guid customerId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CustomerLicenseCustomerIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        internal void AddChild(Guid customerId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerLicenseCustomerIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(customerId, hashSet);
            }

            hashSet.Add(licenseRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid customerId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("CustomerLicenseCustomerIdKey index is not locked.");
            }

            return this.dictionary.ContainsKey(customerId);
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(Guid customerId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerLicenseCustomerIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(customerId);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldCustomerId">The old CustomerId key element.</param>
        /// <param name="newCustomerId">The new CustomerId key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "CustomerLicenseCustomerIdKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(Guid oldCustomerId, Guid newCustomerId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("CustomerLicenseCustomerIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldCustomerId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCustomerId);
                }
            }

            if (!this.dictionary.TryGetValue(newCustomerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newCustomerId, hashSet);
            }

            hashSet.Add(licenseRow);
        }
    }

    /// <summary>
    /// Relates rows in the LicenseType table to the License table.
    /// </summary>
    public class LicenseTypeLicenseDeveloperLicenseTypeCodeKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, HashSet<LicenseRow>> dictionary = new Dictionary<LicenseTypeCode, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeLicenseDeveloperLicenseTypeCodeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeLicenseDeveloperLicenseTypeCodeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        public List<LicenseRow> GetLicenseRows(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeLicenseDeveloperLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void AddChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseDeveloperLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(licenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeLicenseDeveloperLicenseTypeCodeKey index is not locked.");
            }

            return this.dictionary.ContainsKey(licenseTypeCode);
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseDeveloperLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(licenseTypeCode);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseDeveloperLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseDeveloperLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldLicenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldLicenseTypeCode);
                }
            }

            if (!this.dictionary.TryGetValue(newLicenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newLicenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
        }
    }

    /// <summary>
    /// Relates rows in the LicenseType table to the License table.
    /// </summary>
    public class LicenseTypeLicenseRuntimeLicenseTypeCodeKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, HashSet<LicenseRow>> dictionary = new Dictionary<LicenseTypeCode, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeLicenseRuntimeLicenseTypeCodeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeLicenseRuntimeLicenseTypeCodeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        public List<LicenseRow> GetLicenseRows(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeLicenseRuntimeLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void AddChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseRuntimeLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(licenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(LicenseTypeCode licenseTypeCode)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("LicenseTypeLicenseRuntimeLicenseTypeCodeKey index is not locked.");
            }

            return this.dictionary.ContainsKey(licenseTypeCode);
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseRuntimeLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(licenseTypeCode);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseTypeLicenseRuntimeLicenseTypeCodeKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("LicenseTypeLicenseRuntimeLicenseTypeCodeKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldLicenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldLicenseTypeCode);
                }
            }

            if (!this.dictionary.TryGetValue(newLicenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newLicenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
        }
    }

    /// <summary>
    /// Relates rows in the Product table to the License table.
    /// </summary>
    public class ProductLicenseProductIdKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<LicenseRow>> dictionary = new Dictionary<Guid, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLicenseProductIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductLicenseProductIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        public List<LicenseRow> GetLicenseRows(Guid productId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProductLicenseProductIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        internal void AddChild(Guid productId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductLicenseProductIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(productId, hashSet);
            }

            hashSet.Add(licenseRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid productId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProductLicenseProductIdKey index is not locked.");
            }

            return this.dictionary.ContainsKey(productId);
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(Guid productId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductLicenseProductIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(productId);
                }
            }
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldProductId">The old ProductId key element.</param>
        /// <param name="newProductId">The new ProductId key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProductLicenseProductIdKey", Justification = "Diagnostic message.")]
        internal void UpdateChild(Guid oldProductId, Guid newProductId, LicenseRow licenseRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProductLicenseProductIdKey index is not locked.");
            }

            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldProductId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldProductId);
                }
            }

            if (!this.dictionary.TryGetValue(newProductId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newProductId, hashSet);
            }

            hashSet.Add(licenseRow);
        }
    }

    /// <summary>
    /// Relates rows in the Province table to the Customer table.
    /// </summary>
    public class ProvinceCustomerProvinceIdKey : DarkBond.ServiceModel.ReaderWriterLock
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<CustomerRow>> dictionary = new Dictionary<Guid, HashSet<CustomerRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceCustomerProvinceIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceCustomerProvinceIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddReaderLock()
        {
            this.AcquireReaderLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseReaderLock);
        }

        /// <summary>
        /// Acquires a reader lock for this resource and queues a corresponding release lock.
        /// </summary>
        public void AddWriterLock()
        {
            this.AcquireWriterLock();
            VolatileTransaction.Current.AddFinally(this.ReleaseWriterLock);
        }

        /// <summary>
        /// Gets a collection of child <see cref="CustomerRow"/> rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>A collection of child <see cref="CustomerRow"/> rows.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        public List<CustomerRow> GetCustomerRows(Guid provinceId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProvinceCustomerProvinceIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="customerRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        internal void AddChild(Guid provinceId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceCustomerProvinceIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(provinceId, hashSet);
            }

            hashSet.Add(customerRow);
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        internal bool ContainsKey(Guid provinceId)
        {
            if (!this.IsLockHeld)
            {
                throw new LockException("ProvinceCustomerProvinceIdKey index is not locked.");
            }

            return this.dictionary.ContainsKey(provinceId);
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="customerRow">The child row.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "ProvinceCustomerProvinceIdKey", Justification = "Diagnostic message.")]
        internal void RemoveChild(Guid provinceId, CustomerRow customerRow)
        {
            if (!this.IsWriterLockHeld)
            {
                throw new LockException("ProvinceCustomerProvinceIdKey index is not locked.");
            }

            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(provinceId);
                }
            }
        }
    }
}
#pragma warning disable SA1402
#pragma warning disable SA1649
