// <auto-generated />
#pragma warning disable SA1402
#pragma warning disable SA1649
namespace DarkBond.SubscriptionManager
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using System.ServiceModel.Description;
    using System.Threading;
    using System.Threading.Tasks;
    using DarkBond.ServiceModel;

    /// <summary>
    /// Abstract interface to a thread-safe, multi-tiered DataModel.
    /// </summary>
    [ServiceContract]
    public interface IDataService
    {
        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateConfiguration", ReplyAction = "http://tempuri.org/IDataModel/CreateConfigurationResponse")]
        Task CreateConfigurationAsync(string configurationId, string source, string targetKey);

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateCountry", ReplyAction = "http://tempuri.org/IDataModel/CreateCountryResponse")]
        Task CreateCountryAsync(string abbreviation, Guid countryId, string externalId0, string name);

        /// <summary>
        /// Creates a Offering record.
        /// </summary>
        /// <param name="age">The required value for the Age column.</param>
        /// <param name="coupon">The required value for the Coupon column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="faceValue">The required value for the FaceValue column.</param>
        /// <param name="ficoScore">The required value for the FicoScore column.</param>
        /// <param name="maturity">The required value for the Maturity column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="offeringId">The required value for the OfferingId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateOffering", ReplyAction = "http://tempuri.org/IDataModel/CreateOfferingResponse")]
        Task CreateOfferingAsync(decimal age, decimal coupon, DateTime dateCreated, DateTime dateModified, string description, string externalId0, decimal faceValue, decimal ficoScore, DateTime maturity, string name, Guid offeringId);

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateProvince", ReplyAction = "http://tempuri.org/IDataModel/CreateProvinceResponse")]
        Task CreateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId);

        /// <summary>
        /// Creates a Subscription record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="faceValue">The required value for the FaceValue column.</param>
        /// <param name="offeringId">The required value for the OfferingId column.</param>
        /// <param name="subscriptionId">The required value for the SubscriptionId column.</param>
        /// <param name="underwriterId">The required value for the UnderwriterId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateSubscription", ReplyAction = "http://tempuri.org/IDataModel/CreateSubscriptionResponse")]
        Task CreateSubscriptionAsync(DateTime dateCreated, DateTime dateModified, string externalId0, decimal faceValue, Guid offeringId, Guid subscriptionId, Guid underwriterId);

        /// <summary>
        /// Creates a Underwriter record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The optional value for the Name column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="primaryContact">The optional value for the PrimaryContact column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="underwriterId">The required value for the UnderwriterId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateUnderwriter", ReplyAction = "http://tempuri.org/IDataModel/CreateUnderwriterResponse")]
        Task CreateUnderwriterAsync(string address1, string address2, string city, Guid countryId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string name, string phone, string postalCode, string primaryContact, Guid? provinceId, Guid underwriterId);

        /// <summary>
        /// Asynchronously deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="source">The Source key element.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteConfiguration", ReplyAction = "http://tempuri.org/IDataModel/DeleteConfigurationResponse")]
        Task DeleteConfigurationAsync(string configurationId, long rowVersion, string source);

        /// <summary>
        /// Asynchronously deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteCountry", ReplyAction = "http://tempuri.org/IDataModel/DeleteCountryResponse")]
        Task DeleteCountryAsync(Guid countryId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Offering record.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteOffering", ReplyAction = "http://tempuri.org/IDataModel/DeleteOfferingResponse")]
        Task DeleteOfferingAsync(Guid offeringId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteProvince", ReplyAction = "http://tempuri.org/IDataModel/DeleteProvinceResponse")]
        Task DeleteProvinceAsync(Guid provinceId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Subscription record.
        /// </summary>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteSubscription", ReplyAction = "http://tempuri.org/IDataModel/DeleteSubscriptionResponse")]
        Task DeleteSubscriptionAsync(long rowVersion, Guid subscriptionId);

        /// <summary>
        /// Asynchronously deletes a Underwriter record.
        /// </summary>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteUnderwriter", ReplyAction = "http://tempuri.org/IDataModel/DeleteUnderwriterResponse")]
        Task DeleteUnderwriterAsync(long rowVersion, Guid underwriterId);

        /// <summary>
        /// Reads the latest data from the service.
        /// </summary>
        /// <param name="identifier">A unique identifier of an instance of the data.</param>
        /// <param name="sequence">The sequence of the client data model.</param>
        /// <returns>An array of records that will reconcile the client data model to the server.</returns>
        [OperationContract(Action = "http://tempuri.org/IDataModel/Read", ReplyAction = "http://tempuri.org/IDataModel/ReadResponse")]
        Task<DataHeader> ReadAsync(Guid identifier, long sequence);

        /// <summary>
        /// Asynchronously updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateConfiguration", ReplyAction = "http://tempuri.org/IDataModel/UpdateConfigurationResponse")]
        Task UpdateConfigurationAsync(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey);

        /// <summary>
        /// Asynchronously updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateCountry", ReplyAction = "http://tempuri.org/IDataModel/UpdateCountryResponse")]
        Task UpdateCountryAsync(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Offering record.
        /// </summary>
        /// <param name="age">The optional value for the age column.</param>
        /// <param name="coupon">The optional value for the coupon column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="faceValue">The optional value for the faceValue column.</param>
        /// <param name="ficoScore">The optional value for the ficoScore column.</param>
        /// <param name="maturity">The optional value for the maturity column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="offeringId">The optional value for the offeringId column.</param>
        /// <param name="offeringIdKey">The OfferingId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateOffering", ReplyAction = "http://tempuri.org/IDataModel/UpdateOfferingResponse")]
        Task UpdateOfferingAsync(decimal age, decimal coupon, DateTime dateCreated, DateTime dateModified, string description, string externalId0, decimal faceValue, decimal ficoScore, DateTime maturity, string name, Guid offeringId, Guid offeringIdKey, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateProvince", ReplyAction = "http://tempuri.org/IDataModel/UpdateProvinceResponse")]
        Task UpdateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Subscription record.
        /// </summary>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="faceValue">The optional value for the faceValue column.</param>
        /// <param name="offeringId">The optional value for the offeringId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="subscriptionId">The optional value for the subscriptionId column.</param>
        /// <param name="subscriptionIdKey">The SubscriptionId key element.</param>
        /// <param name="underwriterId">The optional value for the underwriterId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateSubscription", ReplyAction = "http://tempuri.org/IDataModel/UpdateSubscriptionResponse")]
        Task UpdateSubscriptionAsync(DateTime dateCreated, DateTime dateModified, string externalId0, decimal faceValue, Guid offeringId, long rowVersion, Guid subscriptionId, Guid subscriptionIdKey, Guid underwriterId);

        /// <summary>
        /// Asynchronously updates a Underwriter record.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The required value for the name column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="primaryContact">The required value for the primaryContact column.</param>
        /// <param name="provinceId">The required value for the provinceId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="underwriterId">The optional value for the underwriterId column.</param>
        /// <param name="underwriterIdKey">The UnderwriterId key element.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateUnderwriter", ReplyAction = "http://tempuri.org/IDataModel/UpdateUnderwriterResponse")]
        Task UpdateUnderwriterAsync(string address1, string address2, string city, Guid countryId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string name, string phone, string postalCode, string primaryContact, Guid? provinceId, long rowVersion, Guid underwriterId, Guid underwriterIdKey);
    }

    /// <summary>
    /// Network client connection to a shared data model.
    /// </summary>
    public class DataServiceClient : ClientBase<IDataService>, IDataService
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataServiceClient"/> class.
        /// </summary>
        /// <param name="binding">The WCF binding.</param>
        /// <param name="endpointAddress">The endpoint address.</param>
        /// <param name="clientSecurityToken">The security token.</param>
        public DataServiceClient(Binding binding, EndpointAddress endpointAddress, ClientSecurityToken clientSecurityToken) : base(binding, endpointAddress)
        {
            this.ChannelFactory.Endpoint.EndpointBehaviors.Remove(typeof(ClientCredentials));
            this.ChannelFactory.Endpoint.EndpointBehaviors.Add(new SecurityTokenEndpointBehavior(clientSecurityToken));
        }

        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        public Task CreateConfigurationAsync(string configurationId, string source, string targetKey)
        {
            return base.Channel.CreateConfigurationAsync(configurationId, source, targetKey);
        }

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        public Task CreateCountryAsync(string abbreviation, Guid countryId, string externalId0, string name)
        {
            return base.Channel.CreateCountryAsync(abbreviation, countryId, externalId0, name);
        }

        /// <summary>
        /// Creates a Offering record.
        /// </summary>
        /// <param name="age">The required value for the Age column.</param>
        /// <param name="coupon">The required value for the Coupon column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="faceValue">The required value for the FaceValue column.</param>
        /// <param name="ficoScore">The required value for the FicoScore column.</param>
        /// <param name="maturity">The required value for the Maturity column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="offeringId">The required value for the OfferingId column.</param>
        public Task CreateOfferingAsync(decimal age, decimal coupon, DateTime dateCreated, DateTime dateModified, string description, string externalId0, decimal faceValue, decimal ficoScore, DateTime maturity, string name, Guid offeringId)
        {
            return base.Channel.CreateOfferingAsync(age, coupon, dateCreated, dateModified, description, externalId0, faceValue, ficoScore, maturity, name, offeringId);
        }

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        public Task CreateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId)
        {
            return base.Channel.CreateProvinceAsync(abbreviation, countryId, externalId0, name, provinceId);
        }

        /// <summary>
        /// Creates a Subscription record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="faceValue">The required value for the FaceValue column.</param>
        /// <param name="offeringId">The required value for the OfferingId column.</param>
        /// <param name="subscriptionId">The required value for the SubscriptionId column.</param>
        /// <param name="underwriterId">The required value for the UnderwriterId column.</param>
        public Task CreateSubscriptionAsync(DateTime dateCreated, DateTime dateModified, string externalId0, decimal faceValue, Guid offeringId, Guid subscriptionId, Guid underwriterId)
        {
            return base.Channel.CreateSubscriptionAsync(dateCreated, dateModified, externalId0, faceValue, offeringId, subscriptionId, underwriterId);
        }

        /// <summary>
        /// Creates a Underwriter record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The optional value for the Name column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="primaryContact">The optional value for the PrimaryContact column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="underwriterId">The required value for the UnderwriterId column.</param>
        public Task CreateUnderwriterAsync(string address1, string address2, string city, Guid countryId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string name, string phone, string postalCode, string primaryContact, Guid? provinceId, Guid underwriterId)
        {
            return base.Channel.CreateUnderwriterAsync(address1, address2, city, countryId, dateCreated, dateModified, dateOfBirth, email, externalId0, name, phone, postalCode, primaryContact, provinceId, underwriterId);
        }

        /// <summary>
        /// Asynchronously deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="source">The Source key element.</param>
        public Task DeleteConfigurationAsync(string configurationId, long rowVersion, string source)
        {
            return base.Channel.DeleteConfigurationAsync(configurationId, rowVersion, source);
        }

        /// <summary>
        /// Asynchronously deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteCountryAsync(Guid countryId, long rowVersion)
        {
            return base.Channel.DeleteCountryAsync(countryId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Offering record.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteOfferingAsync(Guid offeringId, long rowVersion)
        {
            return base.Channel.DeleteOfferingAsync(offeringId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteProvinceAsync(Guid provinceId, long rowVersion)
        {
            return base.Channel.DeleteProvinceAsync(provinceId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Subscription record.
        /// </summary>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        public Task DeleteSubscriptionAsync(long rowVersion, Guid subscriptionId)
        {
            return base.Channel.DeleteSubscriptionAsync(rowVersion, subscriptionId);
        }

        /// <summary>
        /// Asynchronously deletes a Underwriter record.
        /// </summary>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        public Task DeleteUnderwriterAsync(long rowVersion, Guid underwriterId)
        {
            return base.Channel.DeleteUnderwriterAsync(rowVersion, underwriterId);
        }

        /// <summary>
        /// Reads the latest data from the service.
        /// </summary>
        /// <param name="identifier">A unique identifier of an instance of the data.</param>
        /// <param name="sequence">The sequence of the client data model.</param>
        /// <returns>An array of records that will reconcile the client data model to the server.</returns>
        public Task<DataHeader> ReadAsync(Guid identifier, long sequence)
        {
            return base.Channel.ReadAsync(identifier, sequence);
        }

        /// <summary>
        /// Asynchronously updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        public Task UpdateConfigurationAsync(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey)
        {
            return base.Channel.UpdateConfigurationAsync(configurationId, configurationIdKey, rowVersion, source, sourceKey, targetKey);
        }

        /// <summary>
        /// Asynchronously updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateCountryAsync(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion)
        {
            return base.Channel.UpdateCountryAsync(abbreviation, countryId, countryIdKey, externalId0, name, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Offering record.
        /// </summary>
        /// <param name="age">The optional value for the age column.</param>
        /// <param name="coupon">The optional value for the coupon column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="faceValue">The optional value for the faceValue column.</param>
        /// <param name="ficoScore">The optional value for the ficoScore column.</param>
        /// <param name="maturity">The optional value for the maturity column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="offeringId">The optional value for the offeringId column.</param>
        /// <param name="offeringIdKey">The OfferingId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateOfferingAsync(decimal age, decimal coupon, DateTime dateCreated, DateTime dateModified, string description, string externalId0, decimal faceValue, decimal ficoScore, DateTime maturity, string name, Guid offeringId, Guid offeringIdKey, long rowVersion)
        {
            return base.Channel.UpdateOfferingAsync(age, coupon, dateCreated, dateModified, description, externalId0, faceValue, ficoScore, maturity, name, offeringId, offeringIdKey, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion)
        {
            return base.Channel.UpdateProvinceAsync(abbreviation, countryId, externalId0, name, provinceId, provinceIdKey, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Subscription record.
        /// </summary>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="faceValue">The optional value for the faceValue column.</param>
        /// <param name="offeringId">The optional value for the offeringId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="subscriptionId">The optional value for the subscriptionId column.</param>
        /// <param name="subscriptionIdKey">The SubscriptionId key element.</param>
        /// <param name="underwriterId">The optional value for the underwriterId column.</param>
        public Task UpdateSubscriptionAsync(DateTime dateCreated, DateTime dateModified, string externalId0, decimal faceValue, Guid offeringId, long rowVersion, Guid subscriptionId, Guid subscriptionIdKey, Guid underwriterId)
        {
            return base.Channel.UpdateSubscriptionAsync(dateCreated, dateModified, externalId0, faceValue, offeringId, rowVersion, subscriptionId, subscriptionIdKey, underwriterId);
        }

        /// <summary>
        /// Asynchronously updates a Underwriter record.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The required value for the name column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="primaryContact">The required value for the primaryContact column.</param>
        /// <param name="provinceId">The required value for the provinceId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="underwriterId">The optional value for the underwriterId column.</param>
        /// <param name="underwriterIdKey">The UnderwriterId key element.</param>
        public Task UpdateUnderwriterAsync(string address1, string address2, string city, Guid countryId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string name, string phone, string postalCode, string primaryContact, Guid? provinceId, long rowVersion, Guid underwriterId, Guid underwriterIdKey)
        {
            return base.Channel.UpdateUnderwriterAsync(address1, address2, city, countryId, dateCreated, dateModified, dateOfBirth, email, externalId0, name, phone, postalCode, primaryContact, provinceId, rowVersion, underwriterId, underwriterIdKey);
        }
    }

    /// <summary>
    /// The fields of a ConfigurationRow.
    /// </summary>
    public sealed class ConfigurationData
    {
        /// <summary>
        /// Gets or sets the ConfigurationId.
        /// </summary>
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the Source.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the TargetKey.
        /// </summary>
        public string TargetKey { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ConfigurationData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ConfigurationData"/>.</returns>
        internal ConfigurationData Clone()
        {
            return (ConfigurationData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a CountryRow.
    /// </summary>
    public sealed class CountryData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="CountryData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="CountryData"/>.</returns>
        internal CountryData Clone()
        {
            return (CountryData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a OfferingRow.
    /// </summary>
    public sealed class OfferingData
    {
        /// <summary>
        /// Gets or sets the Age.
        /// </summary>
        public decimal Age { get; set; }

        /// <summary>
        /// Gets or sets the Coupon.
        /// </summary>
        public decimal Coupon { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the FaceValue.
        /// </summary>
        public decimal FaceValue { get; set; }

        /// <summary>
        /// Gets or sets the FicoScore.
        /// </summary>
        public decimal FicoScore { get; set; }

        /// <summary>
        /// Gets or sets the Maturity.
        /// </summary>
        public DateTime Maturity { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the OfferingId.
        /// </summary>
        public Guid OfferingId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="OfferingData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="OfferingData"/>.</returns>
        internal OfferingData Clone()
        {
            return (OfferingData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a ProvinceRow.
    /// </summary>
    public sealed class ProvinceData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ProvinceData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ProvinceData"/>.</returns>
        internal ProvinceData Clone()
        {
            return (ProvinceData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a SubscriptionRow.
    /// </summary>
    public sealed class SubscriptionData
    {
        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the FaceValue.
        /// </summary>
        public decimal FaceValue { get; set; }

        /// <summary>
        /// Gets or sets the OfferingId.
        /// </summary>
        public Guid OfferingId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the SubscriptionId.
        /// </summary>
        public Guid SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets the UnderwriterId.
        /// </summary>
        public Guid UnderwriterId { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="SubscriptionData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="SubscriptionData"/>.</returns>
        internal SubscriptionData Clone()
        {
            return (SubscriptionData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a UnderwriterRow.
    /// </summary>
    public sealed class UnderwriterData
    {
        /// <summary>
        /// Gets or sets the Address1.
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets the Address2.
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the DateOfBirth.
        /// </summary>
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Phone.
        /// </summary>
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets the PostalCode.
        /// </summary>
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryContact.
        /// </summary>
        public string PrimaryContact { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid? ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the UnderwriterId.
        /// </summary>
        public Guid UnderwriterId { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="UnderwriterData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="UnderwriterData"/>.</returns>
        internal UnderwriterData Clone()
        {
            return (UnderwriterData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// A row of data in the Configuration table.
    /// </summary>
    public class ConfigurationRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "ConfigurationId", "RowVersion", "Source", "TargetKey" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ConfigurationData currentData = new ConfigurationData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private ConfigurationData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRow"/> class.
        /// </summary>
        /// <param name="configurationTable">The parent table.</param>
        /// <param name="configurationData">The initial data.</param>
        internal ConfigurationRow(ConfigurationTable configurationTable, ConfigurationData configurationData)
        {
            this.Table = configurationTable;
            this.currentData = configurationData;
        }

        /// <summary>
        /// Gets the ConfigurationId.
        /// </summary>
        public string ConfigurationId
        {
            get
            {
                return this.currentData.ConfigurationId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the Source.
        /// </summary>
        public string Source
        {
            get
            {
                return this.currentData.Source;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ConfigurationTable Table { get; private set; }

        /// <summary>
        /// Gets the TargetKey.
        /// </summary>
        public string TargetKey
        {
            get
            {
                return this.currentData.TargetKey;
            }
        }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public ConfigurationData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.ConfigurationKey.Add(this.currentData.ConfigurationId, this.currentData.Source, this);
            this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.Table.DataModel.ConfigurationKey.Remove(this.currentData.ConfigurationId, this.currentData.Source);
            int index = this.Table.BinarySearch(this.currentData.ConfigurationId, this.currentData.Source);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="configurationData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(ConfigurationData configurationData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = configurationData;
            if (this.previousData.Source != this.currentData.Source || this.previousData.ConfigurationId != this.currentData.ConfigurationId)
            {
                this.Table.RemoveRow(this.previousData.ConfigurationId, this.previousData.Source);
                this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
                this.Table.DataModel.ConfigurationKey.Update(this.previousData.ConfigurationId, this.previousData.Source, this.currentData.ConfigurationId, this.currentData.Source);
            }

            for (int bufferIndex = 4; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(ConfigurationRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Country table.
    /// </summary>
    public class CountryRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Abbreviation", "CountryId", "ExternalId0", "Name", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private CountryData currentData = new CountryData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private CountryData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRow"/> class.
        /// </summary>
        /// <param name="countryTable">The parent table.</param>
        /// <param name="countryData">The initial data.</param>
        internal CountryRow(CountryTable countryTable, CountryData countryData)
        {
            this.Table = countryTable;
            this.currentData = countryData;
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        public string Abbreviation
        {
            get
            {
                return this.currentData.Abbreviation;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public CountryTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public CountryData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.CountryKey.Add(this.currentData.CountryId, this);
            this.Table.AddRow(this.currentData.CountryId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CountryKey.Remove(this.currentData.CountryId);
            int index = this.Table.BinarySearch(this.currentData.CountryId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="countryData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(CountryData countryData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = countryData;
            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.RemoveRow(this.previousData.CountryId);
                this.Table.AddRow(this.currentData.CountryId, this);
                this.Table.DataModel.CountryKey.Update(this.previousData.CountryId, this.currentData.CountryId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(CountryRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Offering table.
    /// </summary>
    public class OfferingRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Age", "Coupon", "DateCreated", "DateModified", "Description", "ExternalId0", "FaceValue", "FicoScore", "Maturity", "Name", "OfferingId", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private OfferingData currentData = new OfferingData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private OfferingData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingRow"/> class.
        /// </summary>
        /// <param name="offeringTable">The parent table.</param>
        /// <param name="offeringData">The initial data.</param>
        internal OfferingRow(OfferingTable offeringTable, OfferingData offeringData)
        {
            this.Table = offeringTable;
            this.currentData = offeringData;
        }

        /// <summary>
        /// Gets the Age.
        /// </summary>
        public decimal Age
        {
            get
            {
                return this.currentData.Age;
            }
        }

        /// <summary>
        /// Gets the Coupon.
        /// </summary>
        public decimal Coupon
        {
            get
            {
                return this.currentData.Coupon;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.currentData.Description;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the FaceValue.
        /// </summary>
        public decimal FaceValue
        {
            get
            {
                return this.currentData.FaceValue;
            }
        }

        /// <summary>
        /// Gets the FicoScore.
        /// </summary>
        public decimal FicoScore
        {
            get
            {
                return this.currentData.FicoScore;
            }
        }

        /// <summary>
        /// Gets the Maturity.
        /// </summary>
        public DateTime Maturity
        {
            get
            {
                return this.currentData.Maturity;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the OfferingId.
        /// </summary>
        public Guid OfferingId
        {
            get
            {
                return this.currentData.OfferingId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public OfferingTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public OfferingData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.OfferingExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.OfferingKey.Add(this.currentData.OfferingId, this);
            this.Table.AddRow(this.currentData.OfferingId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.OfferingExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.OfferingKey.Remove(this.currentData.OfferingId);
            int index = this.Table.BinarySearch(this.currentData.OfferingId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="offeringData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(OfferingData offeringData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = offeringData;
            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.OfferingExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.OfferingExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.OfferingId != this.currentData.OfferingId)
            {
                this.Table.RemoveRow(this.previousData.OfferingId);
                this.Table.AddRow(this.currentData.OfferingId, this);
                this.Table.DataModel.OfferingKey.Update(this.previousData.OfferingId, this.currentData.OfferingId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(OfferingRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Province table.
    /// </summary>
    public class ProvinceRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Abbreviation", "CountryId", "ExternalId0", "Name", "ProvinceId", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ProvinceData currentData = new ProvinceData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private ProvinceData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceRow"/> class.
        /// </summary>
        /// <param name="provinceTable">The parent table.</param>
        /// <param name="provinceData">The initial data.</param>
        internal ProvinceRow(ProvinceTable provinceTable, ProvinceData provinceData)
        {
            this.Table = provinceTable;
            this.currentData = provinceData;
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        public string Abbreviation
        {
            get
            {
                return this.currentData.Abbreviation;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        public Guid ProvinceId
        {
            get
            {
                return this.currentData.ProvinceId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ProvinceTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public ProvinceData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryProvinceKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.ProvinceKey.Add(this.currentData.ProvinceId, this);
            this.Table.AddRow(this.currentData.ProvinceId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProvinceKey.Remove(this.currentData.ProvinceId);
            this.Table.DataModel.CountryProvinceKey.RemoveChild(this.currentData.CountryId, this);
            int index = this.Table.BinarySearch(this.currentData.ProvinceId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="provinceData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(ProvinceData provinceData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = provinceData;
            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryProvinceKey.UpdateChild(this.previousData.CountryId, this.currentData.CountryId, this);
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.ProvinceId != this.currentData.ProvinceId)
            {
                this.Table.RemoveRow(this.previousData.ProvinceId);
                this.Table.AddRow(this.currentData.ProvinceId, this);
                this.Table.DataModel.ProvinceKey.Update(this.previousData.ProvinceId, this.currentData.ProvinceId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(ProvinceRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Subscription table.
    /// </summary>
    public class SubscriptionRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "DateCreated", "DateModified", "ExternalId0", "FaceValue", "OfferingId", "RowVersion", "SubscriptionId", "UnderwriterId" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private SubscriptionData currentData = new SubscriptionData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private SubscriptionData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionRow"/> class.
        /// </summary>
        /// <param name="subscriptionTable">The parent table.</param>
        /// <param name="subscriptionData">The initial data.</param>
        internal SubscriptionRow(SubscriptionTable subscriptionTable, SubscriptionData subscriptionData)
        {
            this.Table = subscriptionTable;
            this.currentData = subscriptionData;
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the FaceValue.
        /// </summary>
        public decimal FaceValue
        {
            get
            {
                return this.currentData.FaceValue;
            }
        }

        /// <summary>
        /// Gets the OfferingId.
        /// </summary>
        public Guid OfferingId
        {
            get
            {
                return this.currentData.OfferingId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the SubscriptionId.
        /// </summary>
        public Guid SubscriptionId
        {
            get
            {
                return this.currentData.SubscriptionId;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public SubscriptionTable Table { get; private set; }

        /// <summary>
        /// Gets the UnderwriterId.
        /// </summary>
        public Guid UnderwriterId
        {
            get
            {
                return this.currentData.UnderwriterId;
            }
        }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public SubscriptionData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.OfferingSubscriptionOfferingIdKey.AddChild(this.currentData.OfferingId, this);
            this.Table.DataModel.UnderwriterSubscriptionUnderwriterIdKey.AddChild(this.currentData.UnderwriterId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.SubscriptionExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.SubscriptionKey.Add(this.currentData.SubscriptionId, this);
            this.Table.AddRow(this.currentData.SubscriptionId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.SubscriptionExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.SubscriptionKey.Remove(this.currentData.SubscriptionId);
            this.Table.DataModel.OfferingSubscriptionOfferingIdKey.RemoveChild(this.currentData.OfferingId, this);
            this.Table.DataModel.UnderwriterSubscriptionUnderwriterIdKey.RemoveChild(this.currentData.UnderwriterId, this);
            int index = this.Table.BinarySearch(this.currentData.SubscriptionId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="subscriptionData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(SubscriptionData subscriptionData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = subscriptionData;
            if (this.previousData.OfferingId != this.currentData.OfferingId)
            {
                this.Table.DataModel.OfferingSubscriptionOfferingIdKey.UpdateChild(this.previousData.OfferingId, this.currentData.OfferingId, this);
            }

            if (this.previousData.UnderwriterId != this.currentData.UnderwriterId)
            {
                this.Table.DataModel.UnderwriterSubscriptionUnderwriterIdKey.UpdateChild(this.previousData.UnderwriterId, this.currentData.UnderwriterId, this);
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.SubscriptionExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.SubscriptionExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.SubscriptionId != this.currentData.SubscriptionId)
            {
                this.Table.RemoveRow(this.previousData.SubscriptionId);
                this.Table.AddRow(this.currentData.SubscriptionId, this);
                this.Table.DataModel.SubscriptionKey.Update(this.previousData.SubscriptionId, this.currentData.SubscriptionId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(SubscriptionRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Underwriter table.
    /// </summary>
    public class UnderwriterRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Address1", "Address2", "City", "CountryId", "DateCreated", "DateModified", "DateOfBirth", "Email", "ExternalId0", "Name", "Phone", "PostalCode", "PrimaryContact", "ProvinceId", "RowVersion", "UnderwriterId" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private UnderwriterData currentData = new UnderwriterData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private UnderwriterData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwriterRow"/> class.
        /// </summary>
        /// <param name="underwriterTable">The parent table.</param>
        /// <param name="underwriterData">The initial data.</param>
        internal UnderwriterRow(UnderwriterTable underwriterTable, UnderwriterData underwriterData)
        {
            this.Table = underwriterTable;
            this.currentData = underwriterData;
        }

        /// <summary>
        /// Gets the Address1.
        /// </summary>
        public string Address1
        {
            get
            {
                return this.currentData.Address1;
            }
        }

        /// <summary>
        /// Gets the Address2.
        /// </summary>
        public string Address2
        {
            get
            {
                return this.currentData.Address2;
            }
        }

        /// <summary>
        /// Gets the City.
        /// </summary>
        public string City
        {
            get
            {
                return this.currentData.City;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the DateOfBirth.
        /// </summary>
        public DateTime DateOfBirth
        {
            get
            {
                return this.currentData.DateOfBirth;
            }
        }

        /// <summary>
        /// Gets the Email.
        /// </summary>
        public string Email
        {
            get
            {
                return this.currentData.Email;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the Phone.
        /// </summary>
        public string Phone
        {
            get
            {
                return this.currentData.Phone;
            }
        }

        /// <summary>
        /// Gets the PostalCode.
        /// </summary>
        public string PostalCode
        {
            get
            {
                return this.currentData.PostalCode;
            }
        }

        /// <summary>
        /// Gets the PrimaryContact.
        /// </summary>
        public string PrimaryContact
        {
            get
            {
                return this.currentData.PrimaryContact;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        public Guid? ProvinceId
        {
            get
            {
                return this.currentData.ProvinceId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public UnderwriterTable Table { get; private set; }

        /// <summary>
        /// Gets the UnderwriterId.
        /// </summary>
        public Guid UnderwriterId
        {
            get
            {
                return this.currentData.UnderwriterId;
            }
        }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public UnderwriterData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryUnderwriterCountryIdKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceUnderwriterProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
            }

            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.UnderwriterExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.UnderwriterKey.Add(this.currentData.UnderwriterId, this);
            this.Table.AddRow(this.currentData.UnderwriterId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.UnderwriterExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.UnderwriterKey.Remove(this.currentData.UnderwriterId);
            this.Table.DataModel.CountryUnderwriterCountryIdKey.RemoveChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceUnderwriterProvinceIdKey.RemoveChild(this.currentData.ProvinceId.Value, this);
            }

            int index = this.Table.BinarySearch(this.currentData.UnderwriterId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="underwriterData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(UnderwriterData underwriterData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = underwriterData;
            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryUnderwriterCountryIdKey.UpdateChild(this.previousData.CountryId, this.currentData.CountryId, this);
            }

            if (this.previousData.ProvinceId != this.currentData.ProvinceId)
            {
                if (this.previousData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceUnderwriterProvinceIdKey.RemoveChild(this.previousData.ProvinceId.Value, this);
                }

                if (this.currentData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceUnderwriterProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
                }
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.UnderwriterExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.UnderwriterExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.UnderwriterId != this.currentData.UnderwriterId)
            {
                this.Table.RemoveRow(this.previousData.UnderwriterId);
                this.Table.AddRow(this.currentData.UnderwriterId, this);
                this.Table.DataModel.UnderwriterKey.Update(this.previousData.UnderwriterId, this.currentData.UnderwriterId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(UnderwriterRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// The Configuration table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ConfigurationTable : ObservableCollection<ConfigurationRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<ConfigurationData, object>[] setters = new Action<ConfigurationData, object>[4];

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal ConfigurationTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.ConfigurationId = (string)v;
            this.setters[1] = (d, v) => d.RowVersion = (long)v;
            this.setters[2] = (d, v) => d.Source = (string)v;
            this.setters[3] = (d, v) => d.TargetKey = (string)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        internal void AddRow(string configurationId, string source, ConfigurationRow configurationRow)
        {
            if (configurationRow == null)
            {
                throw new ArgumentNullException("configurationRow");
            }

            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.Insert(~index, configurationRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(string configurationId, string source)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ConfigurationRow midRow = this[mid];
                int compare;
                compare = string.CompareOrdinal(midRow.ConfigurationId, configurationId);
                if (compare == 0)
                {
                    compare = string.CompareOrdinal(midRow.Source, source);
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        internal void RemoveRow(string configurationId, string source)
        {
            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            ConfigurationData configurationData = new ConfigurationData();
            configurationData.ConfigurationId = (string)transactionItem[2];
            configurationData.RowVersion = (long)transactionItem[3];
            configurationData.Source = (string)transactionItem[4];
            configurationData.TargetKey = (string)transactionItem[5];
            ConfigurationRow configurationRow = new ConfigurationRow(this, configurationData);
            configurationRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            string configurationId = (string)transactionItem[2];
            string source = (string)transactionItem[3];
            ConfigurationRow configurationRow = this.DataModel.ConfigurationKey.Find(configurationId, source);
            configurationRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            string configurationId = (string)transactionItem[2];
            string source = (string)transactionItem[3];
            int index = this.BinarySearch(configurationId, source);
            ConfigurationRow configurationRow = this[index];
            ConfigurationData configurationData = configurationRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 4; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](configurationData, transactionItem[bufferIndex + 1]);
            }

            configurationRow.Update(configurationData, transactionItem);
        }
    }

    /// <summary>
    /// The Country table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class CountryTable : ObservableCollection<CountryRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<CountryData, object>[] setters = new Action<CountryData, object>[5];

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal CountryTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Abbreviation = (string)v;
            this.setters[1] = (d, v) => d.CountryId = (Guid)v;
            this.setters[2] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[3] = (d, v) => d.Name = (string)v;
            this.setters[4] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        internal void AddRow(Guid countryId, CountryRow countryRow)
        {
            if (countryRow == null)
            {
                throw new ArgumentNullException("countryRow");
            }

            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.Insert(~index, countryRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid countryId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                CountryRow midRow = this[mid];
                int compare;
                compare = midRow.CountryId.CompareTo(countryId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        internal void RemoveRow(Guid countryId)
        {
            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            CountryData countryData = new CountryData();
            countryData.Abbreviation = (string)transactionItem[2];
            countryData.CountryId = (Guid)transactionItem[3];
            countryData.ExternalId0 = (string)transactionItem[4];
            countryData.Name = (string)transactionItem[5];
            countryData.RowVersion = (long)transactionItem[6];
            CountryRow countryRow = new CountryRow(this, countryData);
            countryRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid countryId = (Guid)transactionItem[2];
            CountryRow countryRow = this.DataModel.CountryKey.Find(countryId);
            countryRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid countryId = (Guid)transactionItem[2];
            int index = this.BinarySearch(countryId);
            CountryRow countryRow = this[index];
            CountryData countryData = countryRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](countryData, transactionItem[bufferIndex + 1]);
            }

            countryRow.Update(countryData, transactionItem);
        }
    }

    /// <summary>
    /// The Offering table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class OfferingTable : ObservableCollection<OfferingRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<OfferingData, object>[] setters = new Action<OfferingData, object>[12];

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal OfferingTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Age = (decimal)v;
            this.setters[1] = (d, v) => d.Coupon = (decimal)v;
            this.setters[2] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[3] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[4] = (d, v) => d.Description = (string)v;
            this.setters[5] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[6] = (d, v) => d.FaceValue = (decimal)v;
            this.setters[7] = (d, v) => d.FicoScore = (decimal)v;
            this.setters[8] = (d, v) => d.Maturity = (DateTime)v;
            this.setters[9] = (d, v) => d.Name = (string)v;
            this.setters[10] = (d, v) => d.OfferingId = (Guid)v;
            this.setters[11] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="offeringRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Offering", Justification = "Diagnostic message.")]
        internal void AddRow(Guid offeringId, OfferingRow offeringRow)
        {
            if (offeringRow == null)
            {
                throw new ArgumentNullException("offeringRow");
            }

            int index = this.BinarySearch(offeringId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("OfferingKey", new object[] { offeringId });
            }

            this.Insert(~index, offeringRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid offeringId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                OfferingRow midRow = this[mid];
                int compare;
                compare = midRow.OfferingId.CompareTo(offeringId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        internal void RemoveRow(Guid offeringId)
        {
            int index = this.BinarySearch(offeringId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            OfferingData offeringData = new OfferingData();
            offeringData.Age = (decimal)transactionItem[2];
            offeringData.Coupon = (decimal)transactionItem[3];
            offeringData.DateCreated = (DateTime)transactionItem[4];
            offeringData.DateModified = (DateTime)transactionItem[5];
            offeringData.Description = (string)transactionItem[6];
            offeringData.ExternalId0 = (string)transactionItem[7];
            offeringData.FaceValue = (decimal)transactionItem[8];
            offeringData.FicoScore = (decimal)transactionItem[9];
            offeringData.Maturity = (DateTime)transactionItem[10];
            offeringData.Name = (string)transactionItem[11];
            offeringData.OfferingId = (Guid)transactionItem[12];
            offeringData.RowVersion = (long)transactionItem[13];
            OfferingRow offeringRow = new OfferingRow(this, offeringData);
            offeringRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid offeringId = (Guid)transactionItem[2];
            OfferingRow offeringRow = this.DataModel.OfferingKey.Find(offeringId);
            offeringRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid offeringId = (Guid)transactionItem[2];
            int index = this.BinarySearch(offeringId);
            OfferingRow offeringRow = this[index];
            OfferingData offeringData = offeringRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](offeringData, transactionItem[bufferIndex + 1]);
            }

            offeringRow.Update(offeringData, transactionItem);
        }
    }

    /// <summary>
    /// The Province table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ProvinceTable : ObservableCollection<ProvinceRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<ProvinceData, object>[] setters = new Action<ProvinceData, object>[6];

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal ProvinceTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Abbreviation = (string)v;
            this.setters[1] = (d, v) => d.CountryId = (Guid)v;
            this.setters[2] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[3] = (d, v) => d.Name = (string)v;
            this.setters[4] = (d, v) => d.ProvinceId = (Guid)v;
            this.setters[5] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        internal void AddRow(Guid provinceId, ProvinceRow provinceRow)
        {
            if (provinceRow == null)
            {
                throw new ArgumentNullException("provinceRow");
            }

            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.Insert(~index, provinceRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid provinceId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ProvinceRow midRow = this[mid];
                int compare;
                compare = midRow.ProvinceId.CompareTo(provinceId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        internal void RemoveRow(Guid provinceId)
        {
            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            ProvinceData provinceData = new ProvinceData();
            provinceData.Abbreviation = (string)transactionItem[2];
            provinceData.CountryId = (Guid)transactionItem[3];
            provinceData.ExternalId0 = (string)transactionItem[4];
            provinceData.Name = (string)transactionItem[5];
            provinceData.ProvinceId = (Guid)transactionItem[6];
            provinceData.RowVersion = (long)transactionItem[7];
            ProvinceRow provinceRow = new ProvinceRow(this, provinceData);
            provinceRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid provinceId = (Guid)transactionItem[2];
            ProvinceRow provinceRow = this.DataModel.ProvinceKey.Find(provinceId);
            provinceRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid provinceId = (Guid)transactionItem[2];
            int index = this.BinarySearch(provinceId);
            ProvinceRow provinceRow = this[index];
            ProvinceData provinceData = provinceRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](provinceData, transactionItem[bufferIndex + 1]);
            }

            provinceRow.Update(provinceData, transactionItem);
        }
    }

    /// <summary>
    /// The Subscription table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class SubscriptionTable : ObservableCollection<SubscriptionRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<SubscriptionData, object>[] setters = new Action<SubscriptionData, object>[8];

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal SubscriptionTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[1] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[2] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[3] = (d, v) => d.FaceValue = (decimal)v;
            this.setters[4] = (d, v) => d.OfferingId = (Guid)v;
            this.setters[5] = (d, v) => d.RowVersion = (long)v;
            this.setters[6] = (d, v) => d.SubscriptionId = (Guid)v;
            this.setters[7] = (d, v) => d.UnderwriterId = (Guid)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        /// <param name="subscriptionRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Subscription", Justification = "Diagnostic message.")]
        internal void AddRow(Guid subscriptionId, SubscriptionRow subscriptionRow)
        {
            if (subscriptionRow == null)
            {
                throw new ArgumentNullException("subscriptionRow");
            }

            int index = this.BinarySearch(subscriptionId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("SubscriptionKey", new object[] { subscriptionId });
            }

            this.Insert(~index, subscriptionRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid subscriptionId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                SubscriptionRow midRow = this[mid];
                int compare;
                compare = midRow.SubscriptionId.CompareTo(subscriptionId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        internal void RemoveRow(Guid subscriptionId)
        {
            int index = this.BinarySearch(subscriptionId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            SubscriptionData subscriptionData = new SubscriptionData();
            subscriptionData.DateCreated = (DateTime)transactionItem[2];
            subscriptionData.DateModified = (DateTime)transactionItem[3];
            subscriptionData.ExternalId0 = (string)transactionItem[4];
            subscriptionData.FaceValue = (decimal)transactionItem[5];
            subscriptionData.OfferingId = (Guid)transactionItem[6];
            subscriptionData.RowVersion = (long)transactionItem[7];
            subscriptionData.SubscriptionId = (Guid)transactionItem[8];
            subscriptionData.UnderwriterId = (Guid)transactionItem[9];
            SubscriptionRow subscriptionRow = new SubscriptionRow(this, subscriptionData);
            subscriptionRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid subscriptionId = (Guid)transactionItem[2];
            SubscriptionRow subscriptionRow = this.DataModel.SubscriptionKey.Find(subscriptionId);
            subscriptionRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid subscriptionId = (Guid)transactionItem[2];
            int index = this.BinarySearch(subscriptionId);
            SubscriptionRow subscriptionRow = this[index];
            SubscriptionData subscriptionData = subscriptionRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](subscriptionData, transactionItem[bufferIndex + 1]);
            }

            subscriptionRow.Update(subscriptionData, transactionItem);
        }
    }

    /// <summary>
    /// The Underwriter table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class UnderwriterTable : ObservableCollection<UnderwriterRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<UnderwriterData, object>[] setters = new Action<UnderwriterData, object>[16];

        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwriterTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal UnderwriterTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Address1 = (string)v;
            this.setters[1] = (d, v) => d.Address2 = (string)v;
            this.setters[2] = (d, v) => d.City = (string)v;
            this.setters[3] = (d, v) => d.CountryId = (Guid)v;
            this.setters[4] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[5] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[6] = (d, v) => d.DateOfBirth = (DateTime)v;
            this.setters[7] = (d, v) => d.Email = (string)v;
            this.setters[8] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[9] = (d, v) => d.Name = (string)v;
            this.setters[10] = (d, v) => d.Phone = (string)v;
            this.setters[11] = (d, v) => d.PostalCode = (string)v;
            this.setters[12] = (d, v) => d.PrimaryContact = (string)v;
            this.setters[13] = (d, v) => d.ProvinceId = (Guid?)v;
            this.setters[14] = (d, v) => d.RowVersion = (long)v;
            this.setters[15] = (d, v) => d.UnderwriterId = (Guid)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <param name="underwriterRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Underwriter", Justification = "Diagnostic message.")]
        internal void AddRow(Guid underwriterId, UnderwriterRow underwriterRow)
        {
            if (underwriterRow == null)
            {
                throw new ArgumentNullException("underwriterRow");
            }

            int index = this.BinarySearch(underwriterId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("UnderwriterKey", new object[] { underwriterId });
            }

            this.Insert(~index, underwriterRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid underwriterId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                UnderwriterRow midRow = this[mid];
                int compare;
                compare = midRow.UnderwriterId.CompareTo(underwriterId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        internal void RemoveRow(Guid underwriterId)
        {
            int index = this.BinarySearch(underwriterId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            UnderwriterData underwriterData = new UnderwriterData();
            underwriterData.Address1 = (string)transactionItem[2];
            underwriterData.Address2 = (string)transactionItem[3];
            underwriterData.City = (string)transactionItem[4];
            underwriterData.CountryId = (Guid)transactionItem[5];
            underwriterData.DateCreated = (DateTime)transactionItem[6];
            underwriterData.DateModified = (DateTime)transactionItem[7];
            underwriterData.DateOfBirth = (DateTime)transactionItem[8];
            underwriterData.Email = (string)transactionItem[9];
            underwriterData.ExternalId0 = (string)transactionItem[10];
            underwriterData.Name = (string)transactionItem[11];
            underwriterData.Phone = (string)transactionItem[12];
            underwriterData.PostalCode = (string)transactionItem[13];
            underwriterData.PrimaryContact = (string)transactionItem[14];
            underwriterData.ProvinceId = (Guid?)transactionItem[15];
            underwriterData.RowVersion = (long)transactionItem[16];
            underwriterData.UnderwriterId = (Guid)transactionItem[17];
            UnderwriterRow underwriterRow = new UnderwriterRow(this, underwriterData);
            underwriterRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid underwriterId = (Guid)transactionItem[2];
            UnderwriterRow underwriterRow = this.DataModel.UnderwriterKey.Find(underwriterId);
            underwriterRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid underwriterId = (Guid)transactionItem[2];
            int index = this.BinarySearch(underwriterId);
            UnderwriterRow underwriterRow = this[index];
            UnderwriterData underwriterData = underwriterRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](underwriterData, transactionItem[bufferIndex + 1]);
            }

            underwriterRow.Update(underwriterData, transactionItem);
        }
    }

    /// <summary>
    /// A thread-safe DataSet able to handle transactions.
    /// </summary>
    public class DataModel : IDisposable
    {
        /// <summary>
        /// The number of records to merge during each cycle.
        /// </summary>
        private const int batchSize = 1024;

        /// <summary>
        /// The time to wait before processing another batch of transactions.
        /// </summary>
        private const int courtesyInterval = 10;

        /// <summary>
        /// The time to wait before polling the server for new transactions.
        /// </summary>
        private const int refreshInterval = 250;

        /// <summary>
        /// The channel bindings used to communicate with the web service.
        /// </summary>
        private Binding binding;

        /// <summary>
        /// The security token.
        /// </summary>
        private ClientSecurityToken clientSecurityToken;

        /// <summary>
        /// The communication exception handler.
        /// </summary>
        private ICommunicationExceptionHandler communicationExceptionHandler;

        /// <summary>
        /// The client connection to the service.
        /// </summary>
        private DataServiceClient dataServiceClient;

        /// <summary>
        /// The unique identifier of the data set instance.
        /// </summary>
        private Guid dataSetId;

        /// <summary>
        /// The endpoint address of the web service.
        /// </summary>
        private EndpointAddress endpointAddress;

        /// <summary>
        /// An indication of whether the client is reading from the server.
        /// </summary>
        private bool isReading;

        /// <summary>
        /// The sequence of the latest transaction read from the server.
        /// </summary>
        private long sequence = -1;

        /// <summary>
        /// The synchronization context for the main window.
        /// </summary>
        private SynchronizationContext synchronizationContext;

        /// <summary>
        /// The vector to the transaction handlers for each of the tables.
        /// </summary>
        private Action<object[]>[] transactionHandlers = new Action<object[]>[6];

        /// <summary>
        /// The transaction log that is currently being merged.
        /// </summary>
        private List<object[]> transactionLog;

        /// <summary>
        /// The current index into the transaction log.
        /// </summary>
        private int transactionLogIndex;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataModel"/> class.
        /// </summary>
        /// <param name="binding">The WCF binding.</param>
        /// <param name="endpointAddress">The WCF endpoint address.</param>
        /// <param name="clientSecurityToken">The security token.</param>
        /// <param name="communicationExceptionHandler">The communication exception handler.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated by a tool.")]
        public DataModel(Binding binding, EndpointAddress endpointAddress, ClientSecurityToken clientSecurityToken, ICommunicationExceptionHandler communicationExceptionHandler)
        {
            this.binding = binding;
            this.endpointAddress = endpointAddress;
            this.clientSecurityToken = clientSecurityToken;
            this.communicationExceptionHandler = communicationExceptionHandler;
            this.transactionHandlers[0] = (d) => this.Configuration.MergeRecord(d);
            this.transactionHandlers[1] = (d) => this.Country.MergeRecord(d);
            this.transactionHandlers[2] = (d) => this.Offering.MergeRecord(d);
            this.transactionHandlers[3] = (d) => this.Province.MergeRecord(d);
            this.transactionHandlers[4] = (d) => this.Subscription.MergeRecord(d);
            this.transactionHandlers[5] = (d) => this.Underwriter.MergeRecord(d);
            this.Configuration = new ConfigurationTable(this);
            this.Country = new CountryTable(this);
            this.Offering = new OfferingTable(this);
            this.Province = new ProvinceTable(this);
            this.Subscription = new SubscriptionTable(this);
            this.Underwriter = new UnderwriterTable(this);
            this.ConfigurationKey = new ConfigurationKey(this);
            this.CountryExternalId0Key = new CountryExternalId0Key(this);
            this.CountryKey = new CountryKey(this);
            this.OfferingExternalId0Key = new OfferingExternalId0Key(this);
            this.OfferingKey = new OfferingKey(this);
            this.ProvinceExternalId0Key = new ProvinceExternalId0Key(this);
            this.ProvinceKey = new ProvinceKey(this);
            this.SubscriptionExternalId0Key = new SubscriptionExternalId0Key(this);
            this.SubscriptionKey = new SubscriptionKey(this);
            this.UnderwriterExternalId0Key = new UnderwriterExternalId0Key(this);
            this.UnderwriterKey = new UnderwriterKey(this);
            this.CountryProvinceKey = new CountryProvinceKey(this);
            this.CountryUnderwriterCountryIdKey = new CountryUnderwriterCountryIdKey(this);
            this.OfferingSubscriptionOfferingIdKey = new OfferingSubscriptionOfferingIdKey(this);
            this.ProvinceUnderwriterProvinceIdKey = new ProvinceUnderwriterProvinceIdKey(this);
            this.UnderwriterSubscriptionUnderwriterIdKey = new UnderwriterSubscriptionUnderwriterIdKey(this);
        }

        /// <summary>
        /// Gets the Configuration table.
        /// </summary>
        public ConfigurationTable Configuration { get; private set; }

        /// <summary>
        /// Gets a unique index for the Configuration table.
        /// </summary>
        public ConfigurationKey ConfigurationKey { get; private set; }

        /// <summary>
        /// Gets the Country table.
        /// </summary>
        public CountryTable Country { get; private set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryExternalId0Key CountryExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryKey CountryKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryProvinceKey CountryProvinceKey { get; set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryUnderwriterCountryIdKey CountryUnderwriterCountryIdKey { get; set; }

        /// <summary>
        /// Gets or sets an indication of whether the background thread that reconciles the client data model is running or not.
        /// </summary>
        public bool IsReading
        {
            get
            {
                return this.isReading;
            }

            set
            {
                if (this.isReading != value)
                {
                    if (this.isReading = value)
                    {
                        this.synchronizationContext = SynchronizationContext.Current;
                        this.ReadTransactionsAsync(null);
                    }
                }
            }
        }

        /// <summary>
        /// Gets the Offering table.
        /// </summary>
        public OfferingTable Offering { get; private set; }

        /// <summary>
        /// Gets a unique index for the Offering table.
        /// </summary>
        public OfferingExternalId0Key OfferingExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Offering table.
        /// </summary>
        public OfferingKey OfferingKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Offering table.
        /// </summary>
        public OfferingSubscriptionOfferingIdKey OfferingSubscriptionOfferingIdKey { get; set; }

        /// <summary>
        /// Gets the Province table.
        /// </summary>
        public ProvinceTable Province { get; private set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceExternalId0Key ProvinceExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceKey ProvinceKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Province table.
        /// </summary>
        public ProvinceUnderwriterProvinceIdKey ProvinceUnderwriterProvinceIdKey { get; set; }

        /// <summary>
        /// Gets the Subscription table.
        /// </summary>
        public SubscriptionTable Subscription { get; private set; }

        /// <summary>
        /// Gets a unique index for the Subscription table.
        /// </summary>
        public SubscriptionExternalId0Key SubscriptionExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Subscription table.
        /// </summary>
        public SubscriptionKey SubscriptionKey { get; private set; }

        /// <summary>
        /// Gets the Underwriter table.
        /// </summary>
        public UnderwriterTable Underwriter { get; private set; }

        /// <summary>
        /// Gets a unique index for the Underwriter table.
        /// </summary>
        public UnderwriterExternalId0Key UnderwriterExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Underwriter table.
        /// </summary>
        public UnderwriterKey UnderwriterKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Underwriter table.
        /// </summary>
        public UnderwriterSubscriptionUnderwriterIdKey UnderwriterSubscriptionUnderwriterIdKey { get; set; }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Releases the resources used by the MarshalByValueComponent.
        /// </summary>
        /// <param name="isDisposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        protected virtual void Dispose(bool isDisposing)
        {
            if (isDisposing)
            {
            }
        }

        /// <summary>
        /// Clears the data model.
        /// </summary>
        private void Clear()
        {
            this.Configuration.Clear();
            this.Country.Clear();
            this.Offering.Clear();
            this.Province.Clear();
            this.Subscription.Clear();
            this.Underwriter.Clear();
            this.ConfigurationKey.Clear();
            this.CountryExternalId0Key.Clear();
            this.CountryKey.Clear();
            this.OfferingExternalId0Key.Clear();
            this.OfferingKey.Clear();
            this.ProvinceExternalId0Key.Clear();
            this.ProvinceKey.Clear();
            this.SubscriptionExternalId0Key.Clear();
            this.SubscriptionKey.Clear();
            this.UnderwriterExternalId0Key.Clear();
            this.UnderwriterKey.Clear();
            this.CountryProvinceKey.Clear();
            this.CountryUnderwriterCountryIdKey.Clear();
            this.OfferingSubscriptionOfferingIdKey.Clear();
            this.ProvinceUnderwriterProvinceIdKey.Clear();
            this.UnderwriterSubscriptionUnderwriterIdKey.Clear();
        }

        /// <summary>
        /// Merge the data from the service into the client's data model.
        /// </summary>
        /// <param name="state">The (unused) thread state.</param>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Calls user code.")]
        private void MergeTransactions(object state)
        {
            int batchCounter = 0;
            while (batchCounter++ < DataModel.batchSize)
            {
                if (this.transactionLogIndex < 0)
                {
                    if (this.isReading)
                    {
                        new Task(async () =>
                        {
                            await Task.Delay(DataModel.refreshInterval);
                            this.synchronizationContext.Post(this.ReadTransactionsAsync, null);
                        }).Start();
                    }

                    return;
                }

                object[] transactionItem = this.transactionLog[this.transactionLogIndex--];
                try
                {
                    this.transactionHandlers[(int)transactionItem[0]](transactionItem);
                }
                catch
                {
                }
            }

            new Task(async () =>
            {
                await Task.Delay(DataModel.courtesyInterval);
                this.synchronizationContext.Post(this.MergeTransactions, null);
            }).Start();
        }

        /// <summary>
        /// Handles a faulted channel.
        /// </summary>
        /// <param name="sender">The object that originated the event.</param>
        /// <param name="eventArgs">The event data.</param>
        private void OnChannelFaulted(object sender, EventArgs eventArgs)
        {
            this.dataServiceClient = new DataServiceClient(this.binding, this.endpointAddress, this.clientSecurityToken);
            this.dataServiceClient.InnerChannel.Faulted += this.OnChannelFaulted;
        }

        /// <summary>
        /// Start the task of reading transactions from the server.
        /// </summary>
        /// <param name="state">The (unused) thread state.</param>
        private async void ReadTransactionsAsync(object state)
        {
            try
            {
                if (this.dataServiceClient == null || dataServiceClient.State != CommunicationState.Opened)
                {
                    this.OnChannelFaulted(this, new EventArgs());
                }

                DataHeader dataHeader = await dataServiceClient.ReadAsync(this.dataSetId, this.sequence);
                Guid dataSetId = dataHeader.Identifier;
                this.sequence = dataHeader.Sequence;
                this.transactionLog = dataHeader.Data;
                this.transactionLogIndex = this.transactionLog.Count - 1;
                if (dataSetId != this.dataSetId)
                {
                    this.dataSetId = dataSetId;
                    this.Clear();
                }

                this.MergeTransactions(null);
            }
            catch (TimeoutException)
            {
                new Task(() =>
                {
                    this.synchronizationContext.Post(ReadTransactionsAsync, null);
                }).Start();
            }
            catch (CommunicationException communicationException)
            {
                if (this.communicationExceptionHandler.HandleException(communicationException, "ReadOperation"))
                {
                    new Task(async () =>
                    {
                        await Task.Delay(DataModel.refreshInterval);
                        this.synchronizationContext.Post(ReadTransactionsAsync, null);
                    }).Start();
                }
            }
        }
    }

    /// <summary>
    /// A compound key for finding objects in the ConfigurationKey index.
    /// </summary>
    internal struct ConfigurationKeySet : IComparable<ConfigurationKeySet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationKeySet"/> struct.
        /// </summary>
        /// <param name="configurationId">A ConfigurationId component of the key.</param>
        /// <param name="source">A Source component of the key.</param>
        public ConfigurationKeySet(string configurationId, string source)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            this.ConfigurationId = configurationId;
            this.Source = source;
        }

        /// <summary>
        /// Gets the ConfigurationId.
        /// </summary>
        public string ConfigurationId { get; private set; }

        /// <summary>
        /// Gets the Source.
        /// </summary>
        public string Source { get; private set; }

        /// <summary>
        /// Equality Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the two keys are equal, false otherwise.</returns>
        public static bool operator ==(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.Source == key2.Source && key1.ConfigurationId == key2.ConfigurationId;
        }

        /// <summary>
        /// Inequality Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the two keys are not equal, false otherwise.</returns>
        public static bool operator !=(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.Source != key2.Source || key1.ConfigurationId != key2.ConfigurationId;
        }

        /// <summary>
        /// Less than Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the key1 is less than key2, false otherwise.</returns>
        public static bool operator <(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.CompareTo(key2) == -1;
        }

        /// <summary>
        /// Greater than Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the key1 is greater than key2, false otherwise.</returns>
        public static bool operator >(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.CompareTo(key2) == 1;
        }

        /// <summary>
        /// Compares the current object with another object of the same type.
        /// </summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>
        /// Less than zero, this object is less than the other parameter.  Zero, this object is equal to other.  Greater than zero, this object is
        /// greater than other.
        /// </returns>
        public int CompareTo(ConfigurationKeySet other)
        {
            int compare0 = string.CompareOrdinal(other.ConfigurationId, this.ConfigurationId);
            if (compare0 != 0)
            {
                return compare0;
            }

            return string.CompareOrdinal(other.Source, this.Source);
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object obj)
        {
            return this.Source == ((ConfigurationKeySet)obj).Source && this.ConfigurationId == ((ConfigurationKeySet)obj).ConfigurationId;
        }

        /// <summary>
        /// Serves as the hash function.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int configurationIdHashCode = 0;
            if (this.ConfigurationId != null)
            {
                configurationIdHashCode = this.ConfigurationId.GetHashCode();
            }

            int sourceHashCode = 0;
            if (this.Source != null)
            {
                sourceHashCode = this.Source.GetHashCode();
            }

            return configurationIdHashCode + sourceHashCode;
        }
    }

    /// <summary>
    /// Unique key index for the Configuration table.
    /// </summary>
    public class ConfigurationKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<ConfigurationKeySet, ConfigurationRow> dictionary = new Dictionary<ConfigurationKeySet, ConfigurationRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ConfigurationKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ConfigurationRow Find(string configurationId, string source)
        {
            ConfigurationRow configurationRow;
            this.dictionary.TryGetValue(new ConfigurationKeySet(configurationId, source), out configurationRow);
            return configurationRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The <see cref="ConfigurationRow"/> to be added to the index.</param>
        internal void Add(string configurationId, string source, ConfigurationRow configurationRow)
        {
            ConfigurationKeySet configurationKeySet = new ConfigurationKeySet(configurationId, source);
            if (this.dictionary.ContainsKey(configurationKeySet))
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.dictionary.Add(configurationKeySet, configurationRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        internal void Remove(string configurationId, string source)
        {
            this.dictionary.Remove(new ConfigurationKeySet(configurationId, source));
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldConfigurationId">The old ConfigurationId key element.</param>
        /// <param name="oldSource">The old Source key element.</param>
        /// <param name="newConfigurationId">The new ConfigurationId key element.</param>
        /// <param name="newSource">The new Source key element.</param>
        internal void Update(string oldConfigurationId, string oldSource, string newConfigurationId, string newSource)
        {
            ConfigurationKeySet oldConfigurationKeySet = new ConfigurationKeySet(oldConfigurationId, oldSource);
            ConfigurationRow configurationRow = this.dictionary[oldConfigurationKeySet];
            this.dictionary.Remove(oldConfigurationKeySet);
            this.dictionary.Add(new ConfigurationKeySet(newConfigurationId, newSource), configurationRow);
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, CountryRow> dictionary = new Dictionary<string, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CountryRow Find(string externalId0)
        {
            CountryRow countryRow;
            this.dictionary.TryGetValue(externalId0, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        internal void Add(string externalId0, CountryRow countryRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("CountryExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, countryRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, CountryRow> dictionary = new Dictionary<Guid, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CountryRow Find(Guid countryId)
        {
            CountryRow countryRow;
            this.dictionary.TryGetValue(countryId, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        internal void Add(Guid countryId, CountryRow countryRow)
        {
            if (this.dictionary.ContainsKey(countryId))
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.dictionary.Add(countryId, countryRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid countryId)
        {
            return this.dictionary.ContainsKey(countryId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        internal void Remove(Guid countryId)
        {
            this.dictionary.Remove(countryId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        internal void Update(Guid oldCountryId, Guid newCountryId)
        {
            CountryRow countryRow = this.dictionary[oldCountryId];
            this.dictionary.Remove(oldCountryId);
            this.dictionary.Add(newCountryId, countryRow);
        }
    }

    /// <summary>
    /// Unique key index for the Offering table.
    /// </summary>
    public class OfferingExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, OfferingRow> dictionary = new Dictionary<string, OfferingRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal OfferingExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public OfferingRow Find(string externalId0)
        {
            OfferingRow offeringRow;
            this.dictionary.TryGetValue(externalId0, out offeringRow);
            return offeringRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="offeringRow">The <see cref="OfferingRow"/> to be added to the index.</param>
        internal void Add(string externalId0, OfferingRow offeringRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("OfferingExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, offeringRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Offering table.
    /// </summary>
    public class OfferingKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, OfferingRow> dictionary = new Dictionary<Guid, OfferingRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal OfferingKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public OfferingRow Find(Guid offeringId)
        {
            OfferingRow offeringRow;
            this.dictionary.TryGetValue(offeringId, out offeringRow);
            return offeringRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="offeringRow">The <see cref="OfferingRow"/> to be added to the index.</param>
        internal void Add(Guid offeringId, OfferingRow offeringRow)
        {
            if (this.dictionary.ContainsKey(offeringId))
            {
                throw new DuplicateKeyException("OfferingKey", new object[] { offeringId });
            }

            this.dictionary.Add(offeringId, offeringRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid offeringId)
        {
            return this.dictionary.ContainsKey(offeringId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        internal void Remove(Guid offeringId)
        {
            this.dictionary.Remove(offeringId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldOfferingId">The old OfferingId key element.</param>
        /// <param name="newOfferingId">The new OfferingId key element.</param>
        internal void Update(Guid oldOfferingId, Guid newOfferingId)
        {
            OfferingRow offeringRow = this.dictionary[oldOfferingId];
            this.dictionary.Remove(oldOfferingId);
            this.dictionary.Add(newOfferingId, offeringRow);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, ProvinceRow> dictionary = new Dictionary<string, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProvinceRow Find(string externalId0)
        {
            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(externalId0, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        internal void Add(string externalId0, ProvinceRow provinceRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("ProvinceExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, provinceRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, ProvinceRow> dictionary = new Dictionary<Guid, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProvinceRow Find(Guid provinceId)
        {
            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(provinceId, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        internal void Add(Guid provinceId, ProvinceRow provinceRow)
        {
            if (this.dictionary.ContainsKey(provinceId))
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.dictionary.Add(provinceId, provinceRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid provinceId)
        {
            return this.dictionary.ContainsKey(provinceId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        internal void Remove(Guid provinceId)
        {
            this.dictionary.Remove(provinceId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldProvinceId">The old ProvinceId key element.</param>
        /// <param name="newProvinceId">The new ProvinceId key element.</param>
        internal void Update(Guid oldProvinceId, Guid newProvinceId)
        {
            ProvinceRow provinceRow = this.dictionary[oldProvinceId];
            this.dictionary.Remove(oldProvinceId);
            this.dictionary.Add(newProvinceId, provinceRow);
        }
    }

    /// <summary>
    /// Unique key index for the Subscription table.
    /// </summary>
    public class SubscriptionExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, SubscriptionRow> dictionary = new Dictionary<string, SubscriptionRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal SubscriptionExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public SubscriptionRow Find(string externalId0)
        {
            SubscriptionRow subscriptionRow;
            this.dictionary.TryGetValue(externalId0, out subscriptionRow);
            return subscriptionRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="subscriptionRow">The <see cref="SubscriptionRow"/> to be added to the index.</param>
        internal void Add(string externalId0, SubscriptionRow subscriptionRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("SubscriptionExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, subscriptionRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Subscription table.
    /// </summary>
    public class SubscriptionKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, SubscriptionRow> dictionary = new Dictionary<Guid, SubscriptionRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal SubscriptionKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public SubscriptionRow Find(Guid subscriptionId)
        {
            SubscriptionRow subscriptionRow;
            this.dictionary.TryGetValue(subscriptionId, out subscriptionRow);
            return subscriptionRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        /// <param name="subscriptionRow">The <see cref="SubscriptionRow"/> to be added to the index.</param>
        internal void Add(Guid subscriptionId, SubscriptionRow subscriptionRow)
        {
            if (this.dictionary.ContainsKey(subscriptionId))
            {
                throw new DuplicateKeyException("SubscriptionKey", new object[] { subscriptionId });
            }

            this.dictionary.Add(subscriptionId, subscriptionRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="subscriptionId">The SubscriptionId key element.</param>
        internal void Remove(Guid subscriptionId)
        {
            this.dictionary.Remove(subscriptionId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldSubscriptionId">The old SubscriptionId key element.</param>
        /// <param name="newSubscriptionId">The new SubscriptionId key element.</param>
        internal void Update(Guid oldSubscriptionId, Guid newSubscriptionId)
        {
            SubscriptionRow subscriptionRow = this.dictionary[oldSubscriptionId];
            this.dictionary.Remove(oldSubscriptionId);
            this.dictionary.Add(newSubscriptionId, subscriptionRow);
        }
    }

    /// <summary>
    /// Unique key index for the Underwriter table.
    /// </summary>
    public class UnderwriterExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, UnderwriterRow> dictionary = new Dictionary<string, UnderwriterRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwriterExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal UnderwriterExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public UnderwriterRow Find(string externalId0)
        {
            UnderwriterRow underwriterRow;
            this.dictionary.TryGetValue(externalId0, out underwriterRow);
            return underwriterRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="underwriterRow">The <see cref="UnderwriterRow"/> to be added to the index.</param>
        internal void Add(string externalId0, UnderwriterRow underwriterRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("UnderwriterExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, underwriterRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Underwriter table.
    /// </summary>
    public class UnderwriterKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, UnderwriterRow> dictionary = new Dictionary<Guid, UnderwriterRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwriterKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal UnderwriterKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public UnderwriterRow Find(Guid underwriterId)
        {
            UnderwriterRow underwriterRow;
            this.dictionary.TryGetValue(underwriterId, out underwriterRow);
            return underwriterRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <param name="underwriterRow">The <see cref="UnderwriterRow"/> to be added to the index.</param>
        internal void Add(Guid underwriterId, UnderwriterRow underwriterRow)
        {
            if (this.dictionary.ContainsKey(underwriterId))
            {
                throw new DuplicateKeyException("UnderwriterKey", new object[] { underwriterId });
            }

            this.dictionary.Add(underwriterId, underwriterRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid underwriterId)
        {
            return this.dictionary.ContainsKey(underwriterId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        internal void Remove(Guid underwriterId)
        {
            this.dictionary.Remove(underwriterId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldUnderwriterId">The old UnderwriterId key element.</param>
        /// <param name="newUnderwriterId">The new UnderwriterId key element.</param>
        internal void Update(Guid oldUnderwriterId, Guid newUnderwriterId)
        {
            UnderwriterRow underwriterRow = this.dictionary[oldUnderwriterId];
            this.dictionary.Remove(oldUnderwriterId);
            this.dictionary.Add(newUnderwriterId, underwriterRow);
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Province table.
    /// </summary>
    public class CountryProvinceKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<ProvinceRow>> dictionary = new Dictionary<Guid, HashSet<ProvinceRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="ProvinceRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="ProvinceRow"/> rows.</returns>
        public List<ProvinceRow> GetProvinceRows(Guid countryId)
        {
            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        internal void AddChild(Guid countryId, ProvinceRow provinceRow)
        {
            if (!this.DataModel.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryProvinceKey");
            }

            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(provinceRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, countryId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        internal void RemoveChild(Guid countryId, ProvinceRow provinceRow)
        {
            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, countryId));
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="provinceRow">The child <see cref="ProvinceRow"/>.</param>
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, ProvinceRow provinceRow)
        {
            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(provinceRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newCountryId, oldCountryId));
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Underwriter table.
    /// </summary>
    public class CountryUnderwriterCountryIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<UnderwriterRow>> dictionary = new Dictionary<Guid, HashSet<UnderwriterRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryUnderwriterCountryIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryUnderwriterCountryIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="UnderwriterRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="UnderwriterRow"/> rows.</returns>
        public List<UnderwriterRow> GetUnderwriterRows(Guid countryId)
        {
            HashSet<UnderwriterRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<UnderwriterRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="UnderwriterRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="underwriterRow">The child row.</param>
        internal void AddChild(Guid countryId, UnderwriterRow underwriterRow)
        {
            if (!this.DataModel.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryUnderwriterCountryIdKey");
            }

            HashSet<UnderwriterRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<UnderwriterRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(underwriterRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, countryId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="UnderwriterRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="underwriterRow">The child row.</param>
        internal void RemoveChild(Guid countryId, UnderwriterRow underwriterRow)
        {
            HashSet<UnderwriterRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(underwriterRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, countryId));
        }

        /// <summary>
        /// Removes a <see cref="UnderwriterRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="underwriterRow">The child <see cref="UnderwriterRow"/>.</param>
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, UnderwriterRow underwriterRow)
        {
            HashSet<UnderwriterRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(underwriterRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<UnderwriterRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(underwriterRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newCountryId, oldCountryId));
        }
    }

    /// <summary>
    /// Relates rows in the Offering table to the Subscription table.
    /// </summary>
    public class OfferingSubscriptionOfferingIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<SubscriptionRow>> dictionary = new Dictionary<Guid, HashSet<SubscriptionRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="OfferingSubscriptionOfferingIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal OfferingSubscriptionOfferingIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="SubscriptionRow"/> rows.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <returns>A collection of child <see cref="SubscriptionRow"/> rows.</returns>
        public List<SubscriptionRow> GetSubscriptionRows(Guid offeringId)
        {
            HashSet<SubscriptionRow> hashSet;
            if (!this.dictionary.TryGetValue(offeringId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="subscriptionRow">The child row.</param>
        internal void AddChild(Guid offeringId, SubscriptionRow subscriptionRow)
        {
            if (!this.DataModel.OfferingKey.ContainsKey(offeringId))
            {
                throw new ConstraintException("insert", "OfferingSubscriptionOfferingIdKey");
            }

            HashSet<SubscriptionRow> hashSet;
            if (!this.dictionary.TryGetValue(offeringId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
                this.dictionary.Add(offeringId, hashSet);
            }

            hashSet.Add(subscriptionRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, offeringId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="offeringId">The OfferingId key element.</param>
        /// <param name="subscriptionRow">The child row.</param>
        internal void RemoveChild(Guid offeringId, SubscriptionRow subscriptionRow)
        {
            HashSet<SubscriptionRow> hashSet;
            if (this.dictionary.TryGetValue(offeringId, out hashSet))
            {
                hashSet.Remove(subscriptionRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(offeringId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, offeringId));
        }

        /// <summary>
        /// Removes a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="oldOfferingId">The old OfferingId key element.</param>
        /// <param name="newOfferingId">The new OfferingId key element.</param>
        /// <param name="subscriptionRow">The child <see cref="SubscriptionRow"/>.</param>
        internal void UpdateChild(Guid oldOfferingId, Guid newOfferingId, SubscriptionRow subscriptionRow)
        {
            HashSet<SubscriptionRow> hashSet;
            if (this.dictionary.TryGetValue(oldOfferingId, out hashSet))
            {
                hashSet.Remove(subscriptionRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldOfferingId);
                }
            }

            if (!this.dictionary.TryGetValue(newOfferingId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
                this.dictionary.Add(newOfferingId, hashSet);
            }

            hashSet.Add(subscriptionRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newOfferingId, oldOfferingId));
        }
    }

    /// <summary>
    /// Relates rows in the Province table to the Underwriter table.
    /// </summary>
    public class ProvinceUnderwriterProvinceIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<UnderwriterRow>> dictionary = new Dictionary<Guid, HashSet<UnderwriterRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceUnderwriterProvinceIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceUnderwriterProvinceIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="UnderwriterRow"/> rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>A collection of child <see cref="UnderwriterRow"/> rows.</returns>
        public List<UnderwriterRow> GetUnderwriterRows(Guid provinceId)
        {
            HashSet<UnderwriterRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<UnderwriterRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="UnderwriterRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="underwriterRow">The child row.</param>
        internal void AddChild(Guid provinceId, UnderwriterRow underwriterRow)
        {
            if (!this.DataModel.ProvinceKey.ContainsKey(provinceId))
            {
                throw new ConstraintException("insert", "ProvinceUnderwriterProvinceIdKey");
            }

            HashSet<UnderwriterRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<UnderwriterRow>();
                this.dictionary.Add(provinceId, hashSet);
            }

            hashSet.Add(underwriterRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, provinceId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="UnderwriterRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="underwriterRow">The child row.</param>
        internal void RemoveChild(Guid provinceId, UnderwriterRow underwriterRow)
        {
            HashSet<UnderwriterRow> hashSet;
            if (this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet.Remove(underwriterRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(provinceId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, provinceId));
        }
    }

    /// <summary>
    /// Relates rows in the Underwriter table to the Subscription table.
    /// </summary>
    public class UnderwriterSubscriptionUnderwriterIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<SubscriptionRow>> dictionary = new Dictionary<Guid, HashSet<SubscriptionRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="UnderwriterSubscriptionUnderwriterIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal UnderwriterSubscriptionUnderwriterIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="SubscriptionRow"/> rows.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <returns>A collection of child <see cref="SubscriptionRow"/> rows.</returns>
        public List<SubscriptionRow> GetSubscriptionRows(Guid underwriterId)
        {
            HashSet<SubscriptionRow> hashSet;
            if (!this.dictionary.TryGetValue(underwriterId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <param name="subscriptionRow">The child row.</param>
        internal void AddChild(Guid underwriterId, SubscriptionRow subscriptionRow)
        {
            if (!this.DataModel.UnderwriterKey.ContainsKey(underwriterId))
            {
                throw new ConstraintException("insert", "UnderwriterSubscriptionUnderwriterIdKey");
            }

            HashSet<SubscriptionRow> hashSet;
            if (!this.dictionary.TryGetValue(underwriterId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
                this.dictionary.Add(underwriterId, hashSet);
            }

            hashSet.Add(subscriptionRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, underwriterId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="underwriterId">The UnderwriterId key element.</param>
        /// <param name="subscriptionRow">The child row.</param>
        internal void RemoveChild(Guid underwriterId, SubscriptionRow subscriptionRow)
        {
            HashSet<SubscriptionRow> hashSet;
            if (this.dictionary.TryGetValue(underwriterId, out hashSet))
            {
                hashSet.Remove(subscriptionRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(underwriterId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, underwriterId));
        }

        /// <summary>
        /// Removes a <see cref="SubscriptionRow"/> child relation.
        /// </summary>
        /// <param name="oldUnderwriterId">The old UnderwriterId key element.</param>
        /// <param name="newUnderwriterId">The new UnderwriterId key element.</param>
        /// <param name="subscriptionRow">The child <see cref="SubscriptionRow"/>.</param>
        internal void UpdateChild(Guid oldUnderwriterId, Guid newUnderwriterId, SubscriptionRow subscriptionRow)
        {
            HashSet<SubscriptionRow> hashSet;
            if (this.dictionary.TryGetValue(oldUnderwriterId, out hashSet))
            {
                hashSet.Remove(subscriptionRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldUnderwriterId);
                }
            }

            if (!this.dictionary.TryGetValue(newUnderwriterId, out hashSet))
            {
                hashSet = new HashSet<SubscriptionRow>();
                this.dictionary.Add(newUnderwriterId, hashSet);
            }

            hashSet.Add(subscriptionRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newUnderwriterId, oldUnderwriterId));
        }
    }
}
#pragma warning disable SA1402
#pragma warning disable SA1649
