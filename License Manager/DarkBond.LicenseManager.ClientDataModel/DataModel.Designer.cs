// <auto-generated />
#pragma warning disable SA1402
#pragma warning disable SA1649
namespace DarkBond.LicenseManager
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using System.ServiceModel.Description;
    using System.Threading;
    using System.Threading.Tasks;
    using DarkBond.ClientModel;

    /// <summary>
    /// Abstract interface to a thread-safe, multi-tiered DataModel.
    /// </summary>
    [ServiceContract]
    public interface IDataService
    {
        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateConfiguration", ReplyAction = "http://tempuri.org/IDataModel/CreateConfigurationResponse")]
        Task CreateConfigurationAsync(string configurationId, string source, string targetKey);

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateCountry", ReplyAction = "http://tempuri.org/IDataModel/CreateCountryResponse")]
        Task CreateCountryAsync(string abbreviation, Guid countryId, string externalId0, string name);

        /// <summary>
        /// Creates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateCustomer", ReplyAction = "http://tempuri.org/IDataModel/CreateCustomerResponse")]
        Task CreateCustomerAsync(string address1, string address2, string city, string company, Guid countryId, Guid customerId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId);

        /// <summary>
        /// Creates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateLicense", ReplyAction = "http://tempuri.org/IDataModel/CreateLicenseResponse")]
        Task CreateLicenseAsync(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid productId, LicenseTypeCode runtimeLicenseTypeCode);

        /// <summary>
        /// Creates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateLicenseType", ReplyAction = "http://tempuri.org/IDataModel/CreateLicenseTypeResponse")]
        Task CreateLicenseTypeAsync(string description, LicenseTypeCode licenseTypeCode);

        /// <summary>
        /// Creates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateProduct", ReplyAction = "http://tempuri.org/IDataModel/CreateProductResponse")]
        Task CreateProductAsync(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId);

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/CreateProvince", ReplyAction = "http://tempuri.org/IDataModel/CreateProvinceResponse")]
        Task CreateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId);

        /// <summary>
        /// Asynchronously deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="source">The Source key element.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteConfiguration", ReplyAction = "http://tempuri.org/IDataModel/DeleteConfigurationResponse")]
        Task DeleteConfigurationAsync(string configurationId, long rowVersion, string source);

        /// <summary>
        /// Asynchronously deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteCountry", ReplyAction = "http://tempuri.org/IDataModel/DeleteCountryResponse")]
        Task DeleteCountryAsync(Guid countryId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Customer record.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteCustomer", ReplyAction = "http://tempuri.org/IDataModel/DeleteCustomerResponse")]
        Task DeleteCustomerAsync(Guid customerId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a License record.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteLicense", ReplyAction = "http://tempuri.org/IDataModel/DeleteLicenseResponse")]
        Task DeleteLicenseAsync(Guid licenseId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a LicenseType record.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteLicenseType", ReplyAction = "http://tempuri.org/IDataModel/DeleteLicenseTypeResponse")]
        Task DeleteLicenseTypeAsync(LicenseTypeCode licenseTypeCode, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Product record.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteProduct", ReplyAction = "http://tempuri.org/IDataModel/DeleteProductResponse")]
        Task DeleteProductAsync(Guid productId, long rowVersion);

        /// <summary>
        /// Asynchronously deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/DeleteProvince", ReplyAction = "http://tempuri.org/IDataModel/DeleteProvinceResponse")]
        Task DeleteProvinceAsync(Guid provinceId, long rowVersion);

        /// <summary>
        /// Reads the latest data from the service.
        /// </summary>
        /// <param name="identifier">A unique identifier of an instance of the data.</param>
        /// <param name="sequence">The sequence of the client data model.</param>
        /// <returns>An array of records that will reconcile the client data model to the server.</returns>
        [OperationContract(Action = "http://tempuri.org/IDataModel/Read", ReplyAction = "http://tempuri.org/IDataModel/ReadResponse")]
        [ServiceKnownType(typeof(LicenseTypeCode))]
        Task<DataHeader> ReadAsync(Guid identifier, long sequence);

        /// <summary>
        /// Asynchronously updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateConfiguration", ReplyAction = "http://tempuri.org/IDataModel/UpdateConfigurationResponse")]
        Task UpdateConfigurationAsync(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey);

        /// <summary>
        /// Asynchronously updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateCountry", ReplyAction = "http://tempuri.org/IDataModel/UpdateCountryResponse")]
        Task UpdateCountryAsync(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Customer record.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="company">The required value for the company column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="customerIdKey">The CustomerId key element.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="firstName">The required value for the firstName column.</param>
        /// <param name="lastName">The optional value for the lastName column.</param>
        /// <param name="middleName">The required value for the middleName column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="provinceId">The required value for the provinceId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateCustomer", ReplyAction = "http://tempuri.org/IDataModel/UpdateCustomerResponse")]
        Task UpdateCustomerAsync(string address1, string address2, string city, string company, Guid countryId, Guid customerId, Guid customerIdKey, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion);

        /// <summary>
        /// Asynchronously updates a License record.
        /// </summary>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="developerLicenseTypeCode">The optional value for the developerLicenseTypeCode column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="licenseId">The optional value for the licenseId column.</param>
        /// <param name="licenseIdKey">The LicenseId key element.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The optional value for the runtimeLicenseTypeCode column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateLicense", ReplyAction = "http://tempuri.org/IDataModel/UpdateLicenseResponse")]
        Task UpdateLicenseAsync(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid licenseIdKey, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode);

        /// <summary>
        /// Asynchronously updates a LicenseType record.
        /// </summary>
        /// <param name="description">The optional value for the description column.</param>
        /// <param name="licenseTypeCode">The optional value for the licenseTypeCode column.</param>
        /// <param name="licenseTypeCodeKey">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateLicenseType", ReplyAction = "http://tempuri.org/IDataModel/UpdateLicenseTypeResponse")]
        Task UpdateLicenseTypeAsync(string description, LicenseTypeCode licenseTypeCode, LicenseTypeCode licenseTypeCodeKey, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Product record.
        /// </summary>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="productIdKey">The ProductId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateProduct", ReplyAction = "http://tempuri.org/IDataModel/UpdateProductResponse")]
        Task UpdateProductAsync(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, Guid productIdKey, long rowVersion);

        /// <summary>
        /// Asynchronously updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/UpdateProvince", ReplyAction = "http://tempuri.org/IDataModel/UpdateProvinceResponse")]
        Task UpdateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion);
    }

    /// <summary>
    /// Network client connection to a shared data model.
    /// </summary>
    public class DataServiceClient : ClientBase<IDataService>, IDataService
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataServiceClient"/> class.
        /// </summary>
        /// <param name="binding">The WCF binding.</param>
        /// <param name="endpointAddress">The endpoint address.</param>
        /// <param name="securityToken">The security token.</param>
        public DataServiceClient(Binding binding, EndpointAddress endpointAddress, SecurityToken securityToken) : base(binding, endpointAddress)
        {
            this.ChannelFactory.Endpoint.EndpointBehaviors.Remove(typeof(ClientCredentials));
            this.ChannelFactory.Endpoint.EndpointBehaviors.Add(new SecurityTokenEndpointBehavior(securityToken));
        }

        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        public Task CreateConfigurationAsync(string configurationId, string source, string targetKey)
        {
            return base.Channel.CreateConfigurationAsync(configurationId, source, targetKey);
        }

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        public Task CreateCountryAsync(string abbreviation, Guid countryId, string externalId0, string name)
        {
            return base.Channel.CreateCountryAsync(abbreviation, countryId, externalId0, name);
        }

        /// <summary>
        /// Creates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        public Task CreateCustomerAsync(string address1, string address2, string city, string company, Guid countryId, Guid customerId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId)
        {
            return base.Channel.CreateCustomerAsync(address1, address2, city, company, countryId, customerId, dateCreated, dateModified, dateOfBirth, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceId);
        }

        /// <summary>
        /// Creates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        public Task CreateLicenseAsync(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid productId, LicenseTypeCode runtimeLicenseTypeCode)
        {
            return base.Channel.CreateLicenseAsync(customerId, dateCreated, dateModified, developerLicenseTypeCode, externalId0, licenseId, productId, runtimeLicenseTypeCode);
        }

        /// <summary>
        /// Creates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        public Task CreateLicenseTypeAsync(string description, LicenseTypeCode licenseTypeCode)
        {
            return base.Channel.CreateLicenseTypeAsync(description, licenseTypeCode);
        }

        /// <summary>
        /// Creates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        public Task CreateProductAsync(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId)
        {
            return base.Channel.CreateProductAsync(dateCreated, dateModified, description, externalId0, name, productId);
        }

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        public Task CreateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId)
        {
            return base.Channel.CreateProvinceAsync(abbreviation, countryId, externalId0, name, provinceId);
        }

        /// <summary>
        /// Asynchronously deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        /// <param name="source">The Source key element.</param>
        public Task DeleteConfigurationAsync(string configurationId, long rowVersion, string source)
        {
            return base.Channel.DeleteConfigurationAsync(configurationId, rowVersion, source);
        }

        /// <summary>
        /// Asynchronously deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteCountryAsync(Guid countryId, long rowVersion)
        {
            return base.Channel.DeleteCountryAsync(countryId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Customer record.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteCustomerAsync(Guid customerId, long rowVersion)
        {
            return base.Channel.DeleteCustomerAsync(customerId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a License record.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteLicenseAsync(Guid licenseId, long rowVersion)
        {
            return base.Channel.DeleteLicenseAsync(licenseId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a LicenseType record.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteLicenseTypeAsync(LicenseTypeCode licenseTypeCode, long rowVersion)
        {
            return base.Channel.DeleteLicenseTypeAsync(licenseTypeCode, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Product record.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteProductAsync(Guid productId, long rowVersion)
        {
            return base.Channel.DeleteProductAsync(productId, rowVersion);
        }

        /// <summary>
        /// Asynchronously deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the rowVersion column.</param>
        public Task DeleteProvinceAsync(Guid provinceId, long rowVersion)
        {
            return base.Channel.DeleteProvinceAsync(provinceId, rowVersion);
        }

        /// <summary>
        /// Reads the latest data from the service.
        /// </summary>
        /// <param name="identifier">A unique identifier of an instance of the data.</param>
        /// <param name="sequence">The sequence of the client data model.</param>
        /// <returns>An array of records that will reconcile the client data model to the server.</returns>
        public Task<DataHeader> ReadAsync(Guid identifier, long sequence)
        {
            return base.Channel.ReadAsync(identifier, sequence);
        }

        /// <summary>
        /// Asynchronously updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        public Task UpdateConfigurationAsync(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey)
        {
            return base.Channel.UpdateConfigurationAsync(configurationId, configurationIdKey, rowVersion, source, sourceKey, targetKey);
        }

        /// <summary>
        /// Asynchronously updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateCountryAsync(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion)
        {
            return base.Channel.UpdateCountryAsync(abbreviation, countryId, countryIdKey, externalId0, name, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Customer record.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="company">The required value for the company column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="customerIdKey">The CustomerId key element.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="firstName">The required value for the firstName column.</param>
        /// <param name="lastName">The optional value for the lastName column.</param>
        /// <param name="middleName">The required value for the middleName column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="provinceId">The required value for the provinceId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateCustomerAsync(string address1, string address2, string city, string company, Guid countryId, Guid customerId, Guid customerIdKey, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion)
        {
            return base.Channel.UpdateCustomerAsync(address1, address2, city, company, countryId, customerId, customerIdKey, dateCreated, dateModified, dateOfBirth, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceId, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a License record.
        /// </summary>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="developerLicenseTypeCode">The optional value for the developerLicenseTypeCode column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="licenseId">The optional value for the licenseId column.</param>
        /// <param name="licenseIdKey">The LicenseId key element.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The optional value for the runtimeLicenseTypeCode column.</param>
        public Task UpdateLicenseAsync(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid licenseIdKey, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode)
        {
            return base.Channel.UpdateLicenseAsync(customerId, dateCreated, dateModified, developerLicenseTypeCode, externalId0, licenseId, licenseIdKey, productId, rowVersion, runtimeLicenseTypeCode);
        }

        /// <summary>
        /// Asynchronously updates a LicenseType record.
        /// </summary>
        /// <param name="description">The optional value for the description column.</param>
        /// <param name="licenseTypeCode">The optional value for the licenseTypeCode column.</param>
        /// <param name="licenseTypeCodeKey">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateLicenseTypeAsync(string description, LicenseTypeCode licenseTypeCode, LicenseTypeCode licenseTypeCodeKey, long rowVersion)
        {
            return base.Channel.UpdateLicenseTypeAsync(description, licenseTypeCode, licenseTypeCodeKey, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Product record.
        /// </summary>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="productIdKey">The ProductId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateProductAsync(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, Guid productIdKey, long rowVersion)
        {
            return base.Channel.UpdateProductAsync(dateCreated, dateModified, description, externalId0, name, productId, productIdKey, rowVersion);
        }

        /// <summary>
        /// Asynchronously updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The optional value for the rowVersion column.</param>
        public Task UpdateProvinceAsync(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion)
        {
            return base.Channel.UpdateProvinceAsync(abbreviation, countryId, externalId0, name, provinceId, provinceIdKey, rowVersion);
        }
    }

    /// <summary>
    /// The fields of a ConfigurationRow.
    /// </summary>
    public sealed class ConfigurationData
    {
        /// <summary>
        /// Gets or sets the ConfigurationId.
        /// </summary>
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the Source.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the TargetKey.
        /// </summary>
        public string TargetKey { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ConfigurationData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ConfigurationData"/>.</returns>
        internal ConfigurationData Clone()
        {
            return (ConfigurationData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a CountryRow.
    /// </summary>
    public sealed class CountryData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="CountryData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="CountryData"/>.</returns>
        internal CountryData Clone()
        {
            return (CountryData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a CustomerRow.
    /// </summary>
    public sealed class CustomerData
    {
        /// <summary>
        /// Gets or sets the Address1.
        /// </summary>
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets the Address2.
        /// </summary>
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the Company.
        /// </summary>
        public string Company { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the CustomerId.
        /// </summary>
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the DateOfBirth.
        /// </summary>
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the Phone.
        /// </summary>
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets the PostalCode.
        /// </summary>
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid? ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="CustomerData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="CustomerData"/>.</returns>
        internal CustomerData Clone()
        {
            return (CustomerData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a LicenseRow.
    /// </summary>
    public sealed class LicenseData
    {
        /// <summary>
        /// Gets or sets the CustomerId.
        /// </summary>
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the DeveloperLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode DeveloperLicenseTypeCode { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the LicenseId.
        /// </summary>
        public Guid LicenseId { get; set; }

        /// <summary>
        /// Gets or sets the ProductId.
        /// </summary>
        public Guid ProductId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the RuntimeLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode RuntimeLicenseTypeCode { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="LicenseData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="LicenseData"/>.</returns>
        internal LicenseData Clone()
        {
            return (LicenseData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a LicenseTypeRow.
    /// </summary>
    public sealed class LicenseTypeData
    {
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the LicenseTypeCode.
        /// </summary>
        public LicenseTypeCode LicenseTypeCode { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="LicenseTypeData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="LicenseTypeData"/>.</returns>
        internal LicenseTypeData Clone()
        {
            return (LicenseTypeData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a ProductRow.
    /// </summary>
    public sealed class ProductData
    {
        /// <summary>
        /// Gets or sets the DateCreated.
        /// </summary>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the DateModified.
        /// </summary>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProductId.
        /// </summary>
        public Guid ProductId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ProductData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ProductData"/>.</returns>
        internal ProductData Clone()
        {
            return (ProductData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// The fields of a ProvinceRow.
    /// </summary>
    public sealed class ProvinceData
    {
        /// <summary>
        /// Gets or sets the Abbreviation.
        /// </summary>
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        public Guid CountryId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId0.
        /// </summary>
        public string ExternalId0 { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ProvinceId.
        /// </summary>
        public Guid ProvinceId { get; set; }

        /// <summary>
        /// Gets or sets the RowVersion.
        /// </summary>
        public long RowVersion { get; set; }

        /// <summary>
        /// Create a shallow copy of the <see cref="ProvinceData"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ProvinceData"/>.</returns>
        internal ProvinceData Clone()
        {
            return (ProvinceData)this.MemberwiseClone();
        }
    }

    /// <summary>
    /// A row of data in the Configuration table.
    /// </summary>
    public class ConfigurationRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "ConfigurationId", "RowVersion", "Source", "TargetKey" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ConfigurationData currentData = new ConfigurationData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private ConfigurationData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRow"/> class.
        /// </summary>
        /// <param name="configurationTable">The parent table.</param>
        /// <param name="configurationData">The initial data.</param>
        internal ConfigurationRow(ConfigurationTable configurationTable, ConfigurationData configurationData)
        {
            this.Table = configurationTable;
            this.currentData = configurationData;
        }

        /// <summary>
        /// Gets the ConfigurationId.
        /// </summary>
        public string ConfigurationId
        {
            get
            {
                return this.currentData.ConfigurationId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the Source.
        /// </summary>
        public string Source
        {
            get
            {
                return this.currentData.Source;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ConfigurationTable Table { get; private set; }

        /// <summary>
        /// Gets the TargetKey.
        /// </summary>
        public string TargetKey
        {
            get
            {
                return this.currentData.TargetKey;
            }
        }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public ConfigurationData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.ConfigurationKey.Add(this.currentData.ConfigurationId, this.currentData.Source, this);
            this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.Table.DataModel.ConfigurationKey.Remove(this.currentData.ConfigurationId, this.currentData.Source);
            int index = this.Table.BinarySearch(this.currentData.ConfigurationId, this.currentData.Source);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="configurationData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(ConfigurationData configurationData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = configurationData;
            if (this.previousData.Source != this.currentData.Source || this.previousData.ConfigurationId != this.currentData.ConfigurationId)
            {
                this.Table.RemoveRow(this.previousData.ConfigurationId, this.previousData.Source);
                this.Table.AddRow(this.currentData.ConfigurationId, this.currentData.Source, this);
                this.Table.DataModel.ConfigurationKey.Update(this.previousData.ConfigurationId, this.previousData.Source, this.currentData.ConfigurationId, this.currentData.Source);
            }

            for (int bufferIndex = 4; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(ConfigurationRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Country table.
    /// </summary>
    public class CountryRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Abbreviation", "CountryId", "ExternalId0", "Name", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private CountryData currentData = new CountryData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private CountryData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryRow"/> class.
        /// </summary>
        /// <param name="countryTable">The parent table.</param>
        /// <param name="countryData">The initial data.</param>
        internal CountryRow(CountryTable countryTable, CountryData countryData)
        {
            this.Table = countryTable;
            this.currentData = countryData;
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        public string Abbreviation
        {
            get
            {
                return this.currentData.Abbreviation;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public CountryTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public CountryData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.CountryKey.Add(this.currentData.CountryId, this);
            this.Table.AddRow(this.currentData.CountryId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CountryExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CountryKey.Remove(this.currentData.CountryId);
            int index = this.Table.BinarySearch(this.currentData.CountryId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="countryData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(CountryData countryData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = countryData;
            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.CountryExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.RemoveRow(this.previousData.CountryId);
                this.Table.AddRow(this.currentData.CountryId, this);
                this.Table.DataModel.CountryKey.Update(this.previousData.CountryId, this.currentData.CountryId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(CountryRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Customer table.
    /// </summary>
    public class CustomerRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Address1", "Address2", "City", "Company", "CountryId", "CustomerId", "DateCreated", "DateModified", "DateOfBirth", "Email", "ExternalId0", "FirstName", "LastName", "MiddleName", "Phone", "PostalCode", "ProvinceId", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private CustomerData currentData = new CustomerData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private CustomerData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRow"/> class.
        /// </summary>
        /// <param name="customerTable">The parent table.</param>
        /// <param name="customerData">The initial data.</param>
        internal CustomerRow(CustomerTable customerTable, CustomerData customerData)
        {
            this.Table = customerTable;
            this.currentData = customerData;
        }

        /// <summary>
        /// Gets the Address1.
        /// </summary>
        public string Address1
        {
            get
            {
                return this.currentData.Address1;
            }
        }

        /// <summary>
        /// Gets the Address2.
        /// </summary>
        public string Address2
        {
            get
            {
                return this.currentData.Address2;
            }
        }

        /// <summary>
        /// Gets the City.
        /// </summary>
        public string City
        {
            get
            {
                return this.currentData.City;
            }
        }

        /// <summary>
        /// Gets the Company.
        /// </summary>
        public string Company
        {
            get
            {
                return this.currentData.Company;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the CustomerId.
        /// </summary>
        public Guid CustomerId
        {
            get
            {
                return this.currentData.CustomerId;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the DateOfBirth.
        /// </summary>
        public DateTime DateOfBirth
        {
            get
            {
                return this.currentData.DateOfBirth;
            }
        }

        /// <summary>
        /// Gets the Email.
        /// </summary>
        public string Email
        {
            get
            {
                return this.currentData.Email;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the FirstName.
        /// </summary>
        public string FirstName
        {
            get
            {
                return this.currentData.FirstName;
            }
        }

        /// <summary>
        /// Gets the LastName.
        /// </summary>
        public string LastName
        {
            get
            {
                return this.currentData.LastName;
            }
        }

        /// <summary>
        /// Gets the MiddleName.
        /// </summary>
        public string MiddleName
        {
            get
            {
                return this.currentData.MiddleName;
            }
        }

        /// <summary>
        /// Gets the Phone.
        /// </summary>
        public string Phone
        {
            get
            {
                return this.currentData.Phone;
            }
        }

        /// <summary>
        /// Gets the PostalCode.
        /// </summary>
        public string PostalCode
        {
            get
            {
                return this.currentData.PostalCode;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        public Guid? ProvinceId
        {
            get
            {
                return this.currentData.ProvinceId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public CustomerTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public CustomerData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryCustomerCountryIdKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
            }

            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.CustomerKey.Add(this.currentData.CustomerId, this);
            this.Table.AddRow(this.currentData.CustomerId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.CustomerExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.CustomerKey.Remove(this.currentData.CustomerId);
            this.Table.DataModel.CountryCustomerCountryIdKey.RemoveChild(this.currentData.CountryId, this);
            if (this.currentData.ProvinceId.HasValue)
            {
                this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(this.currentData.ProvinceId.Value, this);
            }

            int index = this.Table.BinarySearch(this.currentData.CustomerId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="customerData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(CustomerData customerData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = customerData;
            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryCustomerCountryIdKey.UpdateChild(this.previousData.CountryId, this.currentData.CountryId, this);
            }

            if (this.previousData.ProvinceId != this.currentData.ProvinceId)
            {
                if (this.previousData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceCustomerProvinceIdKey.RemoveChild(this.previousData.ProvinceId.Value, this);
                }

                if (this.currentData.ProvinceId.HasValue)
                {
                    this.Table.DataModel.ProvinceCustomerProvinceIdKey.AddChild(this.currentData.ProvinceId.Value, this);
                }
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.CustomerExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.CustomerExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.CustomerId != this.currentData.CustomerId)
            {
                this.Table.RemoveRow(this.previousData.CustomerId);
                this.Table.AddRow(this.currentData.CustomerId, this);
                this.Table.DataModel.CustomerKey.Update(this.previousData.CustomerId, this.currentData.CustomerId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(CustomerRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the License table.
    /// </summary>
    public class LicenseRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "CustomerId", "DateCreated", "DateModified", "DeveloperLicenseTypeCode", "ExternalId0", "LicenseId", "ProductId", "RowVersion", "RuntimeLicenseTypeCode" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private LicenseData currentData = new LicenseData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private LicenseData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseRow"/> class.
        /// </summary>
        /// <param name="licenseTable">The parent table.</param>
        /// <param name="licenseData">The initial data.</param>
        internal LicenseRow(LicenseTable licenseTable, LicenseData licenseData)
        {
            this.Table = licenseTable;
            this.currentData = licenseData;
        }

        /// <summary>
        /// Gets the CustomerId.
        /// </summary>
        public Guid CustomerId
        {
            get
            {
                return this.currentData.CustomerId;
            }
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the DeveloperLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode DeveloperLicenseTypeCode
        {
            get
            {
                return this.currentData.DeveloperLicenseTypeCode;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the LicenseId.
        /// </summary>
        public Guid LicenseId
        {
            get
            {
                return this.currentData.LicenseId;
            }
        }

        /// <summary>
        /// Gets the ProductId.
        /// </summary>
        public Guid ProductId
        {
            get
            {
                return this.currentData.ProductId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the RuntimeLicenseTypeCode.
        /// </summary>
        public LicenseTypeCode RuntimeLicenseTypeCode
        {
            get
            {
                return this.currentData.RuntimeLicenseTypeCode;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public LicenseTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public LicenseData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CustomerLicenseCustomerIdKey.AddChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.AddChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.AddChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.AddChild(this.currentData.ProductId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.LicenseKey.Add(this.currentData.LicenseId, this);
            this.Table.AddRow(this.currentData.LicenseId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.LicenseExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.LicenseKey.Remove(this.currentData.LicenseId);
            this.Table.DataModel.CustomerLicenseCustomerIdKey.RemoveChild(this.currentData.CustomerId, this);
            this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.RemoveChild(this.currentData.DeveloperLicenseTypeCode, this);
            this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.RemoveChild(this.currentData.RuntimeLicenseTypeCode, this);
            this.Table.DataModel.ProductLicenseProductIdKey.RemoveChild(this.currentData.ProductId, this);
            int index = this.Table.BinarySearch(this.currentData.LicenseId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="licenseData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(LicenseData licenseData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = licenseData;
            if (this.previousData.CustomerId != this.currentData.CustomerId)
            {
                this.Table.DataModel.CustomerLicenseCustomerIdKey.UpdateChild(this.previousData.CustomerId, this.currentData.CustomerId, this);
            }

            if (this.previousData.DeveloperLicenseTypeCode != this.currentData.DeveloperLicenseTypeCode)
            {
                this.Table.DataModel.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.UpdateChild(this.previousData.DeveloperLicenseTypeCode, this.currentData.DeveloperLicenseTypeCode, this);
            }

            if (this.previousData.RuntimeLicenseTypeCode != this.currentData.RuntimeLicenseTypeCode)
            {
                this.Table.DataModel.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.UpdateChild(this.previousData.RuntimeLicenseTypeCode, this.currentData.RuntimeLicenseTypeCode, this);
            }

            if (this.previousData.ProductId != this.currentData.ProductId)
            {
                this.Table.DataModel.ProductLicenseProductIdKey.UpdateChild(this.previousData.ProductId, this.currentData.ProductId, this);
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.LicenseExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.LicenseExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.LicenseId != this.currentData.LicenseId)
            {
                this.Table.RemoveRow(this.previousData.LicenseId);
                this.Table.AddRow(this.currentData.LicenseId, this);
                this.Table.DataModel.LicenseKey.Update(this.previousData.LicenseId, this.currentData.LicenseId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(LicenseRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the LicenseType table.
    /// </summary>
    public class LicenseTypeRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Description", "LicenseTypeCode", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private LicenseTypeData currentData = new LicenseTypeData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private LicenseTypeData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeRow"/> class.
        /// </summary>
        /// <param name="licenseTypeTable">The parent table.</param>
        /// <param name="licenseTypeData">The initial data.</param>
        internal LicenseTypeRow(LicenseTypeTable licenseTypeTable, LicenseTypeData licenseTypeData)
        {
            this.Table = licenseTypeTable;
            this.currentData = licenseTypeData;
        }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.currentData.Description;
            }
        }

        /// <summary>
        /// Gets the LicenseTypeCode.
        /// </summary>
        public LicenseTypeCode LicenseTypeCode
        {
            get
            {
                return this.currentData.LicenseTypeCode;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public LicenseTypeTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public LicenseTypeData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.LicenseTypeKey.Add(this.currentData.LicenseTypeCode, this);
            this.Table.AddRow(this.currentData.LicenseTypeCode, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            this.Table.DataModel.LicenseTypeKey.Remove(this.currentData.LicenseTypeCode);
            int index = this.Table.BinarySearch(this.currentData.LicenseTypeCode);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="licenseTypeData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(LicenseTypeData licenseTypeData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = licenseTypeData;
            if (this.previousData.LicenseTypeCode != this.currentData.LicenseTypeCode)
            {
                this.Table.RemoveRow(this.previousData.LicenseTypeCode);
                this.Table.AddRow(this.currentData.LicenseTypeCode, this);
                this.Table.DataModel.LicenseTypeKey.Update(this.previousData.LicenseTypeCode, this.currentData.LicenseTypeCode);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(LicenseTypeRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Product table.
    /// </summary>
    public class ProductRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "DateCreated", "DateModified", "Description", "ExternalId0", "Name", "ProductId", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ProductData currentData = new ProductData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private ProductData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRow"/> class.
        /// </summary>
        /// <param name="productTable">The parent table.</param>
        /// <param name="productData">The initial data.</param>
        internal ProductRow(ProductTable productTable, ProductData productData)
        {
            this.Table = productTable;
            this.currentData = productData;
        }

        /// <summary>
        /// Gets the DateCreated.
        /// </summary>
        public DateTime DateCreated
        {
            get
            {
                return this.currentData.DateCreated;
            }
        }

        /// <summary>
        /// Gets the DateModified.
        /// </summary>
        public DateTime DateModified
        {
            get
            {
                return this.currentData.DateModified;
            }
        }

        /// <summary>
        /// Gets the Description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.currentData.Description;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the ProductId.
        /// </summary>
        public Guid ProductId
        {
            get
            {
                return this.currentData.ProductId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ProductTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public ProductData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.ProductKey.Add(this.currentData.ProductId, this);
            this.Table.AddRow(this.currentData.ProductId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProductExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProductKey.Remove(this.currentData.ProductId);
            int index = this.Table.BinarySearch(this.currentData.ProductId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="productData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(ProductData productData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = productData;
            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProductExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProductExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.ProductId != this.currentData.ProductId)
            {
                this.Table.RemoveRow(this.previousData.ProductId);
                this.Table.AddRow(this.currentData.ProductId, this);
                this.Table.DataModel.ProductKey.Update(this.previousData.ProductId, this.currentData.ProductId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(ProductRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// A row of data in the Province table.
    /// </summary>
    public class ProvinceRow : INotifyPropertyChanged
    {
        /// <summary>
        /// An array of column names to use when notifying of property changes.
        /// </summary>
        private static string[] columnNames = new string[] { "Abbreviation", "CountryId", "ExternalId0", "Name", "ProvinceId", "RowVersion" };

        /// <summary>
        /// The current contents of the row.
        /// </summary>
        private ProvinceData currentData = new ProvinceData();

        /// <summary>
        /// The previous contents of the row.
        /// </summary>
        private ProvinceData previousData = null;

        /// <summary>
        /// Handles a change to any of the properties.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceRow"/> class.
        /// </summary>
        /// <param name="provinceTable">The parent table.</param>
        /// <param name="provinceData">The initial data.</param>
        internal ProvinceRow(ProvinceTable provinceTable, ProvinceData provinceData)
        {
            this.Table = provinceTable;
            this.currentData = provinceData;
        }

        /// <summary>
        /// Gets the Abbreviation.
        /// </summary>
        public string Abbreviation
        {
            get
            {
                return this.currentData.Abbreviation;
            }
        }

        /// <summary>
        /// Gets the CountryId.
        /// </summary>
        public Guid CountryId
        {
            get
            {
                return this.currentData.CountryId;
            }
        }

        /// <summary>
        /// Gets the ExternalId0.
        /// </summary>
        public string ExternalId0
        {
            get
            {
                return this.currentData.ExternalId0;
            }
        }

        /// <summary>
        /// Gets the Name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.currentData.Name;
            }
        }

        /// <summary>
        /// Gets the ProvinceId.
        /// </summary>
        public Guid ProvinceId
        {
            get
            {
                return this.currentData.ProvinceId;
            }
        }

        /// <summary>
        /// Gets the current state of the row.
        /// </summary>
        public RowState RowState { get; }

        /// <summary>
        /// Gets the RowVersion.
        /// </summary>
        public long RowVersion
        {
            get
            {
                return this.currentData.RowVersion;
            }
        }

        /// <summary>
        /// Gets the parent table.
        /// </summary>
        public ProvinceTable Table { get; private set; }

        /// <summary>
        /// Gets the various row versions (original, previous, current).
        /// </summary>
        /// <param name="dataRowVersion">The kind of row to return.</param>
        /// <returns>The given version of the row.</returns>
        public ProvinceData this[DataRowVersion dataRowVersion]
        {
            get
            {
                return dataRowVersion == DataRowVersion.Current ? this.currentData : this.previousData;
            }
        }

        /// <summary>
        /// Merges data from an addition transaction.
        /// </summary>
        internal void Add()
        {
            this.Table.DataModel.CountryProvinceKey.AddChild(this.currentData.CountryId, this);
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
            }

            this.Table.DataModel.ProvinceKey.Add(this.currentData.ProvinceId, this);
            this.Table.AddRow(this.currentData.ProvinceId, this);
        }

        /// <summary>
        /// Deletes the row from the table.
        /// </summary>
        internal void Delete()
        {
            if (this.currentData.ExternalId0 != null)
            {
                this.Table.DataModel.ProvinceExternalId0Key.Remove(this.currentData.ExternalId0);
            }

            this.Table.DataModel.ProvinceKey.Remove(this.currentData.ProvinceId);
            this.Table.DataModel.CountryProvinceKey.RemoveChild(this.currentData.CountryId, this);
            int index = this.Table.BinarySearch(this.currentData.ProvinceId);
            if (index >= 0)
            {
                this.previousData = this.currentData;
                this.currentData = null;
                this.Table.RemoveAt(index);
            }
        }

        /// <summary>
        /// Updates a record.
        /// </summary>
        /// <param name="provinceData">Raw data for an update operation.</param>
        /// <param name="transactionItem">A transaction item.</param>
        internal void Update(ProvinceData provinceData, object[] transactionItem)
        {
            this.previousData = this.currentData;
            this.currentData = provinceData;
            if (this.previousData.CountryId != this.currentData.CountryId)
            {
                this.Table.DataModel.CountryProvinceKey.UpdateChild(this.previousData.CountryId, this.currentData.CountryId, this);
            }

            if (this.previousData.ExternalId0 != this.currentData.ExternalId0)
            {
                if (this.previousData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Remove(this.previousData.ExternalId0);
                }

                if (this.currentData.ExternalId0 != null)
                {
                    this.Table.DataModel.ProvinceExternalId0Key.Add(this.currentData.ExternalId0, this);
                }
            }

            if (this.previousData.ProvinceId != this.currentData.ProvinceId)
            {
                this.Table.RemoveRow(this.previousData.ProvinceId);
                this.Table.AddRow(this.currentData.ProvinceId, this);
                this.Table.DataModel.ProvinceKey.Update(this.previousData.ProvinceId, this.currentData.ProvinceId);
            }

            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(ProvinceRow.columnNames[(int)transactionItem[bufferIndex]]));
            }
        }
    }

    /// <summary>
    /// The Configuration table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ConfigurationTable : ObservableCollection<ConfigurationRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<ConfigurationData, object>[] setters = new Action<ConfigurationData, object>[4];

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal ConfigurationTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.ConfigurationId = (string)v;
            this.setters[1] = (d, v) => d.RowVersion = (long)v;
            this.setters[2] = (d, v) => d.Source = (string)v;
            this.setters[3] = (d, v) => d.TargetKey = (string)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Configuration", Justification = "Diagnostic message.")]
        internal void AddRow(string configurationId, string source, ConfigurationRow configurationRow)
        {
            if (configurationRow == null)
            {
                throw new ArgumentNullException("configurationRow");
            }

            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.Insert(~index, configurationRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(string configurationId, string source)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ConfigurationRow midRow = this[mid];
                int compare;
                compare = string.CompareOrdinal(midRow.ConfigurationId, configurationId);
                if (compare == 0)
                {
                    compare = string.CompareOrdinal(midRow.Source, source);
                }

                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        internal void RemoveRow(string configurationId, string source)
        {
            int index = this.BinarySearch(configurationId, source);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            ConfigurationData configurationData = new ConfigurationData();
            configurationData.ConfigurationId = (string)transactionItem[2];
            configurationData.RowVersion = (long)transactionItem[3];
            configurationData.Source = (string)transactionItem[4];
            configurationData.TargetKey = (string)transactionItem[5];
            ConfigurationRow configurationRow = new ConfigurationRow(this, configurationData);
            configurationRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            string configurationId = (string)transactionItem[2];
            string source = (string)transactionItem[3];
            ConfigurationRow configurationRow = this.DataModel.ConfigurationKey.Find(configurationId, source);
            configurationRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            string configurationId = (string)transactionItem[2];
            string source = (string)transactionItem[3];
            int index = this.BinarySearch(configurationId, source);
            ConfigurationRow configurationRow = this[index];
            ConfigurationData configurationData = configurationRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 4; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](configurationData, transactionItem[bufferIndex + 1]);
            }

            configurationRow.Update(configurationData, transactionItem);
        }
    }

    /// <summary>
    /// The Country table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class CountryTable : ObservableCollection<CountryRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<CountryData, object>[] setters = new Action<CountryData, object>[5];

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal CountryTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Abbreviation = (string)v;
            this.setters[1] = (d, v) => d.CountryId = (Guid)v;
            this.setters[2] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[3] = (d, v) => d.Name = (string)v;
            this.setters[4] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Country", Justification = "Diagnostic message.")]
        internal void AddRow(Guid countryId, CountryRow countryRow)
        {
            if (countryRow == null)
            {
                throw new ArgumentNullException("countryRow");
            }

            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.Insert(~index, countryRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid countryId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                CountryRow midRow = this[mid];
                int compare;
                compare = midRow.CountryId.CompareTo(countryId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        internal void RemoveRow(Guid countryId)
        {
            int index = this.BinarySearch(countryId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            CountryData countryData = new CountryData();
            countryData.Abbreviation = (string)transactionItem[2];
            countryData.CountryId = (Guid)transactionItem[3];
            countryData.ExternalId0 = (string)transactionItem[4];
            countryData.Name = (string)transactionItem[5];
            countryData.RowVersion = (long)transactionItem[6];
            CountryRow countryRow = new CountryRow(this, countryData);
            countryRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid countryId = (Guid)transactionItem[2];
            CountryRow countryRow = this.DataModel.CountryKey.Find(countryId);
            countryRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid countryId = (Guid)transactionItem[2];
            int index = this.BinarySearch(countryId);
            CountryRow countryRow = this[index];
            CountryData countryData = countryRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](countryData, transactionItem[bufferIndex + 1]);
            }

            countryRow.Update(countryData, transactionItem);
        }
    }

    /// <summary>
    /// The Customer table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class CustomerTable : ObservableCollection<CustomerRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<CustomerData, object>[] setters = new Action<CustomerData, object>[18];

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal CustomerTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Address1 = (string)v;
            this.setters[1] = (d, v) => d.Address2 = (string)v;
            this.setters[2] = (d, v) => d.City = (string)v;
            this.setters[3] = (d, v) => d.Company = (string)v;
            this.setters[4] = (d, v) => d.CountryId = (Guid)v;
            this.setters[5] = (d, v) => d.CustomerId = (Guid)v;
            this.setters[6] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[7] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[8] = (d, v) => d.DateOfBirth = (DateTime)v;
            this.setters[9] = (d, v) => d.Email = (string)v;
            this.setters[10] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[11] = (d, v) => d.FirstName = (string)v;
            this.setters[12] = (d, v) => d.LastName = (string)v;
            this.setters[13] = (d, v) => d.MiddleName = (string)v;
            this.setters[14] = (d, v) => d.Phone = (string)v;
            this.setters[15] = (d, v) => d.PostalCode = (string)v;
            this.setters[16] = (d, v) => d.ProvinceId = (Guid?)v;
            this.setters[17] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="customerRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Customer", Justification = "Diagnostic message.")]
        internal void AddRow(Guid customerId, CustomerRow customerRow)
        {
            if (customerRow == null)
            {
                throw new ArgumentNullException("customerRow");
            }

            int index = this.BinarySearch(customerId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("CustomerKey", new object[] { customerId });
            }

            this.Insert(~index, customerRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid customerId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                CustomerRow midRow = this[mid];
                int compare;
                compare = midRow.CustomerId.CompareTo(customerId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        internal void RemoveRow(Guid customerId)
        {
            int index = this.BinarySearch(customerId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            CustomerData customerData = new CustomerData();
            customerData.Address1 = (string)transactionItem[2];
            customerData.Address2 = (string)transactionItem[3];
            customerData.City = (string)transactionItem[4];
            customerData.Company = (string)transactionItem[5];
            customerData.CountryId = (Guid)transactionItem[6];
            customerData.CustomerId = (Guid)transactionItem[7];
            customerData.DateCreated = (DateTime)transactionItem[8];
            customerData.DateModified = (DateTime)transactionItem[9];
            customerData.DateOfBirth = (DateTime)transactionItem[10];
            customerData.Email = (string)transactionItem[11];
            customerData.ExternalId0 = (string)transactionItem[12];
            customerData.FirstName = (string)transactionItem[13];
            customerData.LastName = (string)transactionItem[14];
            customerData.MiddleName = (string)transactionItem[15];
            customerData.Phone = (string)transactionItem[16];
            customerData.PostalCode = (string)transactionItem[17];
            customerData.ProvinceId = (Guid?)transactionItem[18];
            customerData.RowVersion = (long)transactionItem[19];
            CustomerRow customerRow = new CustomerRow(this, customerData);
            customerRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid customerId = (Guid)transactionItem[2];
            CustomerRow customerRow = this.DataModel.CustomerKey.Find(customerId);
            customerRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid customerId = (Guid)transactionItem[2];
            int index = this.BinarySearch(customerId);
            CustomerRow customerRow = this[index];
            CustomerData customerData = customerRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](customerData, transactionItem[bufferIndex + 1]);
            }

            customerRow.Update(customerData, transactionItem);
        }
    }

    /// <summary>
    /// The License table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class LicenseTable : ObservableCollection<LicenseRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<LicenseData, object>[] setters = new Action<LicenseData, object>[9];

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal LicenseTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.CustomerId = (Guid)v;
            this.setters[1] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[2] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[3] = (d, v) => d.DeveloperLicenseTypeCode = (LicenseTypeCode)v;
            this.setters[4] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[5] = (d, v) => d.LicenseId = (Guid)v;
            this.setters[6] = (d, v) => d.ProductId = (Guid)v;
            this.setters[7] = (d, v) => d.RowVersion = (long)v;
            this.setters[8] = (d, v) => d.RuntimeLicenseTypeCode = (LicenseTypeCode)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="licenseRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "License", Justification = "Diagnostic message.")]
        internal void AddRow(Guid licenseId, LicenseRow licenseRow)
        {
            if (licenseRow == null)
            {
                throw new ArgumentNullException("licenseRow");
            }

            int index = this.BinarySearch(licenseId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("LicenseKey", new object[] { licenseId });
            }

            this.Insert(~index, licenseRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid licenseId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                LicenseRow midRow = this[mid];
                int compare;
                compare = midRow.LicenseId.CompareTo(licenseId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        internal void RemoveRow(Guid licenseId)
        {
            int index = this.BinarySearch(licenseId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            LicenseData licenseData = new LicenseData();
            licenseData.CustomerId = (Guid)transactionItem[2];
            licenseData.DateCreated = (DateTime)transactionItem[3];
            licenseData.DateModified = (DateTime)transactionItem[4];
            licenseData.DeveloperLicenseTypeCode = (LicenseTypeCode)transactionItem[5];
            licenseData.ExternalId0 = (string)transactionItem[6];
            licenseData.LicenseId = (Guid)transactionItem[7];
            licenseData.ProductId = (Guid)transactionItem[8];
            licenseData.RowVersion = (long)transactionItem[9];
            licenseData.RuntimeLicenseTypeCode = (LicenseTypeCode)transactionItem[10];
            LicenseRow licenseRow = new LicenseRow(this, licenseData);
            licenseRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid licenseId = (Guid)transactionItem[2];
            LicenseRow licenseRow = this.DataModel.LicenseKey.Find(licenseId);
            licenseRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid licenseId = (Guid)transactionItem[2];
            int index = this.BinarySearch(licenseId);
            LicenseRow licenseRow = this[index];
            LicenseData licenseData = licenseRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](licenseData, transactionItem[bufferIndex + 1]);
            }

            licenseRow.Update(licenseData, transactionItem);
        }
    }

    /// <summary>
    /// The LicenseType table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class LicenseTypeTable : ObservableCollection<LicenseTypeRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<LicenseTypeData, object>[] setters = new Action<LicenseTypeData, object>[3];

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal LicenseTypeTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Description = (string)v;
            this.setters[1] = (d, v) => d.LicenseTypeCode = (LicenseTypeCode)v;
            this.setters[2] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseTypeRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "LicenseType", Justification = "Diagnostic message.")]
        internal void AddRow(LicenseTypeCode licenseTypeCode, LicenseTypeRow licenseTypeRow)
        {
            if (licenseTypeRow == null)
            {
                throw new ArgumentNullException("licenseTypeRow");
            }

            int index = this.BinarySearch(licenseTypeCode);
            if (index >= 0)
            {
                throw new DuplicateKeyException("LicenseTypeKey", new object[] { licenseTypeCode });
            }

            this.Insert(~index, licenseTypeRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(LicenseTypeCode licenseTypeCode)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                LicenseTypeRow midRow = this[mid];
                int compare;
                compare = midRow.LicenseTypeCode.CompareTo(licenseTypeCode);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        internal void RemoveRow(LicenseTypeCode licenseTypeCode)
        {
            int index = this.BinarySearch(licenseTypeCode);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            LicenseTypeData licenseTypeData = new LicenseTypeData();
            licenseTypeData.Description = (string)transactionItem[2];
            licenseTypeData.LicenseTypeCode = (LicenseTypeCode)transactionItem[3];
            licenseTypeData.RowVersion = (long)transactionItem[4];
            LicenseTypeRow licenseTypeRow = new LicenseTypeRow(this, licenseTypeData);
            licenseTypeRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            LicenseTypeCode licenseTypeCode = (LicenseTypeCode)transactionItem[2];
            LicenseTypeRow licenseTypeRow = this.DataModel.LicenseTypeKey.Find(licenseTypeCode);
            licenseTypeRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            LicenseTypeCode licenseTypeCode = (LicenseTypeCode)transactionItem[2];
            int index = this.BinarySearch(licenseTypeCode);
            LicenseTypeRow licenseTypeRow = this[index];
            LicenseTypeData licenseTypeData = licenseTypeRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](licenseTypeData, transactionItem[bufferIndex + 1]);
            }

            licenseTypeRow.Update(licenseTypeData, transactionItem);
        }
    }

    /// <summary>
    /// The Product table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ProductTable : ObservableCollection<ProductRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<ProductData, object>[] setters = new Action<ProductData, object>[7];

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal ProductTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.DateCreated = (DateTime)v;
            this.setters[1] = (d, v) => d.DateModified = (DateTime)v;
            this.setters[2] = (d, v) => d.Description = (string)v;
            this.setters[3] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[4] = (d, v) => d.Name = (string)v;
            this.setters[5] = (d, v) => d.ProductId = (Guid)v;
            this.setters[6] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="productRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Product", Justification = "Diagnostic message.")]
        internal void AddRow(Guid productId, ProductRow productRow)
        {
            if (productRow == null)
            {
                throw new ArgumentNullException("productRow");
            }

            int index = this.BinarySearch(productId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ProductKey", new object[] { productId });
            }

            this.Insert(~index, productRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid productId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ProductRow midRow = this[mid];
                int compare;
                compare = midRow.ProductId.CompareTo(productId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        internal void RemoveRow(Guid productId)
        {
            int index = this.BinarySearch(productId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            ProductData productData = new ProductData();
            productData.DateCreated = (DateTime)transactionItem[2];
            productData.DateModified = (DateTime)transactionItem[3];
            productData.Description = (string)transactionItem[4];
            productData.ExternalId0 = (string)transactionItem[5];
            productData.Name = (string)transactionItem[6];
            productData.ProductId = (Guid)transactionItem[7];
            productData.RowVersion = (long)transactionItem[8];
            ProductRow productRow = new ProductRow(this, productData);
            productRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid productId = (Guid)transactionItem[2];
            ProductRow productRow = this.DataModel.ProductKey.Find(productId);
            productRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid productId = (Guid)transactionItem[2];
            int index = this.BinarySearch(productId);
            ProductRow productRow = this[index];
            ProductData productData = productRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](productData, transactionItem[bufferIndex + 1]);
            }

            productRow.Update(productData, transactionItem);
        }
    }

    /// <summary>
    /// The Province table.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "Name reflects use.")]
    public class ProvinceTable : ObservableCollection<ProvinceRow>
    {
        /// <summary>
        /// Handlers for the various merge actions.
        /// </summary>
        private Action<object[]>[] mergeActions = new Action<object[]>[3];

        /// <summary>
        /// Actions for setting the properties of the row.
        /// </summary>
        private Action<ProvinceData, object>[] setters = new Action<ProvinceData, object>[6];

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceTable"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "The code is generated.")]
        internal ProvinceTable(DataModel dataModel)
        {
            this.DataModel = dataModel;
            this.mergeActions[RecordState.Added] = this.MergeAdd;
            this.mergeActions[RecordState.Deleted] = this.MergeDelete;
            this.mergeActions[RecordState.Modified] = this.MergeUpdate;
            this.setters[0] = (d, v) => d.Abbreviation = (string)v;
            this.setters[1] = (d, v) => d.CountryId = (Guid)v;
            this.setters[2] = (d, v) => d.ExternalId0 = (string)v;
            this.setters[3] = (d, v) => d.Name = (string)v;
            this.setters[4] = (d, v) => d.ProvinceId = (Guid)v;
            this.setters[5] = (d, v) => d.RowVersion = (long)v;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Add a row to the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The row to be added.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Province", Justification = "Diagnostic message.")]
        internal void AddRow(Guid provinceId, ProvinceRow provinceRow)
        {
            if (provinceRow == null)
            {
                throw new ArgumentNullException("provinceRow");
            }

            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.Insert(~index, provinceRow);
        }

        /// <summary>
        /// Uses a binary search algorithm to locate a specific element in the collection of rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The zero-based index of item in the list if found; otherwise, a negative number that is the bitwise complement of the index of the next</returns>
        internal int BinarySearch(Guid provinceId)
        {
            int low = 0;
            int high = this.Count - 1;
            while (low <= high)
            {
                int mid = low + ((high - low) / 2);
                ProvinceRow midRow = this[mid];
                int compare;
                compare = midRow.ProvinceId.CompareTo(provinceId);
                if (compare == 0)
                {
                    return mid;
                }
                else
                {
                    if (compare < 0)
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        high = mid - 1;
                    }
                }
            }

            return ~low;
        }

        /// <summary>
        /// Handles the merging of data from the service.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        internal void MergeRecord(object[] transactionItem)
        {
            this.mergeActions[(int)transactionItem[1]](transactionItem);
        }

        /// <summary>
        /// Removes a row from the table.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        internal void RemoveRow(Guid provinceId)
        {
            int index = this.BinarySearch(provinceId);
            if (index >= 0)
            {
                this.RemoveAt(index);
            }
        }

        /// <summary>
        /// Merges a new record into the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an addition operation.</param>
        private void MergeAdd(object[] transactionItem)
        {
            ProvinceData provinceData = new ProvinceData();
            provinceData.Abbreviation = (string)transactionItem[2];
            provinceData.CountryId = (Guid)transactionItem[3];
            provinceData.ExternalId0 = (string)transactionItem[4];
            provinceData.Name = (string)transactionItem[5];
            provinceData.ProvinceId = (Guid)transactionItem[6];
            provinceData.RowVersion = (long)transactionItem[7];
            ProvinceRow provinceRow = new ProvinceRow(this, provinceData);
            provinceRow.Add();
        }

        /// <summary>
        /// Purges a deleted row from the table.
        /// </summary>
        /// <param name="transactionItem">Raw data for an delete operation.</param>
        private void MergeDelete(object[] transactionItem)
        {
            Guid provinceId = (Guid)transactionItem[2];
            ProvinceRow provinceRow = this.DataModel.ProvinceKey.Find(provinceId);
            provinceRow.Delete();
        }

        /// <summary>
        /// Merges a modified row with an existing row.
        /// </summary>
        /// <param name="transactionItem">Raw data for an update operation.</param>
        private void MergeUpdate(object[] transactionItem)
        {
            Guid provinceId = (Guid)transactionItem[2];
            int index = this.BinarySearch(provinceId);
            ProvinceRow provinceRow = this[index];
            ProvinceData provinceData = provinceRow[DataRowVersion.Current].Clone();
            for (int bufferIndex = 3; bufferIndex < transactionItem.Length - 1; bufferIndex += 2)
            {
                this.setters[(int)transactionItem[bufferIndex]](provinceData, transactionItem[bufferIndex + 1]);
            }

            provinceRow.Update(provinceData, transactionItem);
        }
    }

    /// <summary>
    /// A thread-safe DataSet able to handle transactions.
    /// </summary>
    public class DataModel : IDisposable
    {
        /// <summary>
        /// The number of records to merge during each cycle.
        /// </summary>
        private const int batchSize = 1024;

        /// <summary>
        /// The time to wait before processing another batch of transactions.
        /// </summary>
        private const int courtesyInterval = 10;

        /// <summary>
        /// The time to wait before polling the server for new transactions.
        /// </summary>
        private const int refreshInterval = 250;

        /// <summary>
        /// The channel bindings used to communicate with the web service.
        /// </summary>
        private Binding binding;

        /// <summary>
        /// The communication exception handler.
        /// </summary>
        private ICommunicationExceptionHandler communicationExceptionHandler;

        /// <summary>
        /// The client connection to the service.
        /// </summary>
        private DataServiceClient dataServiceClient;

        /// <summary>
        /// The unique identifier of the data set instance.
        /// </summary>
        private Guid dataSetId;

        /// <summary>
        /// The endpoint address of the web service.
        /// </summary>
        private EndpointAddress endpointAddress;

        /// <summary>
        /// An indication of whether the client is reading from the server.
        /// </summary>
        private bool isReading;

        /// <summary>
        /// The security token.
        /// </summary>
        private SecurityToken securityToken;

        /// <summary>
        /// The sequence of the latest transaction read from the server.
        /// </summary>
        private long sequence = -1;

        /// <summary>
        /// The synchronization context for the main window.
        /// </summary>
        private SynchronizationContext synchronizationContext;

        /// <summary>
        /// The vector to the transaction handlers for each of the tables.
        /// </summary>
        private Action<object[]>[] transactionHandlers = new Action<object[]>[7];

        /// <summary>
        /// The transaction log that is currently being merged.
        /// </summary>
        private List<object[]> transactionLog;

        /// <summary>
        /// The current index into the transaction log.
        /// </summary>
        private int transactionLogIndex;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataModel"/> class.
        /// </summary>
        /// <param name="binding">The WCF binding.</param>
        /// <param name="endpointAddress">The WCF endpoint address.</param>
        /// <param name="securityToken">The security token.</param>
        /// <param name="communicationExceptionHandler">The communication exception handler.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated by a tool.")]
        public DataModel(Binding binding, EndpointAddress endpointAddress, SecurityToken securityToken, ICommunicationExceptionHandler communicationExceptionHandler)
        {
            this.binding = binding;
            this.endpointAddress = endpointAddress;
            this.securityToken = securityToken;
            this.communicationExceptionHandler = communicationExceptionHandler;
            this.transactionHandlers[0] = (d) => this.Configuration.MergeRecord(d);
            this.transactionHandlers[1] = (d) => this.Country.MergeRecord(d);
            this.transactionHandlers[2] = (d) => this.Customer.MergeRecord(d);
            this.transactionHandlers[3] = (d) => this.License.MergeRecord(d);
            this.transactionHandlers[4] = (d) => this.LicenseType.MergeRecord(d);
            this.transactionHandlers[5] = (d) => this.Product.MergeRecord(d);
            this.transactionHandlers[6] = (d) => this.Province.MergeRecord(d);
            this.Configuration = new ConfigurationTable(this);
            this.Country = new CountryTable(this);
            this.Customer = new CustomerTable(this);
            this.License = new LicenseTable(this);
            this.LicenseType = new LicenseTypeTable(this);
            this.Product = new ProductTable(this);
            this.Province = new ProvinceTable(this);
            this.ConfigurationKey = new ConfigurationKey(this);
            this.CountryExternalId0Key = new CountryExternalId0Key(this);
            this.CountryKey = new CountryKey(this);
            this.CustomerExternalId0Key = new CustomerExternalId0Key(this);
            this.CustomerKey = new CustomerKey(this);
            this.LicenseExternalId0Key = new LicenseExternalId0Key(this);
            this.LicenseKey = new LicenseKey(this);
            this.LicenseTypeKey = new LicenseTypeKey(this);
            this.ProductExternalId0Key = new ProductExternalId0Key(this);
            this.ProductKey = new ProductKey(this);
            this.ProvinceExternalId0Key = new ProvinceExternalId0Key(this);
            this.ProvinceKey = new ProvinceKey(this);
            this.CountryCustomerCountryIdKey = new CountryCustomerCountryIdKey(this);
            this.CountryProvinceKey = new CountryProvinceKey(this);
            this.CustomerLicenseCustomerIdKey = new CustomerLicenseCustomerIdKey(this);
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey = new LicenseTypeLicenseDeveloperLicenseTypeCodeKey(this);
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey = new LicenseTypeLicenseRuntimeLicenseTypeCodeKey(this);
            this.ProductLicenseProductIdKey = new ProductLicenseProductIdKey(this);
            this.ProvinceCustomerProvinceIdKey = new ProvinceCustomerProvinceIdKey(this);
        }

        /// <summary>
        /// Gets the Configuration table.
        /// </summary>
        public ConfigurationTable Configuration { get; private set; }

        /// <summary>
        /// Gets a unique index for the Configuration table.
        /// </summary>
        public ConfigurationKey ConfigurationKey { get; private set; }

        /// <summary>
        /// Gets the Country table.
        /// </summary>
        public CountryTable Country { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryCustomerCountryIdKey CountryCustomerCountryIdKey { get; set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryExternalId0Key CountryExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Country table.
        /// </summary>
        public CountryKey CountryKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Country table.
        /// </summary>
        public CountryProvinceKey CountryProvinceKey { get; set; }

        /// <summary>
        /// Gets the Customer table.
        /// </summary>
        public CustomerTable Customer { get; private set; }

        /// <summary>
        /// Gets a unique index for the Customer table.
        /// </summary>
        public CustomerExternalId0Key CustomerExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Customer table.
        /// </summary>
        public CustomerKey CustomerKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Customer table.
        /// </summary>
        public CustomerLicenseCustomerIdKey CustomerLicenseCustomerIdKey { get; set; }

        /// <summary>
        /// Gets or sets an indication of whether the background thread that reconciles the client data model is running or not.
        /// </summary>
        public bool IsReading
        {
            get
            {
                return this.isReading;
            }

            set
            {
                if (this.isReading != value)
                {
                    if (this.isReading = value)
                    {
                        this.synchronizationContext = SynchronizationContext.Current;
                        this.ReadTransactions(null);
                    }
                }
            }
        }

        /// <summary>
        /// Gets the License table.
        /// </summary>
        public LicenseTable License { get; private set; }

        /// <summary>
        /// Gets a unique index for the License table.
        /// </summary>
        public LicenseExternalId0Key LicenseExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the License table.
        /// </summary>
        public LicenseKey LicenseKey { get; private set; }

        /// <summary>
        /// Gets the LicenseType table.
        /// </summary>
        public LicenseTypeTable LicenseType { get; private set; }

        /// <summary>
        /// Gets a unique index for the LicenseType table.
        /// </summary>
        public LicenseTypeKey LicenseTypeKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent LicenseType table.
        /// </summary>
        public LicenseTypeLicenseDeveloperLicenseTypeCodeKey LicenseTypeLicenseDeveloperLicenseTypeCodeKey { get; set; }

        /// <summary>
        /// Gets or sets the unique index for the parent LicenseType table.
        /// </summary>
        public LicenseTypeLicenseRuntimeLicenseTypeCodeKey LicenseTypeLicenseRuntimeLicenseTypeCodeKey { get; set; }

        /// <summary>
        /// Gets the Product table.
        /// </summary>
        public ProductTable Product { get; private set; }

        /// <summary>
        /// Gets a unique index for the Product table.
        /// </summary>
        public ProductExternalId0Key ProductExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Product table.
        /// </summary>
        public ProductKey ProductKey { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Product table.
        /// </summary>
        public ProductLicenseProductIdKey ProductLicenseProductIdKey { get; set; }

        /// <summary>
        /// Gets the Province table.
        /// </summary>
        public ProvinceTable Province { get; private set; }

        /// <summary>
        /// Gets or sets the unique index for the parent Province table.
        /// </summary>
        public ProvinceCustomerProvinceIdKey ProvinceCustomerProvinceIdKey { get; set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceExternalId0Key ProvinceExternalId0Key { get; private set; }

        /// <summary>
        /// Gets a unique index for the Province table.
        /// </summary>
        public ProvinceKey ProvinceKey { get; private set; }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Releases the resources used by the MarshalByValueComponent.
        /// </summary>
        /// <param name="isDisposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        protected virtual void Dispose(bool isDisposing)
        {
            if (isDisposing)
            {
            }
        }

        /// <summary>
        /// Clears the data model.
        /// </summary>
        private void Clear()
        {
            this.Configuration.Clear();
            this.Country.Clear();
            this.Customer.Clear();
            this.License.Clear();
            this.LicenseType.Clear();
            this.Product.Clear();
            this.Province.Clear();
            this.ConfigurationKey.Clear();
            this.CountryExternalId0Key.Clear();
            this.CountryKey.Clear();
            this.CustomerExternalId0Key.Clear();
            this.CustomerKey.Clear();
            this.LicenseExternalId0Key.Clear();
            this.LicenseKey.Clear();
            this.LicenseTypeKey.Clear();
            this.ProductExternalId0Key.Clear();
            this.ProductKey.Clear();
            this.ProvinceExternalId0Key.Clear();
            this.ProvinceKey.Clear();
            this.CountryCustomerCountryIdKey.Clear();
            this.CountryProvinceKey.Clear();
            this.CustomerLicenseCustomerIdKey.Clear();
            this.LicenseTypeLicenseDeveloperLicenseTypeCodeKey.Clear();
            this.LicenseTypeLicenseRuntimeLicenseTypeCodeKey.Clear();
            this.ProductLicenseProductIdKey.Clear();
            this.ProvinceCustomerProvinceIdKey.Clear();
        }

        /// <summary>
        /// Merge the data from the service into the client's data model.
        /// </summary>
        /// <param name="state">The (unused) thread state.</param>
        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Calls user code.")]
        private void MergeTransactions(object state)
        {
            int batchCounter = 0;
            while (batchCounter++ < DataModel.batchSize)
            {
                if (this.transactionLogIndex < 0)
                {
                    if (this.isReading)
                    {
                        new Task(async () =>
                        {
                            await Task.Delay(DataModel.refreshInterval);
                            this.synchronizationContext.Post(this.ReadTransactions, null);
                        }).Start();
                    }

                    return;
                }

                object[] transactionItem = this.transactionLog[this.transactionLogIndex--];
                try
                {
                    this.transactionHandlers[(int)transactionItem[0]](transactionItem);
                }
                catch
                {
                }
            }

            new Task(async () =>
            {
                await Task.Delay(DataModel.courtesyInterval);
                this.synchronizationContext.Post(this.MergeTransactions, null);
            }).Start();
        }

        /// <summary>
        /// Handles a faulted channel.
        /// </summary>
        /// <param name="sender">The object that originated the event.</param>
        /// <param name="eventArgs">The event data.</param>
        private void OnChannelFaulted(object sender, EventArgs eventArgs)
        {
            this.dataServiceClient = new DataServiceClient(this.binding, this.endpointAddress, this.securityToken);
            this.dataServiceClient.InnerChannel.Faulted += this.OnChannelFaulted;
        }

        /// <summary>
        /// Start the task of reading transactions from the server.
        /// </summary>
        /// <param name="state">The (unused) thread state.</param>
        private async void ReadTransactions(object state)
        {
            try
            {
                if (this.dataServiceClient == null || dataServiceClient.State != CommunicationState.Opened)
                {
                    this.OnChannelFaulted(this, new EventArgs());
                }

                DataHeader dataHeader = await dataServiceClient.ReadAsync(this.dataSetId, this.sequence);
                Guid dataSetId = dataHeader.Identifier;
                this.sequence = dataHeader.Sequence;
                this.transactionLog = dataHeader.Data;
                this.transactionLogIndex = this.transactionLog.Count - 1;
                if (dataSetId != this.dataSetId)
                {
                    this.dataSetId = dataSetId;
                    this.Clear();
                }

                this.MergeTransactions(null);
            }
            catch (TimeoutException)
            {
                new Task(() =>
                {
                    this.synchronizationContext.Post(ReadTransactions, null);
                }).Start();
            }
            catch (CommunicationException communicationException)
            {
                if (this.communicationExceptionHandler.HandleException(communicationException, "ReadOperation"))
                {
                    new Task(async () =>
                    {
                        await Task.Delay(DataModel.refreshInterval);
                        this.synchronizationContext.Post(ReadTransactions, null);
                    }).Start();
                }
            }
        }
    }

    /// <summary>
    /// A compound key for finding objects in the ConfigurationKey index.
    /// </summary>
    internal struct ConfigurationKeySet : IComparable<ConfigurationKeySet>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationKeySet"/> struct.
        /// </summary>
        /// <param name="configurationId">A ConfigurationId component of the key.</param>
        /// <param name="source">A Source component of the key.</param>
        public ConfigurationKeySet(string configurationId, string source)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            this.ConfigurationId = configurationId;
            this.Source = source;
        }

        /// <summary>
        /// Gets the ConfigurationId.
        /// </summary>
        public string ConfigurationId { get; private set; }

        /// <summary>
        /// Gets the Source.
        /// </summary>
        public string Source { get; private set; }

        /// <summary>
        /// Equality Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the two keys are equal, false otherwise.</returns>
        public static bool operator ==(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.Source == key2.Source && key1.ConfigurationId == key2.ConfigurationId;
        }

        /// <summary>
        /// Inequality Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the two keys are not equal, false otherwise.</returns>
        public static bool operator !=(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.Source != key2.Source || key1.ConfigurationId != key2.ConfigurationId;
        }

        /// <summary>
        /// Less than Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the key1 is less than key2, false otherwise.</returns>
        public static bool operator <(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.CompareTo(key2) == -1;
        }

        /// <summary>
        /// Greater than Operator.
        /// </summary>
        /// <param name="key1">The first key.</param>
        /// <param name="key2">The second key.</param>
        /// <returns>True if the key1 is greater than key2, false otherwise.</returns>
        public static bool operator >(ConfigurationKeySet key1, ConfigurationKeySet key2)
        {
            return key1.CompareTo(key2) == 1;
        }

        /// <summary>
        /// Compares the current object with another object of the same type.
        /// </summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>
        /// Less than zero, this object is less than the other parameter.  Zero, this object is equal to other.  Greater than zero, this object is
        /// greater than other.
        /// </returns>
        public int CompareTo(ConfigurationKeySet other)
        {
            int compare0 = string.CompareOrdinal(other.ConfigurationId, this.ConfigurationId);
            if (compare0 != 0)
            {
                return compare0;
            }

            return string.CompareOrdinal(other.Source, this.Source);
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object obj)
        {
            return this.Source == ((ConfigurationKeySet)obj).Source && this.ConfigurationId == ((ConfigurationKeySet)obj).ConfigurationId;
        }

        /// <summary>
        /// Serves as the hash function.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int configurationIdHashCode = 0;
            if (this.ConfigurationId != null)
            {
                configurationIdHashCode = this.ConfigurationId.GetHashCode();
            }

            int sourceHashCode = 0;
            if (this.Source != null)
            {
                sourceHashCode = this.Source.GetHashCode();
            }

            return configurationIdHashCode + sourceHashCode;
        }
    }

    /// <summary>
    /// Unique key index for the Configuration table.
    /// </summary>
    public class ConfigurationKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<ConfigurationKeySet, ConfigurationRow> dictionary = new Dictionary<ConfigurationKeySet, ConfigurationRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ConfigurationKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ConfigurationRow Find(string configurationId, string source)
        {
            ConfigurationRow configurationRow;
            this.dictionary.TryGetValue(new ConfigurationKeySet(configurationId, source), out configurationRow);
            return configurationRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        /// <param name="configurationRow">The <see cref="ConfigurationRow"/> to be added to the index.</param>
        internal void Add(string configurationId, string source, ConfigurationRow configurationRow)
        {
            ConfigurationKeySet configurationKeySet = new ConfigurationKeySet(configurationId, source);
            if (this.dictionary.ContainsKey(configurationKeySet))
            {
                throw new DuplicateKeyException("ConfigurationKey", new object[] { configurationId, source });
            }

            this.dictionary.Add(configurationKeySet, configurationRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        internal void Remove(string configurationId, string source)
        {
            this.dictionary.Remove(new ConfigurationKeySet(configurationId, source));
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldConfigurationId">The old ConfigurationId key element.</param>
        /// <param name="oldSource">The old Source key element.</param>
        /// <param name="newConfigurationId">The new ConfigurationId key element.</param>
        /// <param name="newSource">The new Source key element.</param>
        internal void Update(string oldConfigurationId, string oldSource, string newConfigurationId, string newSource)
        {
            ConfigurationKeySet oldConfigurationKeySet = new ConfigurationKeySet(oldConfigurationId, oldSource);
            ConfigurationRow configurationRow = this.dictionary[oldConfigurationKeySet];
            this.dictionary.Remove(oldConfigurationKeySet);
            this.dictionary.Add(new ConfigurationKeySet(newConfigurationId, newSource), configurationRow);
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, CountryRow> dictionary = new Dictionary<string, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CountryRow Find(string externalId0)
        {
            CountryRow countryRow;
            this.dictionary.TryGetValue(externalId0, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        internal void Add(string externalId0, CountryRow countryRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("CountryExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, countryRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Country table.
    /// </summary>
    public class CountryKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, CountryRow> dictionary = new Dictionary<Guid, CountryRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CountryRow Find(Guid countryId)
        {
            CountryRow countryRow;
            this.dictionary.TryGetValue(countryId, out countryRow);
            return countryRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="countryRow">The <see cref="CountryRow"/> to be added to the index.</param>
        internal void Add(Guid countryId, CountryRow countryRow)
        {
            if (this.dictionary.ContainsKey(countryId))
            {
                throw new DuplicateKeyException("CountryKey", new object[] { countryId });
            }

            this.dictionary.Add(countryId, countryRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid countryId)
        {
            return this.dictionary.ContainsKey(countryId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        internal void Remove(Guid countryId)
        {
            this.dictionary.Remove(countryId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        internal void Update(Guid oldCountryId, Guid newCountryId)
        {
            CountryRow countryRow = this.dictionary[oldCountryId];
            this.dictionary.Remove(oldCountryId);
            this.dictionary.Add(newCountryId, countryRow);
        }
    }

    /// <summary>
    /// Unique key index for the Customer table.
    /// </summary>
    public class CustomerExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, CustomerRow> dictionary = new Dictionary<string, CustomerRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CustomerRow Find(string externalId0)
        {
            CustomerRow customerRow;
            this.dictionary.TryGetValue(externalId0, out customerRow);
            return customerRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="customerRow">The <see cref="CustomerRow"/> to be added to the index.</param>
        internal void Add(string externalId0, CustomerRow customerRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("CustomerExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, customerRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Customer table.
    /// </summary>
    public class CustomerKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, CustomerRow> dictionary = new Dictionary<Guid, CustomerRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public CustomerRow Find(Guid customerId)
        {
            CustomerRow customerRow;
            this.dictionary.TryGetValue(customerId, out customerRow);
            return customerRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="customerRow">The <see cref="CustomerRow"/> to be added to the index.</param>
        internal void Add(Guid customerId, CustomerRow customerRow)
        {
            if (this.dictionary.ContainsKey(customerId))
            {
                throw new DuplicateKeyException("CustomerKey", new object[] { customerId });
            }

            this.dictionary.Add(customerId, customerRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid customerId)
        {
            return this.dictionary.ContainsKey(customerId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        internal void Remove(Guid customerId)
        {
            this.dictionary.Remove(customerId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldCustomerId">The old CustomerId key element.</param>
        /// <param name="newCustomerId">The new CustomerId key element.</param>
        internal void Update(Guid oldCustomerId, Guid newCustomerId)
        {
            CustomerRow customerRow = this.dictionary[oldCustomerId];
            this.dictionary.Remove(oldCustomerId);
            this.dictionary.Add(newCustomerId, customerRow);
        }
    }

    /// <summary>
    /// Unique key index for the License table.
    /// </summary>
    public class LicenseExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, LicenseRow> dictionary = new Dictionary<string, LicenseRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public LicenseRow Find(string externalId0)
        {
            LicenseRow licenseRow;
            this.dictionary.TryGetValue(externalId0, out licenseRow);
            return licenseRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="licenseRow">The <see cref="LicenseRow"/> to be added to the index.</param>
        internal void Add(string externalId0, LicenseRow licenseRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("LicenseExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, licenseRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the License table.
    /// </summary>
    public class LicenseKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, LicenseRow> dictionary = new Dictionary<Guid, LicenseRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public LicenseRow Find(Guid licenseId)
        {
            LicenseRow licenseRow;
            this.dictionary.TryGetValue(licenseId, out licenseRow);
            return licenseRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        /// <param name="licenseRow">The <see cref="LicenseRow"/> to be added to the index.</param>
        internal void Add(Guid licenseId, LicenseRow licenseRow)
        {
            if (this.dictionary.ContainsKey(licenseId))
            {
                throw new DuplicateKeyException("LicenseKey", new object[] { licenseId });
            }

            this.dictionary.Add(licenseId, licenseRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        internal void Remove(Guid licenseId)
        {
            this.dictionary.Remove(licenseId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldLicenseId">The old LicenseId key element.</param>
        /// <param name="newLicenseId">The new LicenseId key element.</param>
        internal void Update(Guid oldLicenseId, Guid newLicenseId)
        {
            LicenseRow licenseRow = this.dictionary[oldLicenseId];
            this.dictionary.Remove(oldLicenseId);
            this.dictionary.Add(newLicenseId, licenseRow);
        }
    }

    /// <summary>
    /// Unique key index for the LicenseType table.
    /// </summary>
    public class LicenseTypeKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, LicenseTypeRow> dictionary = new Dictionary<LicenseTypeCode, LicenseTypeRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public LicenseTypeRow Find(LicenseTypeCode licenseTypeCode)
        {
            LicenseTypeRow licenseTypeRow;
            this.dictionary.TryGetValue(licenseTypeCode, out licenseTypeRow);
            return licenseTypeRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseTypeRow">The <see cref="LicenseTypeRow"/> to be added to the index.</param>
        internal void Add(LicenseTypeCode licenseTypeCode, LicenseTypeRow licenseTypeRow)
        {
            if (this.dictionary.ContainsKey(licenseTypeCode))
            {
                throw new DuplicateKeyException("LicenseTypeKey", new object[] { licenseTypeCode });
            }

            this.dictionary.Add(licenseTypeCode, licenseTypeRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(LicenseTypeCode licenseTypeCode)
        {
            return this.dictionary.ContainsKey(licenseTypeCode);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        internal void Remove(LicenseTypeCode licenseTypeCode)
        {
            this.dictionary.Remove(licenseTypeCode);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        internal void Update(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode)
        {
            LicenseTypeRow licenseTypeRow = this.dictionary[oldLicenseTypeCode];
            this.dictionary.Remove(oldLicenseTypeCode);
            this.dictionary.Add(newLicenseTypeCode, licenseTypeRow);
        }
    }

    /// <summary>
    /// Unique key index for the Product table.
    /// </summary>
    public class ProductExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, ProductRow> dictionary = new Dictionary<string, ProductRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProductRow Find(string externalId0)
        {
            ProductRow productRow;
            this.dictionary.TryGetValue(externalId0, out productRow);
            return productRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="productRow">The <see cref="ProductRow"/> to be added to the index.</param>
        internal void Add(string externalId0, ProductRow productRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("ProductExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, productRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Product table.
    /// </summary>
    public class ProductKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, ProductRow> dictionary = new Dictionary<Guid, ProductRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProductRow Find(Guid productId)
        {
            ProductRow productRow;
            this.dictionary.TryGetValue(productId, out productRow);
            return productRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="productRow">The <see cref="ProductRow"/> to be added to the index.</param>
        internal void Add(Guid productId, ProductRow productRow)
        {
            if (this.dictionary.ContainsKey(productId))
            {
                throw new DuplicateKeyException("ProductKey", new object[] { productId });
            }

            this.dictionary.Add(productId, productRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid productId)
        {
            return this.dictionary.ContainsKey(productId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        internal void Remove(Guid productId)
        {
            this.dictionary.Remove(productId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldProductId">The old ProductId key element.</param>
        /// <param name="newProductId">The new ProductId key element.</param>
        internal void Update(Guid oldProductId, Guid newProductId)
        {
            ProductRow productRow = this.dictionary[oldProductId];
            this.dictionary.Remove(oldProductId);
            this.dictionary.Add(newProductId, productRow);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceExternalId0Key
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<string, ProvinceRow> dictionary = new Dictionary<string, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceExternalId0Key"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceExternalId0Key(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProvinceRow Find(string externalId0)
        {
            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(externalId0, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        internal void Add(string externalId0, ProvinceRow provinceRow)
        {
            if (this.dictionary.ContainsKey(externalId0))
            {
                throw new DuplicateKeyException("ProvinceExternalId0Key", new object[] { externalId0 });
            }

            this.dictionary.Add(externalId0, provinceRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="externalId0">The ExternalId0 key element.</param>
        internal void Remove(string externalId0)
        {
            this.dictionary.Remove(externalId0);
        }
    }

    /// <summary>
    /// Unique key index for the Province table.
    /// </summary>
    public class ProvinceKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, ProvinceRow> dictionary = new Dictionary<Guid, ProvinceRow>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Finds the record indexed by the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>The record indexed by the given key.</returns>
        public ProvinceRow Find(Guid provinceId)
        {
            ProvinceRow provinceRow;
            this.dictionary.TryGetValue(provinceId, out provinceRow);
            return provinceRow;
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="provinceRow">The <see cref="ProvinceRow"/> to be added to the index.</param>
        internal void Add(Guid provinceId, ProvinceRow provinceRow)
        {
            if (this.dictionary.ContainsKey(provinceId))
            {
                throw new DuplicateKeyException("ProvinceKey", new object[] { provinceId });
            }

            this.dictionary.Add(provinceId, provinceRow);
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
        }

        /// <summary>
        /// Gets a value that indicates if the index contains the given key.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>True if the index contains the given key, false otherwise.</returns>
        internal bool ContainsKey(Guid provinceId)
        {
            return this.dictionary.ContainsKey(provinceId);
        }

        /// <summary>
        /// Removes a record from the index.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        internal void Remove(Guid provinceId)
        {
            this.dictionary.Remove(provinceId);
        }

        /// <summary>
        /// Adds a record to the index.
        /// </summary>
        /// <param name="oldProvinceId">The old ProvinceId key element.</param>
        /// <param name="newProvinceId">The new ProvinceId key element.</param>
        internal void Update(Guid oldProvinceId, Guid newProvinceId)
        {
            ProvinceRow provinceRow = this.dictionary[oldProvinceId];
            this.dictionary.Remove(oldProvinceId);
            this.dictionary.Add(newProvinceId, provinceRow);
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Customer table.
    /// </summary>
    public class CountryCustomerCountryIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<CustomerRow>> dictionary = new Dictionary<Guid, HashSet<CustomerRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryCustomerCountryIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryCustomerCountryIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="CustomerRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="CustomerRow"/> rows.</returns>
        public List<CustomerRow> GetCustomerRows(Guid countryId)
        {
            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="customerRow">The child row.</param>
        internal void AddChild(Guid countryId, CustomerRow customerRow)
        {
            if (!this.DataModel.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryCustomerCountryIdKey");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(customerRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, countryId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="customerRow">The child row.</param>
        internal void RemoveChild(Guid countryId, CustomerRow customerRow)
        {
            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, countryId));
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="customerRow">The child <see cref="CustomerRow"/>.</param>
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, CustomerRow customerRow)
        {
            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(customerRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newCountryId, oldCountryId));
        }
    }

    /// <summary>
    /// Relates rows in the Country table to the Province table.
    /// </summary>
    public class CountryProvinceKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<ProvinceRow>> dictionary = new Dictionary<Guid, HashSet<ProvinceRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryProvinceKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CountryProvinceKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="ProvinceRow"/> rows.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <returns>A collection of child <see cref="ProvinceRow"/> rows.</returns>
        public List<ProvinceRow> GetProvinceRows(Guid countryId)
        {
            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        internal void AddChild(Guid countryId, ProvinceRow provinceRow)
        {
            if (!this.DataModel.CountryKey.ContainsKey(countryId))
            {
                throw new ConstraintException("insert", "CountryProvinceKey");
            }

            HashSet<ProvinceRow> hashSet;
            if (!this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(countryId, hashSet);
            }

            hashSet.Add(provinceRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, countryId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        /// <param name="provinceRow">The child row.</param>
        internal void RemoveChild(Guid countryId, ProvinceRow provinceRow)
        {
            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(countryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(countryId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, countryId));
        }

        /// <summary>
        /// Removes a <see cref="ProvinceRow"/> child relation.
        /// </summary>
        /// <param name="oldCountryId">The old CountryId key element.</param>
        /// <param name="newCountryId">The new CountryId key element.</param>
        /// <param name="provinceRow">The child <see cref="ProvinceRow"/>.</param>
        internal void UpdateChild(Guid oldCountryId, Guid newCountryId, ProvinceRow provinceRow)
        {
            HashSet<ProvinceRow> hashSet;
            if (this.dictionary.TryGetValue(oldCountryId, out hashSet))
            {
                hashSet.Remove(provinceRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCountryId);
                }
            }

            if (!this.dictionary.TryGetValue(newCountryId, out hashSet))
            {
                hashSet = new HashSet<ProvinceRow>();
                this.dictionary.Add(newCountryId, hashSet);
            }

            hashSet.Add(provinceRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newCountryId, oldCountryId));
        }
    }

    /// <summary>
    /// Relates rows in the Customer table to the License table.
    /// </summary>
    public class CustomerLicenseCustomerIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<LicenseRow>> dictionary = new Dictionary<Guid, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLicenseCustomerIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal CustomerLicenseCustomerIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        public List<LicenseRow> GetLicenseRows(Guid customerId)
        {
            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void AddChild(Guid customerId, LicenseRow licenseRow)
        {
            if (!this.DataModel.CustomerKey.ContainsKey(customerId))
            {
                throw new ConstraintException("insert", "CustomerLicenseCustomerIdKey");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(customerId, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, customerId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void RemoveChild(Guid customerId, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(customerId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(customerId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, customerId));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldCustomerId">The old CustomerId key element.</param>
        /// <param name="newCustomerId">The new CustomerId key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        internal void UpdateChild(Guid oldCustomerId, Guid newCustomerId, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldCustomerId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldCustomerId);
                }
            }

            if (!this.dictionary.TryGetValue(newCustomerId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newCustomerId, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newCustomerId, oldCustomerId));
        }
    }

    /// <summary>
    /// Relates rows in the LicenseType table to the License table.
    /// </summary>
    public class LicenseTypeLicenseDeveloperLicenseTypeCodeKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, HashSet<LicenseRow>> dictionary = new Dictionary<LicenseTypeCode, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeLicenseDeveloperLicenseTypeCodeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeLicenseDeveloperLicenseTypeCodeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<LicenseTypeCode>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        public List<LicenseRow> GetLicenseRows(LicenseTypeCode licenseTypeCode)
        {
            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void AddChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.DataModel.LicenseTypeKey.ContainsKey(licenseTypeCode))
            {
                throw new ConstraintException("insert", "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(licenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Add, licenseTypeCode));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void RemoveChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(licenseTypeCode);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Remove, licenseTypeCode));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        internal void UpdateChild(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldLicenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldLicenseTypeCode);
                }
            }

            if (!this.dictionary.TryGetValue(newLicenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newLicenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Change, newLicenseTypeCode, oldLicenseTypeCode));
        }
    }

    /// <summary>
    /// Relates rows in the LicenseType table to the License table.
    /// </summary>
    public class LicenseTypeLicenseRuntimeLicenseTypeCodeKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<LicenseTypeCode, HashSet<LicenseRow>> dictionary = new Dictionary<LicenseTypeCode, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseTypeLicenseRuntimeLicenseTypeCodeKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal LicenseTypeLicenseRuntimeLicenseTypeCodeKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<LicenseTypeCode>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        public List<LicenseRow> GetLicenseRows(LicenseTypeCode licenseTypeCode)
        {
            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void AddChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            if (!this.DataModel.LicenseTypeKey.ContainsKey(licenseTypeCode))
            {
                throw new ConstraintException("insert", "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(licenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Add, licenseTypeCode));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void RemoveChild(LicenseTypeCode licenseTypeCode, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(licenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(licenseTypeCode);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Remove, licenseTypeCode));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldLicenseTypeCode">The old LicenseTypeCode key element.</param>
        /// <param name="newLicenseTypeCode">The new LicenseTypeCode key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        internal void UpdateChild(LicenseTypeCode oldLicenseTypeCode, LicenseTypeCode newLicenseTypeCode, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldLicenseTypeCode, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldLicenseTypeCode);
                }
            }

            if (!this.dictionary.TryGetValue(newLicenseTypeCode, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newLicenseTypeCode, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<LicenseTypeCode>(NotifyRelationChangedAction.Change, newLicenseTypeCode, oldLicenseTypeCode));
        }
    }

    /// <summary>
    /// Relates rows in the Product table to the License table.
    /// </summary>
    public class ProductLicenseProductIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<LicenseRow>> dictionary = new Dictionary<Guid, HashSet<LicenseRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductLicenseProductIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProductLicenseProductIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="LicenseRow"/> rows.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <returns>A collection of child <see cref="LicenseRow"/> rows.</returns>
        public List<LicenseRow> GetLicenseRows(Guid productId)
        {
            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void AddChild(Guid productId, LicenseRow licenseRow)
        {
            if (!this.DataModel.ProductKey.ContainsKey(productId))
            {
                throw new ConstraintException("insert", "ProductLicenseProductIdKey");
            }

            HashSet<LicenseRow> hashSet;
            if (!this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(productId, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, productId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        /// <param name="licenseRow">The child row.</param>
        internal void RemoveChild(Guid productId, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(productId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(productId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, productId));
        }

        /// <summary>
        /// Removes a <see cref="LicenseRow"/> child relation.
        /// </summary>
        /// <param name="oldProductId">The old ProductId key element.</param>
        /// <param name="newProductId">The new ProductId key element.</param>
        /// <param name="licenseRow">The child <see cref="LicenseRow"/>.</param>
        internal void UpdateChild(Guid oldProductId, Guid newProductId, LicenseRow licenseRow)
        {
            HashSet<LicenseRow> hashSet;
            if (this.dictionary.TryGetValue(oldProductId, out hashSet))
            {
                hashSet.Remove(licenseRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(oldProductId);
                }
            }

            if (!this.dictionary.TryGetValue(newProductId, out hashSet))
            {
                hashSet = new HashSet<LicenseRow>();
                this.dictionary.Add(newProductId, hashSet);
            }

            hashSet.Add(licenseRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Change, newProductId, oldProductId));
        }
    }

    /// <summary>
    /// Relates rows in the Province table to the Customer table.
    /// </summary>
    public class ProvinceCustomerProvinceIdKey
    {
        /// <summary>
        /// The dictionary containing the index.
        /// </summary>
        private Dictionary<Guid, HashSet<CustomerRow>> dictionary = new Dictionary<Guid, HashSet<CustomerRow>>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvinceCustomerProvinceIdKey"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        internal ProvinceCustomerProvinceIdKey(DataModel dataModel)
        {
            this.DataModel = dataModel;
        }

        /// <summary>
        /// Handles a change to the relation between parent and child.
        /// </summary>
        public event EventHandler<NotifyRelationChangedEventArgs<Guid>> RelationChanged;

        /// <summary>
        /// Gets the data model.
        /// </summary>
        public DataModel DataModel { get; private set; }

        /// <summary>
        /// Gets a collection of child <see cref="CustomerRow"/> rows.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <returns>A collection of child <see cref="CustomerRow"/> rows.</returns>
        public List<CustomerRow> GetCustomerRows(Guid provinceId)
        {
            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
            }

            return hashSet.ToList();
        }

        /// <summary>
        /// Adds a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="customerRow">The child row.</param>
        internal void AddChild(Guid provinceId, CustomerRow customerRow)
        {
            if (!this.DataModel.ProvinceKey.ContainsKey(provinceId))
            {
                throw new ConstraintException("insert", "ProvinceCustomerProvinceIdKey");
            }

            HashSet<CustomerRow> hashSet;
            if (!this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet = new HashSet<CustomerRow>();
                this.dictionary.Add(provinceId, hashSet);
            }

            hashSet.Add(customerRow);
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Add, provinceId));
        }

        /// <summary>
        /// Clears the index.
        /// </summary>
        internal void Clear()
        {
            this.dictionary.Clear();
            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Reset));
        }

        /// <summary>
        /// Removes a <see cref="CustomerRow"/> child relation.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        /// <param name="customerRow">The child row.</param>
        internal void RemoveChild(Guid provinceId, CustomerRow customerRow)
        {
            HashSet<CustomerRow> hashSet;
            if (this.dictionary.TryGetValue(provinceId, out hashSet))
            {
                hashSet.Remove(customerRow);
                if (hashSet.Count == 0)
                {
                    this.dictionary.Remove(provinceId);
                }
            }

            this.RelationChanged?.Invoke(this, new NotifyRelationChangedEventArgs<Guid>(NotifyRelationChangedAction.Remove, provinceId));
        }
    }
}
#pragma warning disable SA1402
#pragma warning disable SA1649
