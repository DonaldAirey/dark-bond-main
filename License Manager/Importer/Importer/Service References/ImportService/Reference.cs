//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DarkBond.LicenseManager.ImportService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImportService.IImportService")]
    public interface IImportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveConfiguration", ReplyAction="http://tempuri.org/IDataModel/RemoveConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveConfigurationConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveConfigurationFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveConfigurationOptimisticConcurrencyFaultFa" +
            "ult", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveConfigurationRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveConfiguration(string[] configurationKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveConfiguration", ReplyAction="http://tempuri.org/IDataModel/RemoveConfigurationResponse")]
        System.Threading.Tasks.Task RemoveConfigurationAsync(string[] configurationKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveCountry", ReplyAction="http://tempuri.org/IDataModel/RemoveCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveCountryConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveCountryFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveCountryOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveCountryRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveCountry(string configurationId, string[] countryKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveCountry", ReplyAction="http://tempuri.org/IDataModel/RemoveCountryResponse")]
        System.Threading.Tasks.Task RemoveCountryAsync(string configurationId, string[] countryKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveCustomer", ReplyAction="http://tempuri.org/IDataModel/RemoveCustomerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveCustomerConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveCustomerFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveCustomerOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveCustomerRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveCustomer(string configurationId, string[] customerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveCustomer", ReplyAction="http://tempuri.org/IDataModel/RemoveCustomerResponse")]
        System.Threading.Tasks.Task RemoveCustomerAsync(string configurationId, string[] customerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveLicense", ReplyAction="http://tempuri.org/IDataModel/RemoveLicenseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveLicenseConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveLicenseFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveLicenseOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveLicenseRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveLicense(string configurationId, string[] licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveLicense", ReplyAction="http://tempuri.org/IDataModel/RemoveLicenseResponse")]
        System.Threading.Tasks.Task RemoveLicenseAsync(string configurationId, string[] licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveLicenseType", ReplyAction="http://tempuri.org/IDataModel/RemoveLicenseTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveLicenseTypeConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveLicenseTypeFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveLicenseTypeOptimisticConcurrencyFaultFaul" +
            "t", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveLicenseTypeRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveLicenseType(string configurationId, string[] licenseTypeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveLicenseType", ReplyAction="http://tempuri.org/IDataModel/RemoveLicenseTypeResponse")]
        System.Threading.Tasks.Task RemoveLicenseTypeAsync(string configurationId, string[] licenseTypeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveProduct", ReplyAction="http://tempuri.org/IDataModel/RemoveProductResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveProductConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveProductFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveProductOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveProductRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveProduct(string configurationId, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveProduct", ReplyAction="http://tempuri.org/IDataModel/RemoveProductResponse")]
        System.Threading.Tasks.Task RemoveProductAsync(string configurationId, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveProvince", ReplyAction="http://tempuri.org/IDataModel/RemoveProvinceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/RemoveProvinceConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/RemoveProvinceFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/RemoveProvinceOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/RemoveProvinceRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void RemoveProvince(string configurationId, string[] provinceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/RemoveProvince", ReplyAction="http://tempuri.org/IDataModel/RemoveProvinceResponse")]
        System.Threading.Tasks.Task RemoveProvinceAsync(string configurationId, string[] provinceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreConfiguration", ReplyAction="http://tempuri.org/IDataModel/StoreConfigurationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreConfigurationConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreConfigurationFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreConfigurationInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreConfigurationOptimisticConcurrencyFaultFau" +
            "lt", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreConfigurationRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreConfiguration(string configurationId, string[] configurationKey, string source, string targetKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreConfiguration", ReplyAction="http://tempuri.org/IDataModel/StoreConfigurationResponse")]
        System.Threading.Tasks.Task StoreConfigurationAsync(string configurationId, string[] configurationKey, string source, string targetKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCountry", ReplyAction="http://tempuri.org/IDataModel/StoreCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreCountryConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreCountryFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreCountryInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreCountryOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreCountryRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreCountry(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCountry", ReplyAction="http://tempuri.org/IDataModel/StoreCountryResponse")]
        System.Threading.Tasks.Task StoreCountryAsync(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCustomer", ReplyAction="http://tempuri.org/IDataModel/StoreCustomerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreCustomerConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreCustomerFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreCustomerInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreCustomerOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreCustomerRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreCustomer(
                    string address1, 
                    string address2, 
                    string city, 
                    string company, 
                    string configurationId, 
                    string[] countryKey, 
                    string customerId, 
                    string[] customerKey, 
                    string dateCreated, 
                    string dateModified, 
                    string dateOfBirth, 
                    string email, 
                    string externalId0, 
                    string firstName, 
                    string lastName, 
                    string middleName, 
                    string phone, 
                    string postalCode, 
                    string[] provinceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCustomer", ReplyAction="http://tempuri.org/IDataModel/StoreCustomerResponse")]
        System.Threading.Tasks.Task StoreCustomerAsync(
                    string address1, 
                    string address2, 
                    string city, 
                    string company, 
                    string configurationId, 
                    string[] countryKey, 
                    string customerId, 
                    string[] customerKey, 
                    string dateCreated, 
                    string dateModified, 
                    string dateOfBirth, 
                    string email, 
                    string externalId0, 
                    string firstName, 
                    string lastName, 
                    string middleName, 
                    string phone, 
                    string postalCode, 
                    string[] provinceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreLicense", ReplyAction="http://tempuri.org/IDataModel/StoreLicenseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreLicenseConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreLicenseFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreLicenseInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreLicenseOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreLicenseRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreLicense(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreLicense", ReplyAction="http://tempuri.org/IDataModel/StoreLicenseResponse")]
        System.Threading.Tasks.Task StoreLicenseAsync(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreLicenseType", ReplyAction="http://tempuri.org/IDataModel/StoreLicenseTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreLicenseTypeConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreLicenseTypeFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreLicenseTypeInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreLicenseTypeOptimisticConcurrencyFaultFault" +
            "", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreLicenseTypeRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreLicenseType(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreLicenseType", ReplyAction="http://tempuri.org/IDataModel/StoreLicenseTypeResponse")]
        System.Threading.Tasks.Task StoreLicenseTypeAsync(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProduct", ReplyAction="http://tempuri.org/IDataModel/StoreProductResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreProductConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreProductFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreProductInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreProductOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreProductRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreProduct(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProduct", ReplyAction="http://tempuri.org/IDataModel/StoreProductResponse")]
        System.Threading.Tasks.Task StoreProductAsync(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProvince", ReplyAction="http://tempuri.org/IDataModel/StoreProvinceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.ConstraintFault), Action="http://tempuri.org/IImportService/StoreProvinceConstraintFaultFault", Name="ConstraintFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.FormatFault), Action="http://tempuri.org/IImportService/StoreProvinceFormatFaultFault", Name="FormatFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.InvalidOperationFault), Action="http://tempuri.org/IImportService/StoreProvinceInvalidOperationFaultFault", Name="InvalidOperationFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.OptimisticConcurrencyFault), Action="http://tempuri.org/IImportService/StoreProvinceOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(DarkBond.ClientModel.RecordNotFoundFault), Action="http://tempuri.org/IImportService/StoreProvinceRecordNotFoundFaultFault", Name="RecordNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/DarkBond.ClientModel")]
        void StoreProvince(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProvince", ReplyAction="http://tempuri.org/IDataModel/StoreProvinceResponse")]
        System.Threading.Tasks.Task StoreProvinceAsync(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImportServiceChannel : DarkBond.LicenseManager.ImportService.IImportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportServiceClient : System.ServiceModel.ClientBase<DarkBond.LicenseManager.ImportService.IImportService>, DarkBond.LicenseManager.ImportService.IImportService {
        
        public ImportServiceClient() {
        }
        
        public ImportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RemoveConfiguration(string[] configurationKey) {
            base.Channel.RemoveConfiguration(configurationKey);
        }
        
        public System.Threading.Tasks.Task RemoveConfigurationAsync(string[] configurationKey) {
            return base.Channel.RemoveConfigurationAsync(configurationKey);
        }
        
        public void RemoveCountry(string configurationId, string[] countryKey) {
            base.Channel.RemoveCountry(configurationId, countryKey);
        }
        
        public System.Threading.Tasks.Task RemoveCountryAsync(string configurationId, string[] countryKey) {
            return base.Channel.RemoveCountryAsync(configurationId, countryKey);
        }
        
        public void RemoveCustomer(string configurationId, string[] customerKey) {
            base.Channel.RemoveCustomer(configurationId, customerKey);
        }
        
        public System.Threading.Tasks.Task RemoveCustomerAsync(string configurationId, string[] customerKey) {
            return base.Channel.RemoveCustomerAsync(configurationId, customerKey);
        }
        
        public void RemoveLicense(string configurationId, string[] licenseKey) {
            base.Channel.RemoveLicense(configurationId, licenseKey);
        }
        
        public System.Threading.Tasks.Task RemoveLicenseAsync(string configurationId, string[] licenseKey) {
            return base.Channel.RemoveLicenseAsync(configurationId, licenseKey);
        }
        
        public void RemoveLicenseType(string configurationId, string[] licenseTypeKey) {
            base.Channel.RemoveLicenseType(configurationId, licenseTypeKey);
        }
        
        public System.Threading.Tasks.Task RemoveLicenseTypeAsync(string configurationId, string[] licenseTypeKey) {
            return base.Channel.RemoveLicenseTypeAsync(configurationId, licenseTypeKey);
        }
        
        public void RemoveProduct(string configurationId, string[] productKey) {
            base.Channel.RemoveProduct(configurationId, productKey);
        }
        
        public System.Threading.Tasks.Task RemoveProductAsync(string configurationId, string[] productKey) {
            return base.Channel.RemoveProductAsync(configurationId, productKey);
        }
        
        public void RemoveProvince(string configurationId, string[] provinceKey) {
            base.Channel.RemoveProvince(configurationId, provinceKey);
        }
        
        public System.Threading.Tasks.Task RemoveProvinceAsync(string configurationId, string[] provinceKey) {
            return base.Channel.RemoveProvinceAsync(configurationId, provinceKey);
        }
        
        public void StoreConfiguration(string configurationId, string[] configurationKey, string source, string targetKey) {
            base.Channel.StoreConfiguration(configurationId, configurationKey, source, targetKey);
        }
        
        public System.Threading.Tasks.Task StoreConfigurationAsync(string configurationId, string[] configurationKey, string source, string targetKey) {
            return base.Channel.StoreConfigurationAsync(configurationId, configurationKey, source, targetKey);
        }
        
        public void StoreCountry(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name) {
            base.Channel.StoreCountry(abbreviation, configurationId, countryId, countryKey, externalId0, name);
        }
        
        public System.Threading.Tasks.Task StoreCountryAsync(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name) {
            return base.Channel.StoreCountryAsync(abbreviation, configurationId, countryId, countryKey, externalId0, name);
        }
        
        public void StoreCustomer(
                    string address1, 
                    string address2, 
                    string city, 
                    string company, 
                    string configurationId, 
                    string[] countryKey, 
                    string customerId, 
                    string[] customerKey, 
                    string dateCreated, 
                    string dateModified, 
                    string dateOfBirth, 
                    string email, 
                    string externalId0, 
                    string firstName, 
                    string lastName, 
                    string middleName, 
                    string phone, 
                    string postalCode, 
                    string[] provinceKey) {
            base.Channel.StoreCustomer(address1, address2, city, company, configurationId, countryKey, customerId, customerKey, dateCreated, dateModified, dateOfBirth, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceKey);
        }
        
        public System.Threading.Tasks.Task StoreCustomerAsync(
                    string address1, 
                    string address2, 
                    string city, 
                    string company, 
                    string configurationId, 
                    string[] countryKey, 
                    string customerId, 
                    string[] customerKey, 
                    string dateCreated, 
                    string dateModified, 
                    string dateOfBirth, 
                    string email, 
                    string externalId0, 
                    string firstName, 
                    string lastName, 
                    string middleName, 
                    string phone, 
                    string postalCode, 
                    string[] provinceKey) {
            return base.Channel.StoreCustomerAsync(address1, address2, city, company, configurationId, countryKey, customerId, customerKey, dateCreated, dateModified, dateOfBirth, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceKey);
        }
        
        public void StoreLicense(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey) {
            base.Channel.StoreLicense(configurationId, customerKey, dateCreated, dateModified, externalId0, licenseId, licenseKey, licenseTypeByDeveloperLicenseTypeCodeKey, licenseTypeByRuntimeLicenseTypeCodeKey, productKey);
        }
        
        public System.Threading.Tasks.Task StoreLicenseAsync(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey) {
            return base.Channel.StoreLicenseAsync(configurationId, customerKey, dateCreated, dateModified, externalId0, licenseId, licenseKey, licenseTypeByDeveloperLicenseTypeCodeKey, licenseTypeByRuntimeLicenseTypeCodeKey, productKey);
        }
        
        public void StoreLicenseType(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey) {
            base.Channel.StoreLicenseType(configurationId, description, licenseTypeCode, licenseTypeKey);
        }
        
        public System.Threading.Tasks.Task StoreLicenseTypeAsync(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey) {
            return base.Channel.StoreLicenseTypeAsync(configurationId, description, licenseTypeCode, licenseTypeKey);
        }
        
        public void StoreProduct(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey) {
            base.Channel.StoreProduct(configurationId, dateCreated, dateModified, description, externalId0, name, productId, productKey);
        }
        
        public System.Threading.Tasks.Task StoreProductAsync(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey) {
            return base.Channel.StoreProductAsync(configurationId, dateCreated, dateModified, description, externalId0, name, productId, productKey);
        }
        
        public void StoreProvince(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey) {
            base.Channel.StoreProvince(abbreviation, configurationId, countryKey, externalId0, name, provinceId, provinceKey);
        }
        
        public System.Threading.Tasks.Task StoreProvinceAsync(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey) {
            return base.Channel.StoreProvinceAsync(abbreviation, configurationId, countryKey, externalId0, name, provinceId, provinceKey);
        }
    }
}
