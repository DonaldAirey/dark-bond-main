// <auto-generated />
namespace DarkBond.LicenseManager
{
    using System;
    using System.Composition;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Security.Permissions;
    using System.ServiceModel;
    using DarkBond.ClientModel;
    using DarkBond.ServiceModel;

    /// <summary>
    /// Interface to the import services.
    /// </summary>
    [ServiceContract]
    public interface IImportService
    {
        /// <summary>
        /// Removes a record from the Configuration table.
        /// </summary>
        /// <param name="configurationKey">The key elements to find the Configuration record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveConfiguration", ReplyAction = "http://tempuri.org/IDataModel/RemoveConfigurationResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveConfiguration(string[] configurationKey);

        /// <summary>
        /// Removes a record from the Country table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="countryKey">The key elements to find the Country record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveCountry", ReplyAction = "http://tempuri.org/IDataModel/RemoveCountryResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveCountry(string configurationId, string[] countryKey);

        /// <summary>
        /// Removes a record from the Customer table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="customerKey">The key elements to find the Customer record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveCustomer", ReplyAction = "http://tempuri.org/IDataModel/RemoveCustomerResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveCustomer(string configurationId, string[] customerKey);

        /// <summary>
        /// Removes a record from the License table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="licenseKey">The key elements to find the License record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveLicense", ReplyAction = "http://tempuri.org/IDataModel/RemoveLicenseResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveLicense(string configurationId, string[] licenseKey);

        /// <summary>
        /// Removes a record from the LicenseType table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="licenseTypeKey">The key elements to find the LicenseType record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveLicenseType", ReplyAction = "http://tempuri.org/IDataModel/RemoveLicenseTypeResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveLicenseType(string configurationId, string[] licenseTypeKey);

        /// <summary>
        /// Removes a record from the Product table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="productKey">The key elements to find the Product record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveProduct", ReplyAction = "http://tempuri.org/IDataModel/RemoveProductResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveProduct(string configurationId, string[] productKey);

        /// <summary>
        /// Removes a record from the Province table.
        /// </summary>
        /// <param name="configurationId">The configuration identifier.</param>
        /// <param name="provinceKey">The key elements to find the Province record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/RemoveProvince", ReplyAction = "http://tempuri.org/IDataModel/RemoveProvinceResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void RemoveProvince(string configurationId, string[] provinceKey);

        /// <summary>
        /// Stores a record in the Configuration table.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationKey">A required unique key for the Configuration record.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreConfiguration", ReplyAction = "http://tempuri.org/IDataModel/StoreConfigurationResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreConfiguration(string configurationId, string[] configurationKey, string source, string targetKey);

        /// <summary>
        /// Stores a record in the Country table.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryKey">A required unique key for the Country record.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreCountry", ReplyAction = "http://tempuri.org/IDataModel/StoreCountryResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreCountry(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name);

        /// <summary>
        /// Stores a record in the Customer table.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="company">The required value for the company column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryKey">A required unique key for the parent Country record.</param>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="customerKey">A required unique key for the Customer record.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="firstName">The required value for the firstName column.</param>
        /// <param name="lastName">The optional value for the lastName column.</param>
        /// <param name="middleName">The required value for the middleName column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="provinceKey">An optional unique key for the parent Province record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreCustomer", ReplyAction = "http://tempuri.org/IDataModel/StoreCustomerResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreCustomer(string address1, string address2, string city, string company, string configurationId, string[] countryKey, string customerId, string[] customerKey, string dateCreated, string dateModified, string dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, string[] provinceKey);

        /// <summary>
        /// Stores a record in the License table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="customerKey">A required unique key for the parent Customer record.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="licenseId">The optional value for the licenseId column.</param>
        /// <param name="licenseKey">A required unique key for the License record.</param>
        /// <param name="licenseTypeByDeveloperLicenseTypeCodeKey">A required unique key for the parent licenseType using DeveloperLicenseTypeCode record.</param>
        /// <param name="licenseTypeByRuntimeLicenseTypeCodeKey">A required unique key for the parent licenseType using RuntimeLicenseTypeCode record.</param>
        /// <param name="productKey">A required unique key for the parent Product record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreLicense", ReplyAction = "http://tempuri.org/IDataModel/StoreLicenseResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreLicense(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey);

        /// <summary>
        /// Stores a record in the LicenseType table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="description">The optional value for the description column.</param>
        /// <param name="licenseTypeCode">The optional value for the licenseTypeCode column.</param>
        /// <param name="licenseTypeKey">A required unique key for the LicenseType record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreLicenseType", ReplyAction = "http://tempuri.org/IDataModel/StoreLicenseTypeResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreLicenseType(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey);

        /// <summary>
        /// Stores a record in the Product table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="productKey">A required unique key for the Product record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreProduct", ReplyAction = "http://tempuri.org/IDataModel/StoreProductResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreProduct(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey);

        /// <summary>
        /// Stores a record in the Province table.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryKey">A required unique key for the parent Country record.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceKey">A required unique key for the Province record.</param>
        [OperationContract(Action = "http://tempuri.org/IDataModel/StoreProvince", ReplyAction = "http://tempuri.org/IDataModel/StoreProvinceResponse")]
        [TransactionFlow(TransactionFlowOption.Allowed)]
        [FaultContract(typeof(ConstraintFault))]
        [FaultContract(typeof(FormatFault))]
        [FaultContract(typeof(InvalidOperationFault))]
        [FaultContract(typeof(OptimisticConcurrencyFault))]
        [FaultContract(typeof(RecordNotFoundFault))]
        [FaultContract(typeof(SecurityTokenExpiredFault))]
        void StoreProvince(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey);
    }

    /// <summary>
    /// Provides import services.
    /// </summary>
    public class ImportService : IImportService
    {
        /// <summary>
        /// The data model.
        /// </summary>
        private DataModel dataModel;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportService"/> class.
        /// </summary>
        /// <param name="dataModel">The data model.</param>
        public ImportService(DataModel dataModel)
        {
            this.dataModel = dataModel;
        }

        /// <summary>
        /// Removes a record from the Configuration table.
        /// </summary>
        /// <param name="configurationKey">The key elements to find the Configuration record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveConfiguration(string[] configurationKey)
        {
            if (configurationKey == null)
            {
                throw new ArgumentNullException("configurationKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                string configurationId = default(string);
                string source = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationKey[0], configurationKey[1]);
                    if (configurationRow != null)
                    {
                        try
                        {
                            configurationRow.AcquireReaderLock();
                            configurationId = configurationRow.ConfigurationId;
                            source = configurationRow.Source;
                            rowVersion = configurationRow.RowVersion;
                            isFound = true;
                        }
                        finally
                        {
                            configurationRow.ReleaseReaderLock();
                        }
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                if (isFound)
                {
                    this.dataModel.DeleteConfiguration(configurationId, rowVersion, source);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the Country table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryKey">The key elements to find the Country record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveCountry(string configurationId, string[] countryKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (countryKey == null)
            {
                throw new ArgumentNullException("countryKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                Guid countryId = default(Guid);
                string countryTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Country");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Country" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        countryTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                CountryRow countryRow = null;
                switch (countryTargetKey)
                {
                    case "CountryExternalId0Key":
                        try
                        {
                            this.dataModel.CountryExternalId0Key.AcquireReaderLock();
                            countryRow = this.dataModel.CountryExternalId0Key.Find(countryKey[0]);
                        }
                        finally
                        {
                            this.dataModel.CountryExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CountryKey":
                        try
                        {
                            this.dataModel.CountryKey.AcquireReaderLock();
                            countryRow = this.dataModel.CountryKey.Find(Guid.Parse(countryKey[0]));
                        }
                        finally
                        {
                            this.dataModel.CountryKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (countryRow != null)
                {
                    try
                    {
                        countryRow.AcquireReaderLock();
                        countryId = countryRow.CountryId;
                        rowVersion = countryRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        countryRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    this.dataModel.DeleteCountry(countryId, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the Customer table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="customerKey">The key elements to find the Customer record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveCustomer(string configurationId, string[] customerKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (customerKey == null)
            {
                throw new ArgumentNullException("customerKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                Guid customerId = default(Guid);
                string customerTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Customer");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Customer" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        customerTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                CustomerRow customerRow = null;
                switch (customerTargetKey)
                {
                    case "CustomerExternalId0Key":
                        try
                        {
                            this.dataModel.CustomerExternalId0Key.AcquireReaderLock();
                            customerRow = this.dataModel.CustomerExternalId0Key.Find(customerKey[0]);
                        }
                        finally
                        {
                            this.dataModel.CustomerExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CustomerKey":
                        try
                        {
                            this.dataModel.CustomerKey.AcquireReaderLock();
                            customerRow = this.dataModel.CustomerKey.Find(Guid.Parse(customerKey[0]));
                        }
                        finally
                        {
                            this.dataModel.CustomerKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (customerRow != null)
                {
                    try
                    {
                        customerRow.AcquireReaderLock();
                        customerId = customerRow.CustomerId;
                        rowVersion = customerRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        customerRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    this.dataModel.DeleteCustomer(customerId, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the License table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="licenseKey">The key elements to find the License record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveLicense(string configurationId, string[] licenseKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (licenseKey == null)
            {
                throw new ArgumentNullException("licenseKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                Guid licenseId = default(Guid);
                string licenseTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "License");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "License" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        licenseTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                LicenseRow licenseRow = null;
                switch (licenseTargetKey)
                {
                    case "LicenseExternalId0Key":
                        try
                        {
                            this.dataModel.LicenseExternalId0Key.AcquireReaderLock();
                            licenseRow = this.dataModel.LicenseExternalId0Key.Find(licenseKey[0]);
                        }
                        finally
                        {
                            this.dataModel.LicenseExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "LicenseKey":
                        try
                        {
                            this.dataModel.LicenseKey.AcquireReaderLock();
                            licenseRow = this.dataModel.LicenseKey.Find(Guid.Parse(licenseKey[0]));
                        }
                        finally
                        {
                            this.dataModel.LicenseKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (licenseRow != null)
                {
                    try
                    {
                        licenseRow.AcquireReaderLock();
                        licenseId = licenseRow.LicenseId;
                        rowVersion = licenseRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        licenseRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    this.dataModel.DeleteLicense(licenseId, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the LicenseType table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="licenseTypeKey">The key elements to find the LicenseType record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveLicenseType(string configurationId, string[] licenseTypeKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (licenseTypeKey == null)
            {
                throw new ArgumentNullException("licenseTypeKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                LicenseTypeCode licenseTypeCode = default(LicenseTypeCode);
                try
                {
                    this.dataModel.LicenseTypeKey.AcquireReaderLock();
                    LicenseTypeRow licenseTypeRow = this.dataModel.LicenseTypeKey.Find((LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeKey[0]));
                    if (licenseTypeRow != null)
                    {
                        try
                        {
                            licenseTypeRow.AcquireReaderLock();
                            licenseTypeCode = licenseTypeRow.LicenseTypeCode;
                            rowVersion = licenseTypeRow.RowVersion;
                            isFound = true;
                        }
                        finally
                        {
                            licenseTypeRow.ReleaseReaderLock();
                        }
                    }
                }
                finally
                {
                    this.dataModel.LicenseTypeKey.ReleaseReaderLock();
                }

                if (isFound)
                {
                    this.dataModel.DeleteLicenseType(licenseTypeCode, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the Product table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="productKey">The key elements to find the Product record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveProduct(string configurationId, string[] productKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (productKey == null)
            {
                throw new ArgumentNullException("productKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                Guid productId = default(Guid);
                string productTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Product");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Product" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        productTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                ProductRow productRow = null;
                switch (productTargetKey)
                {
                    case "ProductExternalId0Key":
                        try
                        {
                            this.dataModel.ProductExternalId0Key.AcquireReaderLock();
                            productRow = this.dataModel.ProductExternalId0Key.Find(productKey[0]);
                        }
                        finally
                        {
                            this.dataModel.ProductExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "ProductKey":
                        try
                        {
                            this.dataModel.ProductKey.AcquireReaderLock();
                            productRow = this.dataModel.ProductKey.Find(Guid.Parse(productKey[0]));
                        }
                        finally
                        {
                            this.dataModel.ProductKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (productRow != null)
                {
                    try
                    {
                        productRow.AcquireReaderLock();
                        productId = productRow.ProductId;
                        rowVersion = productRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        productRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    this.dataModel.DeleteProduct(productId, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Removes a record from the Province table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="provinceKey">The key elements to find the Province record.</param>
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Delete, Resource = ClaimResources.Application)]
        public void RemoveProvince(string configurationId, string[] provinceKey)
        {
            if (configurationId == null)
            {
                throw new ArgumentNullException("configurationId");
            }

            if (provinceKey == null)
            {
                throw new ArgumentNullException("provinceKey");
            }

            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                Guid provinceId = default(Guid);
                string provinceTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Province");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Province" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        provinceTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                ProvinceRow provinceRow = null;
                switch (provinceTargetKey)
                {
                    case "ProvinceExternalId0Key":
                        try
                        {
                            this.dataModel.ProvinceExternalId0Key.AcquireReaderLock();
                            provinceRow = this.dataModel.ProvinceExternalId0Key.Find(provinceKey[0]);
                        }
                        finally
                        {
                            this.dataModel.ProvinceExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "ProvinceKey":
                        try
                        {
                            this.dataModel.ProvinceKey.AcquireReaderLock();
                            provinceRow = this.dataModel.ProvinceKey.Find(Guid.Parse(provinceKey[0]));
                        }
                        finally
                        {
                            this.dataModel.ProvinceKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (provinceRow != null)
                {
                    try
                    {
                        provinceRow.AcquireReaderLock();
                        provinceId = provinceRow.ProvinceId;
                        rowVersion = provinceRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        provinceRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    this.dataModel.DeleteProvince(provinceId, rowVersion);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the Configuration table.
        /// </summary>
        /// <param name="configurationId">The optional value for the configurationId column.</param>
        /// <param name="configurationKey">A required unique key for the Configuration record.</param>
        /// <param name="source">The optional value for the source column.</param>
        /// <param name="targetKey">The optional value for the targetKey column.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreConfiguration(string configurationId, string[] configurationKey, string source, string targetKey)
        {
            try
            {
                long rowVersion = default(long);
                bool isFound = false;
                string configurationIdKey = default(string);
                string sourceKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = configurationKey == null ? this.dataModel.ConfigurationKey.Find(configurationId, source) : this.dataModel.ConfigurationKey.Find(configurationKey[0], configurationKey[1]);
                    if (configurationRow != null)
                    {
                        try
                        {
                            configurationRow.AcquireReaderLock();
                            configurationIdKey = configurationRow.ConfigurationId;
                            sourceKey = configurationRow.Source;
                            rowVersion = configurationRow.RowVersion;
                            isFound = true;
                        }
                        finally
                        {
                            configurationRow.ReleaseReaderLock();
                        }
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                if (isFound)
                {
                    this.dataModel.UpdateConfiguration(configurationId, configurationIdKey, rowVersion, source, sourceKey, targetKey);
                }
                else
                {
                    this.dataModel.CreateConfiguration(configurationId, source, targetKey);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the Country table.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryId">The optional value for the countryId column.</param>
        /// <param name="countryKey">A required unique key for the Country record.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreCountry(string abbreviation, string configurationId, string countryId, string[] countryKey, string externalId0, string name)
        {
            try
            {
                Guid countryIdParsed = string.IsNullOrEmpty(countryId) ? default(Guid) : Guid.Parse(countryId);
                long rowVersion = default(long);
                bool isFound = false;
                Guid countryIdKey = default(Guid);
                string countryTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Country");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Country" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        countryTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                CountryRow countryRow = null;
                switch (countryTargetKey)
                {
                    case "CountryExternalId0Key":
                        try
                        {
                            this.dataModel.CountryExternalId0Key.AcquireReaderLock();
                            countryRow = countryKey == null ? this.dataModel.CountryExternalId0Key.Find(externalId0) : this.dataModel.CountryExternalId0Key.Find(countryKey[0]);
                        }
                        finally
                        {
                            this.dataModel.CountryExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CountryKey":
                        try
                        {
                            this.dataModel.CountryKey.AcquireReaderLock();
                            countryRow = countryKey == null ? this.dataModel.CountryKey.Find(countryIdParsed) : this.dataModel.CountryKey.Find(Guid.Parse(countryKey[0]));
                        }
                        finally
                        {
                            this.dataModel.CountryKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (countryRow != null)
                {
                    try
                    {
                        countryRow.AcquireReaderLock();
                        countryIdKey = countryRow.CountryId;
                        rowVersion = countryRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        countryRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    if (countryIdParsed == default(Guid))
                    {
                        countryIdParsed = countryIdKey;
                    }

                    this.dataModel.UpdateCountry(abbreviation, countryIdParsed, countryIdKey, externalId0, name, rowVersion);
                }
                else
                {
                    if (countryIdParsed == default(Guid))
                    {
                        countryIdParsed = Guid.NewGuid();
                    }

                    this.dataModel.CreateCountry(abbreviation, countryIdParsed, externalId0, name);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the Customer table.
        /// </summary>
        /// <param name="address1">The optional value for the address1 column.</param>
        /// <param name="address2">The required value for the address2 column.</param>
        /// <param name="city">The optional value for the city column.</param>
        /// <param name="company">The required value for the company column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryKey">A required unique key for the parent Country record.</param>
        /// <param name="customerId">The optional value for the customerId column.</param>
        /// <param name="customerKey">A required unique key for the Customer record.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="dateOfBirth">The optional value for the dateOfBirth column.</param>
        /// <param name="email">The optional value for the email column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="firstName">The required value for the firstName column.</param>
        /// <param name="lastName">The optional value for the lastName column.</param>
        /// <param name="middleName">The required value for the middleName column.</param>
        /// <param name="phone">The optional value for the phone column.</param>
        /// <param name="postalCode">The optional value for the postalCode column.</param>
        /// <param name="provinceKey">An optional unique key for the parent Province record.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreCustomer(string address1, string address2, string city, string company, string configurationId, string[] countryKey, string customerId, string[] customerKey, string dateCreated, string dateModified, string dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, string[] provinceKey)
        {
            if (countryKey == null)
            {
                throw new ArgumentNullException("countryKey");
            }

            try
            {
                Guid customerIdParsed = string.IsNullOrEmpty(customerId) ? default(Guid) : Guid.Parse(customerId);
                DateTime dateCreatedParsed = string.IsNullOrEmpty(dateCreated) ? default(DateTime) : DateTime.Parse(dateCreated, CultureInfo.CurrentCulture);
                DateTime dateModifiedParsed = string.IsNullOrEmpty(dateModified) ? default(DateTime) : DateTime.Parse(dateModified, CultureInfo.CurrentCulture);
                DateTime dateOfBirthParsed = string.IsNullOrEmpty(dateOfBirth) ? default(DateTime) : DateTime.Parse(dateOfBirth, CultureInfo.CurrentCulture);
                string countryCustomerCountryIdKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "CountryCustomerCountryIdKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "CountryCustomerCountryIdKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        countryCustomerCountryIdKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                Guid countryId;
                CountryRow countryCustomerCountryIdKeyRow = null;
                switch (countryCustomerCountryIdKeyTargetKey)
                {
                    case "CountryExternalId0Key":
                        try
                        {
                            this.dataModel.CountryExternalId0Key.AcquireReaderLock();
                            countryCustomerCountryIdKeyRow = this.dataModel.CountryExternalId0Key.Find(countryKey[0]);
                            if (countryCustomerCountryIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CountryExternalId0Key", new object[] { countryKey[0] }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CountryExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CountryKey":
                        try
                        {
                            this.dataModel.CountryKey.AcquireReaderLock();
                            countryCustomerCountryIdKeyRow = this.dataModel.CountryKey.Find(Guid.Parse(countryKey[0]));
                            if (countryCustomerCountryIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CountryKey", new object[] { Guid.Parse(countryKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CountryKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    countryCustomerCountryIdKeyRow.AcquireReaderLock();
                    countryId = countryCustomerCountryIdKeyRow.CountryId;
                }
                finally
                {
                    countryCustomerCountryIdKeyRow.ReleaseReaderLock();
                }

                string provinceCustomerProvinceIdKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "ProvinceCustomerProvinceIdKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "ProvinceCustomerProvinceIdKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        provinceCustomerProvinceIdKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                Guid? provinceId;
                ProvinceRow provinceCustomerProvinceIdKeyRow = null;
                if (provinceKey != null)
                {
                    switch (provinceCustomerProvinceIdKeyTargetKey)
                    {
                        case "ProvinceExternalId0Key":
                            try
                            {
                                this.dataModel.ProvinceExternalId0Key.AcquireReaderLock();
                                provinceCustomerProvinceIdKeyRow = this.dataModel.ProvinceExternalId0Key.Find(provinceKey[0]);
                                if (provinceCustomerProvinceIdKeyRow == null)
                                {
                                    throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ProvinceExternalId0Key", new object[] { provinceKey[0] }));
                                }
                            }
                            finally
                            {
                                this.dataModel.ProvinceExternalId0Key.ReleaseReaderLock();
                            }

                            break;
                        case "ProvinceKey":
                            try
                            {
                                this.dataModel.ProvinceKey.AcquireReaderLock();
                                provinceCustomerProvinceIdKeyRow = this.dataModel.ProvinceKey.Find(Guid.Parse(provinceKey[0]));
                                if (provinceCustomerProvinceIdKeyRow == null)
                                {
                                    throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ProvinceKey", new object[] { Guid.Parse(provinceKey[0]) }));
                                }
                            }
                            finally
                            {
                                this.dataModel.ProvinceKey.ReleaseReaderLock();
                            }

                            break;
                    }
                }

                try
                {
                    provinceCustomerProvinceIdKeyRow.AcquireReaderLock();
                    provinceId = provinceCustomerProvinceIdKeyRow.ProvinceId;
                }
                finally
                {
                    provinceCustomerProvinceIdKeyRow.ReleaseReaderLock();
                }

                long rowVersion = default(long);
                bool isFound = false;
                Guid customerIdKey = default(Guid);
                string customerTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Customer");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Customer" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        customerTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                CustomerRow customerRow = null;
                switch (customerTargetKey)
                {
                    case "CustomerExternalId0Key":
                        try
                        {
                            this.dataModel.CustomerExternalId0Key.AcquireReaderLock();
                            customerRow = customerKey == null ? this.dataModel.CustomerExternalId0Key.Find(externalId0) : this.dataModel.CustomerExternalId0Key.Find(customerKey[0]);
                        }
                        finally
                        {
                            this.dataModel.CustomerExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CustomerKey":
                        try
                        {
                            this.dataModel.CustomerKey.AcquireReaderLock();
                            customerRow = customerKey == null ? this.dataModel.CustomerKey.Find(customerIdParsed) : this.dataModel.CustomerKey.Find(Guid.Parse(customerKey[0]));
                        }
                        finally
                        {
                            this.dataModel.CustomerKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (customerRow != null)
                {
                    try
                    {
                        customerRow.AcquireReaderLock();
                        customerIdKey = customerRow.CustomerId;
                        rowVersion = customerRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        customerRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    if (customerIdParsed == default(Guid))
                    {
                        customerIdParsed = customerIdKey;
                    }

                    this.dataModel.UpdateCustomer(address1, address2, city, company, countryId, customerIdParsed, customerIdKey, dateCreatedParsed, dateModifiedParsed, dateOfBirthParsed, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceId, rowVersion);
                }
                else
                {
                    if (customerIdParsed == default(Guid))
                    {
                        customerIdParsed = Guid.NewGuid();
                    }

                    this.dataModel.CreateCustomer(address1, address2, city, company, countryId, customerIdParsed, dateCreatedParsed, dateModifiedParsed, dateOfBirthParsed, email, externalId0, firstName, lastName, middleName, phone, postalCode, provinceId);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the License table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="customerKey">A required unique key for the parent Customer record.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="licenseId">The optional value for the licenseId column.</param>
        /// <param name="licenseKey">A required unique key for the License record.</param>
        /// <param name="licenseTypeByDeveloperLicenseTypeCodeKey">A required unique key for the parent licenseType using DeveloperLicenseTypeCode record.</param>
        /// <param name="licenseTypeByRuntimeLicenseTypeCodeKey">A required unique key for the parent licenseType using RuntimeLicenseTypeCode record.</param>
        /// <param name="productKey">A required unique key for the parent Product record.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreLicense(string configurationId, string[] customerKey, string dateCreated, string dateModified, string externalId0, string licenseId, string[] licenseKey, string[] licenseTypeByDeveloperLicenseTypeCodeKey, string[] licenseTypeByRuntimeLicenseTypeCodeKey, string[] productKey)
        {
            if (customerKey == null)
            {
                throw new ArgumentNullException("customerKey");
            }

            if (licenseTypeByDeveloperLicenseTypeCodeKey == null)
            {
                throw new ArgumentNullException("licenseTypeByDeveloperLicenseTypeCodeKey");
            }

            if (licenseTypeByRuntimeLicenseTypeCodeKey == null)
            {
                throw new ArgumentNullException("licenseTypeByRuntimeLicenseTypeCodeKey");
            }

            if (productKey == null)
            {
                throw new ArgumentNullException("productKey");
            }

            try
            {
                DateTime dateCreatedParsed = string.IsNullOrEmpty(dateCreated) ? default(DateTime) : DateTime.Parse(dateCreated, CultureInfo.CurrentCulture);
                DateTime dateModifiedParsed = string.IsNullOrEmpty(dateModified) ? default(DateTime) : DateTime.Parse(dateModified, CultureInfo.CurrentCulture);
                Guid licenseIdParsed = string.IsNullOrEmpty(licenseId) ? default(Guid) : Guid.Parse(licenseId);
                string customerLicenseCustomerIdKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "CustomerLicenseCustomerIdKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "CustomerLicenseCustomerIdKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        customerLicenseCustomerIdKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                Guid customerId;
                CustomerRow customerLicenseCustomerIdKeyRow = null;
                switch (customerLicenseCustomerIdKeyTargetKey)
                {
                    case "CustomerExternalId0Key":
                        try
                        {
                            this.dataModel.CustomerExternalId0Key.AcquireReaderLock();
                            customerLicenseCustomerIdKeyRow = this.dataModel.CustomerExternalId0Key.Find(customerKey[0]);
                            if (customerLicenseCustomerIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CustomerExternalId0Key", new object[] { customerKey[0] }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CustomerExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CustomerKey":
                        try
                        {
                            this.dataModel.CustomerKey.AcquireReaderLock();
                            customerLicenseCustomerIdKeyRow = this.dataModel.CustomerKey.Find(Guid.Parse(customerKey[0]));
                            if (customerLicenseCustomerIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CustomerKey", new object[] { Guid.Parse(customerKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CustomerKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    customerLicenseCustomerIdKeyRow.AcquireReaderLock();
                    customerId = customerLicenseCustomerIdKeyRow.CustomerId;
                }
                finally
                {
                    customerLicenseCustomerIdKeyRow.ReleaseReaderLock();
                }

                string licenseTypeLicenseDeveloperLicenseTypeCodeKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "LicenseTypeLicenseDeveloperLicenseTypeCodeKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "LicenseTypeLicenseDeveloperLicenseTypeCodeKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        licenseTypeLicenseDeveloperLicenseTypeCodeKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                LicenseTypeCode developerLicenseTypeCode;
                LicenseTypeRow licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow = null;
                switch (licenseTypeLicenseDeveloperLicenseTypeCodeKeyTargetKey)
                {
                    case "LicenseTypeKey":
                        try
                        {
                            this.dataModel.LicenseTypeKey.AcquireReaderLock();
                            licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow = this.dataModel.LicenseTypeKey.Find((LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeByDeveloperLicenseTypeCodeKey[0]));
                            if (licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("LicenseTypeKey", new object[] { (LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeByDeveloperLicenseTypeCodeKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.LicenseTypeKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow.AcquireReaderLock();
                    developerLicenseTypeCode = licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow.LicenseTypeCode;
                }
                finally
                {
                    licenseTypeLicenseDeveloperLicenseTypeCodeKeyRow.ReleaseReaderLock();
                }

                string licenseTypeLicenseRuntimeLicenseTypeCodeKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "LicenseTypeLicenseRuntimeLicenseTypeCodeKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "LicenseTypeLicenseRuntimeLicenseTypeCodeKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        licenseTypeLicenseRuntimeLicenseTypeCodeKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                LicenseTypeCode runtimeLicenseTypeCode;
                LicenseTypeRow licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow = null;
                switch (licenseTypeLicenseRuntimeLicenseTypeCodeKeyTargetKey)
                {
                    case "LicenseTypeKey":
                        try
                        {
                            this.dataModel.LicenseTypeKey.AcquireReaderLock();
                            licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow = this.dataModel.LicenseTypeKey.Find((LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeByRuntimeLicenseTypeCodeKey[0]));
                            if (licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("LicenseTypeKey", new object[] { (LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeByRuntimeLicenseTypeCodeKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.LicenseTypeKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow.AcquireReaderLock();
                    runtimeLicenseTypeCode = licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow.LicenseTypeCode;
                }
                finally
                {
                    licenseTypeLicenseRuntimeLicenseTypeCodeKeyRow.ReleaseReaderLock();
                }

                string productLicenseProductIdKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "ProductLicenseProductIdKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "ProductLicenseProductIdKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        productLicenseProductIdKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                Guid productId;
                ProductRow productLicenseProductIdKeyRow = null;
                switch (productLicenseProductIdKeyTargetKey)
                {
                    case "ProductExternalId0Key":
                        try
                        {
                            this.dataModel.ProductExternalId0Key.AcquireReaderLock();
                            productLicenseProductIdKeyRow = this.dataModel.ProductExternalId0Key.Find(productKey[0]);
                            if (productLicenseProductIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ProductExternalId0Key", new object[] { productKey[0] }));
                            }
                        }
                        finally
                        {
                            this.dataModel.ProductExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "ProductKey":
                        try
                        {
                            this.dataModel.ProductKey.AcquireReaderLock();
                            productLicenseProductIdKeyRow = this.dataModel.ProductKey.Find(Guid.Parse(productKey[0]));
                            if (productLicenseProductIdKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ProductKey", new object[] { Guid.Parse(productKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.ProductKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    productLicenseProductIdKeyRow.AcquireReaderLock();
                    productId = productLicenseProductIdKeyRow.ProductId;
                }
                finally
                {
                    productLicenseProductIdKeyRow.ReleaseReaderLock();
                }

                long rowVersion = default(long);
                bool isFound = false;
                Guid licenseIdKey = default(Guid);
                string licenseTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "License");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "License" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        licenseTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                LicenseRow licenseRow = null;
                switch (licenseTargetKey)
                {
                    case "LicenseExternalId0Key":
                        try
                        {
                            this.dataModel.LicenseExternalId0Key.AcquireReaderLock();
                            licenseRow = licenseKey == null ? this.dataModel.LicenseExternalId0Key.Find(externalId0) : this.dataModel.LicenseExternalId0Key.Find(licenseKey[0]);
                        }
                        finally
                        {
                            this.dataModel.LicenseExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "LicenseKey":
                        try
                        {
                            this.dataModel.LicenseKey.AcquireReaderLock();
                            licenseRow = licenseKey == null ? this.dataModel.LicenseKey.Find(licenseIdParsed) : this.dataModel.LicenseKey.Find(Guid.Parse(licenseKey[0]));
                        }
                        finally
                        {
                            this.dataModel.LicenseKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (licenseRow != null)
                {
                    try
                    {
                        licenseRow.AcquireReaderLock();
                        licenseIdKey = licenseRow.LicenseId;
                        rowVersion = licenseRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        licenseRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    if (licenseIdParsed == default(Guid))
                    {
                        licenseIdParsed = licenseIdKey;
                    }

                    this.dataModel.UpdateLicense(customerId, dateCreatedParsed, dateModifiedParsed, developerLicenseTypeCode, externalId0, licenseIdParsed, licenseIdKey, productId, rowVersion, runtimeLicenseTypeCode);
                }
                else
                {
                    if (licenseIdParsed == default(Guid))
                    {
                        licenseIdParsed = Guid.NewGuid();
                    }

                    this.dataModel.CreateLicense(customerId, dateCreatedParsed, dateModifiedParsed, developerLicenseTypeCode, externalId0, licenseIdParsed, productId, runtimeLicenseTypeCode);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the LicenseType table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="description">The optional value for the description column.</param>
        /// <param name="licenseTypeCode">The optional value for the licenseTypeCode column.</param>
        /// <param name="licenseTypeKey">A required unique key for the LicenseType record.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreLicenseType(string configurationId, string description, string licenseTypeCode, string[] licenseTypeKey)
        {
            try
            {
                LicenseTypeCode licenseTypeCodeParsed = string.IsNullOrEmpty(licenseTypeCode) ? default(LicenseTypeCode) : (LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeCode);
                long rowVersion = default(long);
                bool isFound = false;
                LicenseTypeCode licenseTypeCodeKey = default(LicenseTypeCode);
                try
                {
                    this.dataModel.LicenseTypeKey.AcquireReaderLock();
                    LicenseTypeRow licenseTypeRow = licenseTypeKey == null ? this.dataModel.LicenseTypeKey.Find(licenseTypeCodeParsed) : this.dataModel.LicenseTypeKey.Find((LicenseTypeCode)Enum.Parse(typeof(LicenseTypeCode), licenseTypeKey[0]));
                    if (licenseTypeRow != null)
                    {
                        try
                        {
                            licenseTypeRow.AcquireReaderLock();
                            licenseTypeCodeKey = licenseTypeRow.LicenseTypeCode;
                            rowVersion = licenseTypeRow.RowVersion;
                            isFound = true;
                        }
                        finally
                        {
                            licenseTypeRow.ReleaseReaderLock();
                        }
                    }
                }
                finally
                {
                    this.dataModel.LicenseTypeKey.ReleaseReaderLock();
                }

                if (isFound)
                {
                    this.dataModel.UpdateLicenseType(description, licenseTypeCodeParsed, licenseTypeCodeKey, rowVersion);
                }
                else
                {
                    this.dataModel.CreateLicenseType(description, licenseTypeCodeParsed);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the Product table.
        /// </summary>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="dateCreated">The optional value for the dateCreated column.</param>
        /// <param name="dateModified">The optional value for the dateModified column.</param>
        /// <param name="description">The required value for the description column.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="productId">The optional value for the productId column.</param>
        /// <param name="productKey">A required unique key for the Product record.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreProduct(string configurationId, string dateCreated, string dateModified, string description, string externalId0, string name, string productId, string[] productKey)
        {
            try
            {
                DateTime dateCreatedParsed = string.IsNullOrEmpty(dateCreated) ? default(DateTime) : DateTime.Parse(dateCreated, CultureInfo.CurrentCulture);
                DateTime dateModifiedParsed = string.IsNullOrEmpty(dateModified) ? default(DateTime) : DateTime.Parse(dateModified, CultureInfo.CurrentCulture);
                Guid productIdParsed = string.IsNullOrEmpty(productId) ? default(Guid) : Guid.Parse(productId);
                long rowVersion = default(long);
                bool isFound = false;
                Guid productIdKey = default(Guid);
                string productTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Product");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Product" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        productTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                ProductRow productRow = null;
                switch (productTargetKey)
                {
                    case "ProductExternalId0Key":
                        try
                        {
                            this.dataModel.ProductExternalId0Key.AcquireReaderLock();
                            productRow = productKey == null ? this.dataModel.ProductExternalId0Key.Find(externalId0) : this.dataModel.ProductExternalId0Key.Find(productKey[0]);
                        }
                        finally
                        {
                            this.dataModel.ProductExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "ProductKey":
                        try
                        {
                            this.dataModel.ProductKey.AcquireReaderLock();
                            productRow = productKey == null ? this.dataModel.ProductKey.Find(productIdParsed) : this.dataModel.ProductKey.Find(Guid.Parse(productKey[0]));
                        }
                        finally
                        {
                            this.dataModel.ProductKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (productRow != null)
                {
                    try
                    {
                        productRow.AcquireReaderLock();
                        productIdKey = productRow.ProductId;
                        rowVersion = productRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        productRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    if (productIdParsed == default(Guid))
                    {
                        productIdParsed = productIdKey;
                    }

                    this.dataModel.UpdateProduct(dateCreatedParsed, dateModifiedParsed, description, externalId0, name, productIdParsed, productIdKey, rowVersion);
                }
                else
                {
                    if (productIdParsed == default(Guid))
                    {
                        productIdParsed = Guid.NewGuid();
                    }

                    this.dataModel.CreateProduct(dateCreatedParsed, dateModifiedParsed, description, externalId0, name, productIdParsed);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }

        /// <summary>
        /// Stores a record in the Province table.
        /// </summary>
        /// <param name="abbreviation">The optional value for the abbreviation column.</param>
        /// <param name="configurationId">Selects a configuration of unique indices used to resolve external identifiers.</param>
        /// <param name="countryKey">A required unique key for the parent Country record.</param>
        /// <param name="externalId0">The required value for the externalId0 column.</param>
        /// <param name="name">The optional value for the name column.</param>
        /// <param name="provinceId">The optional value for the provinceId column.</param>
        /// <param name="provinceKey">A required unique key for the Province record.</param>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated by a tool.")]
        [OperationBehavior(TransactionScopeRequired = true)]
        [ClaimsPermission(SecurityAction.Demand, ClaimType = ClaimTypes.Create, Resource = ClaimResources.Application)]
        public void StoreProvince(string abbreviation, string configurationId, string[] countryKey, string externalId0, string name, string provinceId, string[] provinceKey)
        {
            if (countryKey == null)
            {
                throw new ArgumentNullException("countryKey");
            }

            try
            {
                Guid provinceIdParsed = string.IsNullOrEmpty(provinceId) ? default(Guid) : Guid.Parse(provinceId);
                string countryProvinceKeyTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "CountryProvinceKey");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "CountryProvinceKey" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        countryProvinceKeyTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                Guid countryId;
                CountryRow countryProvinceKeyRow = null;
                switch (countryProvinceKeyTargetKey)
                {
                    case "CountryExternalId0Key":
                        try
                        {
                            this.dataModel.CountryExternalId0Key.AcquireReaderLock();
                            countryProvinceKeyRow = this.dataModel.CountryExternalId0Key.Find(countryKey[0]);
                            if (countryProvinceKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CountryExternalId0Key", new object[] { countryKey[0] }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CountryExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "CountryKey":
                        try
                        {
                            this.dataModel.CountryKey.AcquireReaderLock();
                            countryProvinceKeyRow = this.dataModel.CountryKey.Find(Guid.Parse(countryKey[0]));
                            if (countryProvinceKeyRow == null)
                            {
                                throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("CountryKey", new object[] { Guid.Parse(countryKey[0]) }));
                            }
                        }
                        finally
                        {
                            this.dataModel.CountryKey.ReleaseReaderLock();
                        }

                        break;
                }

                try
                {
                    countryProvinceKeyRow.AcquireReaderLock();
                    countryId = countryProvinceKeyRow.CountryId;
                }
                finally
                {
                    countryProvinceKeyRow.ReleaseReaderLock();
                }

                long rowVersion = default(long);
                bool isFound = false;
                Guid provinceIdKey = default(Guid);
                string provinceTargetKey = default(string);
                try
                {
                    this.dataModel.ConfigurationKey.AcquireReaderLock();
                    ConfigurationRow configurationRow = this.dataModel.ConfigurationKey.Find(configurationId, "Province");
                    if (configurationRow == null)
                    {
                        throw new FaultException<RecordNotFoundFault>(new RecordNotFoundFault("ConfigurationKey", new object[] { configurationId, "Province" }));
                    }

                    try
                    {
                        configurationRow.AcquireReaderLock();
                        provinceTargetKey = configurationRow.TargetKey;
                    }
                    finally
                    {
                        configurationRow.ReleaseReaderLock();
                    }
                }
                finally
                {
                    this.dataModel.ConfigurationKey.ReleaseReaderLock();
                }

                ProvinceRow provinceRow = null;
                switch (provinceTargetKey)
                {
                    case "ProvinceExternalId0Key":
                        try
                        {
                            this.dataModel.ProvinceExternalId0Key.AcquireReaderLock();
                            provinceRow = provinceKey == null ? this.dataModel.ProvinceExternalId0Key.Find(externalId0) : this.dataModel.ProvinceExternalId0Key.Find(provinceKey[0]);
                        }
                        finally
                        {
                            this.dataModel.ProvinceExternalId0Key.ReleaseReaderLock();
                        }

                        break;
                    case "ProvinceKey":
                        try
                        {
                            this.dataModel.ProvinceKey.AcquireReaderLock();
                            provinceRow = provinceKey == null ? this.dataModel.ProvinceKey.Find(provinceIdParsed) : this.dataModel.ProvinceKey.Find(Guid.Parse(provinceKey[0]));
                        }
                        finally
                        {
                            this.dataModel.ProvinceKey.ReleaseReaderLock();
                        }

                        break;
                }

                if (provinceRow != null)
                {
                    try
                    {
                        provinceRow.AcquireReaderLock();
                        provinceIdKey = provinceRow.ProvinceId;
                        rowVersion = provinceRow.RowVersion;
                        isFound = true;
                    }
                    finally
                    {
                        provinceRow.ReleaseReaderLock();
                    }
                }

                if (isFound)
                {
                    if (provinceIdParsed == default(Guid))
                    {
                        provinceIdParsed = provinceIdKey;
                    }

                    this.dataModel.UpdateProvince(abbreviation, countryId, externalId0, name, provinceIdParsed, provinceIdKey, rowVersion);
                }
                else
                {
                    if (provinceIdParsed == default(Guid))
                    {
                        provinceIdParsed = Guid.NewGuid();
                    }

                    this.dataModel.CreateProvince(abbreviation, countryId, externalId0, name, provinceIdParsed);
                }
            }
            catch (ArgumentException argumentException)
            {
                throw new FaultException<FormatFault>(new FormatFault(argumentException.Message));
            }
            catch (FormatException formatException)
            {
                throw new FaultException<FormatFault>(new FormatFault(formatException.Message));
            }
        }
    }
}