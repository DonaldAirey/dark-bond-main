// <auto-generated />
#pragma warning disable SA1649
namespace DarkBond.LicenseManager
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading;
    using System.Transactions;
    using DarkBond.ClientModel;
    using DarkBond.ServiceModel;
    using Microsoft.ApplicationInsights;
    using Microsoft.ApplicationInsights.DataContracts;

    /// <summary>
    /// The persistent store.
    /// </summary>
    public class PersistentStore : IPersistentStore
    {
        /// <summary>
        /// The connection string for the database.
        /// </summary>
        private string connectionString;

        /// <summary>
        /// A collection of SQL connections.
        /// </summary>
        private Dictionary<Transaction, SqlConnection> connectionTable = new Dictionary<Transaction, SqlConnection>();

        /// <summary>
        /// The settings for the service model components.
        /// </summary>
        private IServerSettings serverSettings;

        /// <summary>
        /// Used to synchronize access to the housekeeping fields.
        /// </summary>
        private object syncRoot = new object();

        /// <summary>
        /// Used to collect telemetry.
        /// </summary>
        private TelemetryClient telemetryClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersistentStore"/> class.
        /// </summary>
        /// <param name="serverSettings">The configuration manager.</param>
        /// <param name="telemetryClient">The client for collecting telemetry.</param>
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "DataModel", Justification = "Diagnostic message.")]
        public PersistentStore(IServerSettings serverSettings, TelemetryClient telemetryClient)
        {
            if (serverSettings == null)
            {
                throw new ArgumentNullException(nameof(serverSettings));
            }

            if (telemetryClient == null)
            {
                throw new ArgumentNullException(nameof(telemetryClient));
            }

            this.serverSettings = serverSettings;
            this.telemetryClient = telemetryClient;
            this.connectionString = this.serverSettings.SqlConnectionString;
        }

        /// <summary>
        /// Gets the current PersistentStoreTransaction.
        /// </summary>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Object is disposed explicitly at the end of the transaction.")]
        public SqlConnection CurrentConnection
        {
            get
            {
                try
                {
                    Transaction transaction = Transaction.Current;
                    Monitor.Enter(this.syncRoot);
                    SqlConnection sqlConnection;
                    if (!this.connectionTable.TryGetValue(transaction, out sqlConnection))
                    {
                        sqlConnection = new SqlConnection(this.connectionString);
                        sqlConnection.Open();
                        sqlConnection.EnlistTransaction(transaction);
                        transaction.TransactionCompleted += new TransactionCompletedEventHandler(this.OnTransactionCompleted);
                        this.connectionTable.Add(transaction, sqlConnection);
                    }

                    return sqlConnection;
                }
                finally
                {
                    Monitor.Exit(this.syncRoot);
                }
            }
        }

        /// <summary>
        /// Creates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        public void CreateConfiguration(string configurationId, long rowVersion, string source, string targetKey)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createConfiguration @configurationId,@rowVersion,@source,@targetKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@configurationId", configurationId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@source", source));
                sqlCommand.Parameters.Add(new SqlParameter("@targetKey", targetKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void CreateCountry(string abbreviation, Guid countryId, string externalId0, string name, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createCountry @abbreviation,@countryId,@externalId0,@name,@rowVersion", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", abbreviation));
                sqlCommand.Parameters.Add(new SqlParameter("@countryId", countryId));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", name));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void CreateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createCustomer @address1,@address2,@city,@company,@countryId,@customerId,@dateCreated,@dateModified,@dateOfBirth,@email,@externalId0,@firstName,@lastName,@middleName,@phone,@postalCode,@provinceId,@rowVersion", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@address1", address1));
                if (address2 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@address2", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@address2", address2));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@city", city));
                if (company == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@company", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@company", company));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@countryId", countryId));
                sqlCommand.Parameters.Add(new SqlParameter("@customerId", customerId));
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", dateModified));
                sqlCommand.Parameters.Add(new SqlParameter("@dateOfBirth", dateOfBirth));
                sqlCommand.Parameters.Add(new SqlParameter("@email", email));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", externalId0));
                }

                if (firstName == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@firstName", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@firstName", firstName));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@lastName", lastName));
                if (middleName == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@middleName", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@middleName", middleName));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@phone", phone));
                sqlCommand.Parameters.Add(new SqlParameter("@postalCode", postalCode));
                if (provinceId == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@provinceId", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@provinceId", provinceId));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        public void CreateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createLicense @customerId,@dateCreated,@dateModified,@developerLicenseTypeCode,@externalId0,@licenseId,@productId,@rowVersion,@runtimeLicenseTypeCode", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@customerId", customerId));
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", dateModified));
                sqlCommand.Parameters.Add(new SqlParameter("@developerLicenseTypeCode", developerLicenseTypeCode));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@licenseId", licenseId));
                sqlCommand.Parameters.Add(new SqlParameter("@productId", productId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@runtimeLicenseTypeCode", runtimeLicenseTypeCode));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void CreateLicenseType(string description, LicenseTypeCode licenseTypeCode, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createLicenseType @description,@licenseTypeCode,@rowVersion", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@description", description));
                sqlCommand.Parameters.Add(new SqlParameter("@licenseTypeCode", licenseTypeCode));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void CreateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createProduct @dateCreated,@dateModified,@description,@externalId0,@name,@productId,@rowVersion", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", dateModified));
                if (description == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@description", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@description", description));
                }

                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", name));
                sqlCommand.Parameters.Add(new SqlParameter("@productId", productId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Creates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void CreateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("createProvince @abbreviation,@countryId,@externalId0,@name,@provinceId,@rowVersion", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", abbreviation));
                sqlCommand.Parameters.Add(new SqlParameter("@countryId", countryId));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", name));
                sqlCommand.Parameters.Add(new SqlParameter("@provinceId", provinceId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", rowVersion));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a Configuration record.
        /// </summary>
        /// <param name="configurationId">The ConfigurationId key element.</param>
        /// <param name="source">The Source key element.</param>
        public void DeleteConfiguration(string configurationId, string source)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteConfiguration @configurationId,@source", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@configurationId", configurationId));
                sqlCommand.Parameters.Add(new SqlParameter("@source", source));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a Country record.
        /// </summary>
        /// <param name="countryId">The CountryId key element.</param>
        public void DeleteCountry(Guid countryId)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteCountry @countryId", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@countryId", countryId));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a Customer record.
        /// </summary>
        /// <param name="customerId">The CustomerId key element.</param>
        public void DeleteCustomer(Guid customerId)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteCustomer @customerId", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@customerId", customerId));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a License record.
        /// </summary>
        /// <param name="licenseId">The LicenseId key element.</param>
        public void DeleteLicense(Guid licenseId)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteLicense @licenseId", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@licenseId", licenseId));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a LicenseType record.
        /// </summary>
        /// <param name="licenseTypeCode">The LicenseTypeCode key element.</param>
        public void DeleteLicenseType(LicenseTypeCode licenseTypeCode)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteLicenseType @licenseTypeCode", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@licenseTypeCode", licenseTypeCode));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a Product record.
        /// </summary>
        /// <param name="productId">The ProductId key element.</param>
        public void DeleteProduct(Guid productId)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteProduct @productId", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@productId", productId));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Deletes a Province record.
        /// </summary>
        /// <param name="provinceId">The ProvinceId key element.</param>
        public void DeleteProvince(Guid provinceId)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("deleteProvince @provinceId", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@provinceId", provinceId));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Reads the data model from the persistent store.
        /// </summary>
        /// <returns>A transaction log that can be used to build the volatile data model.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002:DoNotExposeGenericLists", Justification = "Performance")]
        public List<object[]> Read()
        {
            List<object[]> transactionLog = new List<object[]>();
            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.connectionString))
                {
                    sqlConnection.Open();
                    PersistentStore.ReadConfigurationData(sqlConnection, transactionLog);
                    PersistentStore.ReadCountryData(sqlConnection, transactionLog);
                    PersistentStore.ReadCustomerData(sqlConnection, transactionLog);
                    PersistentStore.ReadLicenseData(sqlConnection, transactionLog);
                    PersistentStore.ReadLicenseTypeData(sqlConnection, transactionLog);
                    PersistentStore.ReadProductData(sqlConnection, transactionLog);
                    PersistentStore.ReadProvinceData(sqlConnection, transactionLog);
                }
            }
            catch (ArgumentException argumentException)
            {
                this.telemetryClient.TrackException(argumentException);

                throw;
            }
            catch (SqlException sqlException)
            {
                for (int errorIndex = 0; errorIndex < sqlException.Errors.Count; errorIndex = errorIndex + 1)
                {
                    this.telemetryClient.TrackTrace(sqlException.Errors[errorIndex].Message, SeverityLevel.Critical);
                }

                throw;
            }

            return transactionLog;
        }

        /// <summary>
        /// Updates a Configuration record.
        /// </summary>
        /// <param name="configurationId">The required value for the ConfigurationId column.</param>
        /// <param name="configurationIdKey">The ConfigurationId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="source">The required value for the Source column.</param>
        /// <param name="sourceKey">The Source key element.</param>
        /// <param name="targetKey">The required value for the TargetKey column.</param>
        public void UpdateConfiguration(string configurationId, string configurationIdKey, long rowVersion, string source, string sourceKey, string targetKey)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateConfiguration @configurationId,@rowVersion,@source,@targetKey,@configurationIdKey,@sourceKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@configurationId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, configurationId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@source", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, source));
                sqlCommand.Parameters.Add(new SqlParameter("@targetKey", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, targetKey));
                sqlCommand.Parameters.Add(new SqlParameter("@configurationIdKey", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, configurationIdKey));
                sqlCommand.Parameters.Add(new SqlParameter("@sourceKey", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, sourceKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a Country record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="countryIdKey">The CountryId key element.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void UpdateCountry(string abbreviation, Guid countryId, Guid countryIdKey, string externalId0, string name, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateCountry @abbreviation,@countryId,@externalId0,@name,@rowVersion,@countryIdKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, abbreviation));
                sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, countryId));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, name));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@countryIdKey", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, countryIdKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a Customer record.
        /// </summary>
        /// <param name="address1">The required value for the Address1 column.</param>
        /// <param name="address2">The optional value for the Address2 column.</param>
        /// <param name="city">The required value for the City column.</param>
        /// <param name="company">The optional value for the Company column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="customerIdKey">The CustomerId key element.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="dateOfBirth">The required value for the DateOfBirth column.</param>
        /// <param name="email">The required value for the Email column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="firstName">The optional value for the FirstName column.</param>
        /// <param name="lastName">The required value for the LastName column.</param>
        /// <param name="middleName">The optional value for the MiddleName column.</param>
        /// <param name="phone">The required value for the Phone column.</param>
        /// <param name="postalCode">The required value for the PostalCode column.</param>
        /// <param name="provinceId">The optional value for the ProvinceId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void UpdateCustomer(string address1, string address2, string city, string company, Guid countryId, Guid customerId, Guid customerIdKey, DateTime dateCreated, DateTime dateModified, DateTime dateOfBirth, string email, string externalId0, string firstName, string lastName, string middleName, string phone, string postalCode, Guid? provinceId, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateCustomer @address1,@address2,@city,@company,@countryId,@customerId,@dateCreated,@dateModified,@dateOfBirth,@email,@externalId0,@firstName,@lastName,@middleName,@phone,@postalCode,@provinceId,@rowVersion,@customerIdKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@address1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, address1));
                if (address2 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@address2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@address2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, address2));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@city", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, city));
                if (company == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@company", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@company", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, company));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, countryId));
                sqlCommand.Parameters.Add(new SqlParameter("@customerId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, customerId));
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateModified));
                sqlCommand.Parameters.Add(new SqlParameter("@dateOfBirth", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateOfBirth));
                sqlCommand.Parameters.Add(new SqlParameter("@email", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, email));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, externalId0));
                }

                if (firstName == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@firstName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@firstName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, firstName));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@lastName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, lastName));
                if (middleName == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@middleName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@middleName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, middleName));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@phone", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, phone));
                sqlCommand.Parameters.Add(new SqlParameter("@postalCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, postalCode));
                if (provinceId == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, provinceId));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@customerIdKey", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, customerIdKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a License record.
        /// </summary>
        /// <param name="customerId">The required value for the CustomerId column.</param>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="developerLicenseTypeCode">The required value for the DeveloperLicenseTypeCode column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="licenseId">The required value for the LicenseId column.</param>
        /// <param name="licenseIdKey">The LicenseId key element.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        /// <param name="runtimeLicenseTypeCode">The required value for the RuntimeLicenseTypeCode column.</param>
        public void UpdateLicense(Guid customerId, DateTime dateCreated, DateTime dateModified, LicenseTypeCode developerLicenseTypeCode, string externalId0, Guid licenseId, Guid licenseIdKey, Guid productId, long rowVersion, LicenseTypeCode runtimeLicenseTypeCode)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateLicense @customerId,@dateCreated,@dateModified,@developerLicenseTypeCode,@externalId0,@licenseId,@productId,@rowVersion,@runtimeLicenseTypeCode,@licenseIdKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@customerId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, customerId));
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateModified));
                sqlCommand.Parameters.Add(new SqlParameter("@developerLicenseTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, developerLicenseTypeCode));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@licenseId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, licenseId));
                sqlCommand.Parameters.Add(new SqlParameter("@productId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, productId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@runtimeLicenseTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, runtimeLicenseTypeCode));
                sqlCommand.Parameters.Add(new SqlParameter("@licenseIdKey", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, licenseIdKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a LicenseType record.
        /// </summary>
        /// <param name="description">The required value for the Description column.</param>
        /// <param name="licenseTypeCode">The required value for the LicenseTypeCode column.</param>
        /// <param name="licenseTypeCodeKey">The LicenseTypeCode key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void UpdateLicenseType(string description, LicenseTypeCode licenseTypeCode, LicenseTypeCode licenseTypeCodeKey, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateLicenseType @description,@licenseTypeCode,@rowVersion,@licenseTypeCodeKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, description));
                sqlCommand.Parameters.Add(new SqlParameter("@licenseTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, licenseTypeCode));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@licenseTypeCodeKey", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, licenseTypeCodeKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a Product record.
        /// </summary>
        /// <param name="dateCreated">The required value for the DateCreated column.</param>
        /// <param name="dateModified">The required value for the DateModified column.</param>
        /// <param name="description">The optional value for the Description column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="productId">The required value for the ProductId column.</param>
        /// <param name="productIdKey">The ProductId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void UpdateProduct(DateTime dateCreated, DateTime dateModified, string description, string externalId0, string name, Guid productId, Guid productIdKey, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateProduct @dateCreated,@dateModified,@description,@externalId0,@name,@productId,@rowVersion,@productIdKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@dateCreated", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateCreated));
                sqlCommand.Parameters.Add(new SqlParameter("@dateModified", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, dateModified));
                if (description == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, description));
                }

                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, name));
                sqlCommand.Parameters.Add(new SqlParameter("@productId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, productId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@productIdKey", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, productIdKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Updates a Province record.
        /// </summary>
        /// <param name="abbreviation">The required value for the Abbreviation column.</param>
        /// <param name="countryId">The required value for the CountryId column.</param>
        /// <param name="externalId0">The optional value for the ExternalId0 column.</param>
        /// <param name="name">The required value for the Name column.</param>
        /// <param name="provinceId">The required value for the ProvinceId column.</param>
        /// <param name="provinceIdKey">The ProvinceId key element.</param>
        /// <param name="rowVersion">The required value for the RowVersion column.</param>
        public void UpdateProvince(string abbreviation, Guid countryId, string externalId0, string name, Guid provinceId, Guid provinceIdKey, long rowVersion)
        {
            SqlConnection sqlConnection = this.CurrentConnection;
            using (SqlCommand sqlCommand = new SqlCommand("updateProvince @abbreviation,@countryId,@externalId0,@name,@provinceId,@rowVersion,@provinceIdKey", sqlConnection))
            {
                sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, abbreviation));
                sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, countryId));
                if (externalId0 == null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, DBNull.Value));
                }
                else
                {
                    sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, externalId0));
                }

                sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, name));
                sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, provinceId));
                sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, rowVersion));
                sqlCommand.Parameters.Add(new SqlParameter("@provinceIdKey", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, false, 0, 0, null, System.Data.DataRowVersion.Current, provinceIdKey));
                sqlCommand.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Processes the completion of a transaction.
        /// </summary>
        /// <param name="sender">The object that originated the event.</param>
        /// <param name="transactionEventArgs">The event arguments.</param>
        private void OnTransactionCompleted(object sender, TransactionEventArgs transactionEventArgs)
        {
            Transaction transaction = transactionEventArgs.Transaction;
            try
            {
                Monitor.Enter(this.syncRoot);
                SqlConnection sqlConnection;
                if (this.connectionTable.TryGetValue(transaction, out sqlConnection))
                {
                    sqlConnection.Dispose();
                    this.connectionTable.Remove(transaction);
                }
            }
            finally
            {
                Monitor.Exit(this.syncRoot);
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadConfigurationData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readConfiguration", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[6];
                        transactionItem[0] = 0;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (string)sqlDataReader.GetValue(0);
                        transactionItem[3] = (long)sqlDataReader.GetValue(1);
                        transactionItem[4] = (string)sqlDataReader.GetValue(2);
                        transactionItem[5] = (string)sqlDataReader.GetValue(3);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadCountryData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readCountry", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[7];
                        transactionItem[0] = 1;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (string)sqlDataReader.GetValue(0);
                        transactionItem[3] = (Guid)sqlDataReader.GetValue(1);
                        transactionItem[4] = sqlDataReader.IsDBNull(2) ? null : (string)sqlDataReader.GetValue(2);
                        transactionItem[5] = (string)sqlDataReader.GetValue(3);
                        transactionItem[6] = (long)sqlDataReader.GetValue(4);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadCustomerData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readCustomer", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[20];
                        transactionItem[0] = 2;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (string)sqlDataReader.GetValue(0);
                        transactionItem[3] = sqlDataReader.IsDBNull(1) ? null : (string)sqlDataReader.GetValue(1);
                        transactionItem[4] = (string)sqlDataReader.GetValue(2);
                        transactionItem[5] = sqlDataReader.IsDBNull(3) ? null : (string)sqlDataReader.GetValue(3);
                        transactionItem[6] = (Guid)sqlDataReader.GetValue(4);
                        transactionItem[7] = (Guid)sqlDataReader.GetValue(5);
                        transactionItem[8] = (DateTime)sqlDataReader.GetValue(6);
                        transactionItem[9] = (DateTime)sqlDataReader.GetValue(7);
                        transactionItem[10] = (DateTime)sqlDataReader.GetValue(8);
                        transactionItem[11] = (string)sqlDataReader.GetValue(9);
                        transactionItem[12] = sqlDataReader.IsDBNull(10) ? null : (string)sqlDataReader.GetValue(10);
                        transactionItem[13] = sqlDataReader.IsDBNull(11) ? null : (string)sqlDataReader.GetValue(11);
                        transactionItem[14] = (string)sqlDataReader.GetValue(12);
                        transactionItem[15] = sqlDataReader.IsDBNull(13) ? null : (string)sqlDataReader.GetValue(13);
                        transactionItem[16] = (string)sqlDataReader.GetValue(14);
                        transactionItem[17] = (string)sqlDataReader.GetValue(15);
                        transactionItem[18] = sqlDataReader.IsDBNull(16) ? null : (Guid?)sqlDataReader.GetValue(16);
                        transactionItem[19] = (long)sqlDataReader.GetValue(17);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadLicenseData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readLicense", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[11];
                        transactionItem[0] = 3;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (Guid)sqlDataReader.GetValue(0);
                        transactionItem[3] = (DateTime)sqlDataReader.GetValue(1);
                        transactionItem[4] = (DateTime)sqlDataReader.GetValue(2);
                        transactionItem[5] = (LicenseTypeCode)sqlDataReader.GetValue(3);
                        transactionItem[6] = sqlDataReader.IsDBNull(4) ? null : (string)sqlDataReader.GetValue(4);
                        transactionItem[7] = (Guid)sqlDataReader.GetValue(5);
                        transactionItem[8] = (Guid)sqlDataReader.GetValue(6);
                        transactionItem[9] = (long)sqlDataReader.GetValue(7);
                        transactionItem[10] = (LicenseTypeCode)sqlDataReader.GetValue(8);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadLicenseTypeData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readLicenseType", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[5];
                        transactionItem[0] = 4;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (string)sqlDataReader.GetValue(0);
                        transactionItem[3] = (LicenseTypeCode)sqlDataReader.GetValue(1);
                        transactionItem[4] = (long)sqlDataReader.GetValue(2);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadProductData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readProduct", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[9];
                        transactionItem[0] = 5;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (DateTime)sqlDataReader.GetValue(0);
                        transactionItem[3] = (DateTime)sqlDataReader.GetValue(1);
                        transactionItem[4] = sqlDataReader.IsDBNull(2) ? null : (string)sqlDataReader.GetValue(2);
                        transactionItem[5] = sqlDataReader.IsDBNull(3) ? null : (string)sqlDataReader.GetValue(3);
                        transactionItem[6] = (string)sqlDataReader.GetValue(4);
                        transactionItem[7] = (Guid)sqlDataReader.GetValue(5);
                        transactionItem[8] = (long)sqlDataReader.GetValue(6);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }

        /// <summary>
        /// Read the data for the Configuration table.
        /// </summary>
        /// <param name="sqlConnection">The SQL connection.</param>
        /// <param name="transactionLog">The transaction log.</param>
        private static void ReadProvinceData(SqlConnection sqlConnection, List<object[]> transactionLog)
        {
            using (SqlCommand sqlCommand = new SqlCommand("readProvince", sqlConnection))
            {
                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    while (sqlDataReader.Read())
                    {
                        object[] transactionItem = new object[8];
                        transactionItem[0] = 6;
                        transactionItem[1] = RecordState.Added;
                        transactionItem[2] = (string)sqlDataReader.GetValue(0);
                        transactionItem[3] = (Guid)sqlDataReader.GetValue(1);
                        transactionItem[4] = sqlDataReader.IsDBNull(2) ? null : (string)sqlDataReader.GetValue(2);
                        transactionItem[5] = (string)sqlDataReader.GetValue(3);
                        transactionItem[6] = (Guid)sqlDataReader.GetValue(4);
                        transactionItem[7] = (long)sqlDataReader.GetValue(5);
                        transactionLog.Add(transactionItem);
                    }
                }
            }
        }
    }
}
#pragma warning disable SA1649
